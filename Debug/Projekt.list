
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a538  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800a708  0800a708  0001a708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa4  0800aaa4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaac  0800aaac  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aab0  0800aab0  0001aab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800aab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  200001f0  0800aca4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800aca4  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b13  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a98  00000000  00000000  00039d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293a8  00000000  00000000  0003ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3e0  00000000  00000000  000692f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6651  00000000  00000000  000866d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c94  00000000  00000000  0017cd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001839bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6f0 	.word	0x0800a6f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800a6f0 	.word	0x0800a6f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <BMP280_Read8+0x38>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	21ec      	movs	r1, #236	; 0xec
 8000fac:	f002 f9a2 	bl	80032f4 <HAL_I2C_Mem_Read>
  return tmp;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000020c 	.word	0x2000020c

08000fc0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <BMP280_Read16+0x40>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	21ec      	movs	r1, #236	; 0xec
 8000fe4:	f002 f986 	bl	80032f4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000020c 	.word	0x2000020c

08001004 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffd5 	bl	8000fc0 <BMP280_Read16>
 8001016:	4603      	mov	r3, r0
 8001018:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <BMP280_Write8+0x34>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	b29a      	uxth	r2, r3
 8001050:	230a      	movs	r3, #10
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	21ec      	movs	r1, #236	; 0xec
 8001060:	f002 f834 	bl	80030cc <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000020c 	.word	0x2000020c

08001070 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af04      	add	r7, sp, #16
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <BMP280_Read24+0x40>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	b29a      	uxth	r2, r3
 8001082:	230a      	movs	r3, #10
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2303      	movs	r3, #3
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	21ec      	movs	r1, #236	; 0xec
 8001094:	f002 f92e 	bl	80032f4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7bba      	ldrb	r2, [r7, #14]
 80010a4:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000020c 	.word	0x2000020c

080010b4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	70fb      	strb	r3, [r7, #3]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70bb      	strb	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <BMP280_Init+0x13c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d901      	bls.n	80010de <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010da:	2303      	movs	r3, #3
 80010dc:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010de:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <BMP280_Init+0x140>)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d901      	bls.n	80010f8 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010f4:	2305      	movs	r3, #5
 80010f6:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010f8:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <BMP280_Init+0x144>)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d901      	bls.n	8001108 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001104:	2305      	movs	r3, #5
 8001106:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001108:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <BMP280_Init+0x148>)
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800110e:	bf00      	nop
 8001110:	20d0      	movs	r0, #208	; 0xd0
 8001112:	f7ff ff37 	bl	8000f84 <BMP280_Read8>
 8001116:	4603      	mov	r3, r0
 8001118:	2b58      	cmp	r3, #88	; 0x58
 800111a:	d1f9      	bne.n	8001110 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800111c:	2088      	movs	r0, #136	; 0x88
 800111e:	f7ff ff71 	bl	8001004 <BMP280_Read16LE>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <BMP280_Init+0x14c>)
 8001128:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800112a:	208a      	movs	r0, #138	; 0x8a
 800112c:	f7ff ff6a 	bl	8001004 <BMP280_Read16LE>
 8001130:	4603      	mov	r3, r0
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <BMP280_Init+0x150>)
 8001136:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001138:	208c      	movs	r0, #140	; 0x8c
 800113a:	f7ff ff63 	bl	8001004 <BMP280_Read16LE>
 800113e:	4603      	mov	r3, r0
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <BMP280_Init+0x154>)
 8001144:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001146:	208e      	movs	r0, #142	; 0x8e
 8001148:	f7ff ff5c 	bl	8001004 <BMP280_Read16LE>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <BMP280_Init+0x158>)
 8001152:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001154:	2090      	movs	r0, #144	; 0x90
 8001156:	f7ff ff55 	bl	8001004 <BMP280_Read16LE>
 800115a:	4603      	mov	r3, r0
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <BMP280_Init+0x15c>)
 8001160:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001162:	2092      	movs	r0, #146	; 0x92
 8001164:	f7ff ff4e 	bl	8001004 <BMP280_Read16LE>
 8001168:	4603      	mov	r3, r0
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <BMP280_Init+0x160>)
 800116e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001170:	2094      	movs	r0, #148	; 0x94
 8001172:	f7ff ff47 	bl	8001004 <BMP280_Read16LE>
 8001176:	4603      	mov	r3, r0
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <BMP280_Init+0x164>)
 800117c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800117e:	2096      	movs	r0, #150	; 0x96
 8001180:	f7ff ff40 	bl	8001004 <BMP280_Read16LE>
 8001184:	4603      	mov	r3, r0
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <BMP280_Init+0x168>)
 800118a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800118c:	2098      	movs	r0, #152	; 0x98
 800118e:	f7ff ff39 	bl	8001004 <BMP280_Read16LE>
 8001192:	4603      	mov	r3, r0
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <BMP280_Init+0x16c>)
 8001198:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800119a:	209a      	movs	r0, #154	; 0x9a
 800119c:	f7ff ff32 	bl	8001004 <BMP280_Read16LE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <BMP280_Init+0x170>)
 80011a6:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011a8:	209c      	movs	r0, #156	; 0x9c
 80011aa:	f7ff ff2b 	bl	8001004 <BMP280_Read16LE>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <BMP280_Init+0x174>)
 80011b4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011b6:	209e      	movs	r0, #158	; 0x9e
 80011b8:	f7ff ff24 	bl	8001004 <BMP280_Read16LE>
 80011bc:	4603      	mov	r3, r0
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <BMP280_Init+0x178>)
 80011c2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	78bb      	ldrb	r3, [r7, #2]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	20f4      	movs	r0, #244	; 0xf4
 80011e2:	f7ff ff29 	bl	8001038 <BMP280_Write8>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	20000212 	.word	0x20000212
 80011f8:	20000210 	.word	0x20000210
 80011fc:	20000211 	.word	0x20000211
 8001200:	20000228 	.word	0x20000228
 8001204:	20000214 	.word	0x20000214
 8001208:	20000216 	.word	0x20000216
 800120c:	2000022a 	.word	0x2000022a
 8001210:	20000218 	.word	0x20000218
 8001214:	2000021a 	.word	0x2000021a
 8001218:	2000021c 	.word	0x2000021c
 800121c:	2000021e 	.word	0x2000021e
 8001220:	20000220 	.word	0x20000220
 8001224:	20000222 	.word	0x20000222
 8001228:	20000224 	.word	0x20000224
 800122c:	20000226 	.word	0x20000226

08001230 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <BMP280_ReadTemperature+0xfc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d16d      	bne.n	800131a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800123e:	20f4      	movs	r0, #244	; 0xf4
 8001240:	f7ff fea0 	bl	8000f84 <BMP280_Read8>
 8001244:	4603      	mov	r3, r0
 8001246:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	4619      	mov	r1, r3
 800125c:	20f4      	movs	r0, #244	; 0xf4
 800125e:	f7ff feeb 	bl	8001038 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001262:	20f4      	movs	r0, #244	; 0xf4
 8001264:	f7ff fe8e 	bl	8000f84 <BMP280_Read8>
 8001268:	4603      	mov	r3, r0
 800126a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d14f      	bne.n	800131a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800127a:	20f4      	movs	r0, #244	; 0xf4
 800127c:	f7ff fe82 	bl	8000f84 <BMP280_Read8>
 8001280:	4603      	mov	r3, r0
 8001282:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001292:	e7f2      	b.n	800127a <BMP280_ReadTemperature+0x4a>
				  break;
 8001294:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001296:	20fa      	movs	r0, #250	; 0xfa
 8001298:	f7ff feea 	bl	8001070 <BMP280_Read24>
 800129c:	4603      	mov	r3, r0
 800129e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	111b      	asrs	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	10da      	asrs	r2, r3, #3
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <BMP280_ReadTemperature+0x104>)
 80012b4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	12db      	asrs	r3, r3, #11
 80012be:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	111b      	asrs	r3, r3, #4
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012c6:	8812      	ldrh	r2, [r2, #0]
 80012c8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	1112      	asrs	r2, r2, #4
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012d0:	8809      	ldrh	r1, [r1, #0]
 80012d2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <BMP280_ReadTemperature+0x108>)
 80012dc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012e4:	139b      	asrs	r3, r3, #14
 80012e6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3380      	adds	r3, #128	; 0x80
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001340 <BMP280_ReadTemperature+0x110>
 8001314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001318:	e001      	b.n	800131e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800131a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001344 <BMP280_ReadTemperature+0x114>
}
 800131e:	eef0 7a47 	vmov.f32	s15, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000212 	.word	0x20000212
 8001330:	20000228 	.word	0x20000228
 8001334:	20000214 	.word	0x20000214
 8001338:	20000216 	.word	0x20000216
 800133c:	2000022c 	.word	0x2000022c
 8001340:	42c80000 	.word	0x42c80000
 8001344:	c2c60000 	.word	0xc2c60000

08001348 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2120      	movs	r1, #32
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <TM1637_ClkHigh+0x14>)
 8001352:	f001 fdf7 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020000 	.word	0x40020000

08001360 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2120      	movs	r1, #32
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TM1637_ClkLow+0x14>)
 800136a:	f001 fdeb 	bl	8002f44 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000

08001378 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2140      	movs	r1, #64	; 0x40
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TM1637_DataHigh+0x14>)
 8001382:	f001 fddf 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020000 	.word	0x40020000

08001390 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TM1637_DataLow+0x14>)
 800139a:	f001 fdd3 	bl	8002f44 <HAL_GPIO_WritePin>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40020000 	.word	0x40020000

080013a8 <TM1637_DisplayDecimal>:
    TM1637_SetBrightness(8);
}


void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e032      	b.n	800141e <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <TM1637_DisplayDecimal+0xd4>)
 80013bc:	fb83 2301 	smull	r2, r3, r3, r1
 80013c0:	109a      	asrs	r2, r3, #2
 80013c2:	17cb      	asrs	r3, r1, #31
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	1aca      	subs	r2, r1, r3
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <TM1637_DisplayDecimal+0xd8>)
 80013d2:	5c99      	ldrb	r1, [r3, r2]
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4413      	add	r3, r2
 80013dc:	460a      	mov	r2, r1
 80013de:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d110      	bne.n	8001408 <TM1637_DisplayDecimal+0x60>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013fa:	b2d9      	uxtb	r1, r3
 80013fc:	f107 020c 	add.w	r2, r7, #12
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4413      	add	r3, r2
 8001404:	460a      	mov	r2, r1
 8001406:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <TM1637_DisplayDecimal+0xd4>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	1092      	asrs	r2, r2, #2
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b03      	cmp	r3, #3
 8001422:	ddc9      	ble.n	80013b8 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8001424:	f000 f843 	bl	80014ae <TM1637_Start>
    TM1637_WriteByte(0x40);
 8001428:	2040      	movs	r0, #64	; 0x40
 800142a:	f000 f872 	bl	8001512 <TM1637_WriteByte>
    TM1637_ReadResult();
 800142e:	f000 f860 	bl	80014f2 <TM1637_ReadResult>
    TM1637_Stop();
 8001432:	f000 f849 	bl	80014c8 <TM1637_Stop>

    TM1637_Start();
 8001436:	f000 f83a 	bl	80014ae <TM1637_Start>
    TM1637_WriteByte(0xc0);
 800143a:	20c0      	movs	r0, #192	; 0xc0
 800143c:	f000 f869 	bl	8001512 <TM1637_WriteByte>
    TM1637_ReadResult();
 8001440:	f000 f857 	bl	80014f2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	e00e      	b.n	8001468 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f1c3 0303 	rsb	r3, r3, #3
 8001450:	3318      	adds	r3, #24
 8001452:	443b      	add	r3, r7
 8001454:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f85a 	bl	8001512 <TM1637_WriteByte>
        TM1637_ReadResult();
 800145e:	f000 f848 	bl	80014f2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b03      	cmp	r3, #3
 800146c:	dded      	ble.n	800144a <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 800146e:	f000 f82b 	bl	80014c8 <TM1637_Stop>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	66666667 	.word	0x66666667
 8001480:	0800a708 	.word	0x0800a708

08001484 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800148e:	f000 f80e 	bl	80014ae <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	3b79      	subs	r3, #121	; 0x79
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f83a 	bl	8001512 <TM1637_WriteByte>
    TM1637_ReadResult();
 800149e:	f000 f828 	bl	80014f2 <TM1637_ReadResult>
    TM1637_Stop();
 80014a2:	f000 f811 	bl	80014c8 <TM1637_Stop>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <TM1637_Start>:

void TM1637_Start(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80014b2:	f7ff ff49 	bl	8001348 <TM1637_ClkHigh>
    TM1637_DataHigh();
 80014b6:	f7ff ff5f 	bl	8001378 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 f853 	bl	8001566 <TM1637_DelayUsec>
    TM1637_DataLow();
 80014c0:	f7ff ff66 	bl	8001390 <TM1637_DataLow>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80014cc:	f7ff ff48 	bl	8001360 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f000 f848 	bl	8001566 <TM1637_DelayUsec>
    TM1637_DataLow();
 80014d6:	f7ff ff5b 	bl	8001390 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80014da:	2002      	movs	r0, #2
 80014dc:	f000 f843 	bl	8001566 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80014e0:	f7ff ff32 	bl	8001348 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80014e4:	2002      	movs	r0, #2
 80014e6:	f000 f83e 	bl	8001566 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80014ea:	f7ff ff45 	bl	8001378 <TM1637_DataHigh>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80014f6:	f7ff ff33 	bl	8001360 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80014fa:	2005      	movs	r0, #5
 80014fc:	f000 f833 	bl	8001566 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8001500:	f7ff ff22 	bl	8001348 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8001504:	2002      	movs	r0, #2
 8001506:	f000 f82e 	bl	8001566 <TM1637_DelayUsec>
    TM1637_ClkLow();
 800150a:	f7ff ff29 	bl	8001360 <TM1637_ClkLow>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}

08001512 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e019      	b.n	8001556 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8001522:	f7ff ff1d 	bl	8001360 <TM1637_ClkLow>
		if (b & 0x01) {
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8001530:	f7ff ff22 	bl	8001378 <TM1637_DataHigh>
 8001534:	e001      	b.n	800153a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8001536:	f7ff ff2b 	bl	8001390 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 f813 	bl	8001566 <TM1637_DelayUsec>
		b >>= 1;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8001546:	f7ff feff 	bl	8001348 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800154a:	2003      	movs	r0, #3
 800154c:	f000 f80b 	bl	8001566 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b07      	cmp	r3, #7
 800155a:	dde2      	ble.n	8001522 <TM1637_WriteByte+0x10>
	}
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800156e:	e00d      	b.n	800158c <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e003      	b.n	800157e <TM1637_DelayUsec+0x18>
					__NOP();
 8001576:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001584:	dbf7      	blt.n	8001576 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3b01      	subs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ee      	bne.n	8001570 <TM1637_DelayUsec+0xa>
        }
    }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b78      	ldr	r3, [pc, #480]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a77      	ldr	r2, [pc, #476]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b75      	ldr	r3, [pc, #468]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a71      	ldr	r2, [pc, #452]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b69      	ldr	r3, [pc, #420]	; (8001798 <MX_GPIO_Init+0x1f8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <MX_GPIO_Init+0x1f8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <MX_GPIO_Init+0x1f8>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a59      	ldr	r2, [pc, #356]	; (8001798 <MX_GPIO_Init+0x1f8>)
 8001634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <MX_GPIO_Init+0x1f8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DATA_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2160      	movs	r1, #96	; 0x60
 800164a:	4854      	ldr	r0, [pc, #336]	; (800179c <MX_GPIO_Init+0x1fc>)
 800164c:	f001 fc7a 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f244 0181 	movw	r1, #16513	; 0x4081
 8001656:	4852      	ldr	r0, [pc, #328]	; (80017a0 <MX_GPIO_Init+0x200>)
 8001658:	f001 fc74 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	4850      	ldr	r0, [pc, #320]	; (80017a4 <MX_GPIO_Init+0x204>)
 8001662:	f001 fc6f 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	484a      	ldr	r0, [pc, #296]	; (80017a8 <MX_GPIO_Init+0x208>)
 800167e:	f001 fa9d 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001682:	2332      	movs	r3, #50	; 0x32
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001692:	230b      	movs	r3, #11
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4842      	ldr	r0, [pc, #264]	; (80017a8 <MX_GPIO_Init+0x208>)
 800169e:	f001 fa8d 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016a2:	2386      	movs	r3, #134	; 0x86
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b2:	230b      	movs	r3, #11
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4837      	ldr	r0, [pc, #220]	; (800179c <MX_GPIO_Init+0x1fc>)
 80016be:	f001 fa7d 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4830      	ldr	r0, [pc, #192]	; (800179c <MX_GPIO_Init+0x1fc>)
 80016da:	f001 fa6f 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016de:	f244 0381 	movw	r3, #16513	; 0x4081
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	482a      	ldr	r0, [pc, #168]	; (80017a0 <MX_GPIO_Init+0x200>)
 80016f8:	f001 fa60 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_Btn_Pin;
 80016fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_Btn_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4823      	ldr	r0, [pc, #140]	; (80017a0 <MX_GPIO_Init+0x200>)
 8001712:	f001 fa53 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001728:	230b      	movs	r3, #11
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_GPIO_Init+0x200>)
 8001734:	f001 fa42 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <MX_GPIO_Init+0x204>)
 8001750:	f001 fa34 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MX_GPIO_Init+0x204>)
 8001768:	f001 fa28 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800176c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800177e:	230b      	movs	r3, #11
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_GPIO_Init+0x204>)
 800178a:	f001 fa17 	bl	8002bbc <HAL_GPIO_Init>

}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	; 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40021800 	.word	0x40021800
 80017a8:	40020800 	.word	0x40020800

080017ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_I2C1_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_I2C1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_I2C1_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <MX_I2C1_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_I2C1_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_I2C1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_I2C1_Init+0x74>)
 80017e8:	f001 fbe0 	bl	8002fac <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 fb6d 	bl	8001ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_I2C1_Init+0x74>)
 80017fa:	f002 f92f 	bl	8003a5c <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 fb64 	bl	8001ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C1_Init+0x74>)
 800180c:	f002 f971 	bl	8003af2 <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 fb5b 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000230 	.word	0x20000230
 8001824:	40005400 	.word	0x40005400
 8001828:	00808cd2 	.word	0x00808cd2

0800182c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0aa      	sub	sp, #168	; 0xa8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2284      	movs	r2, #132	; 0x84
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f006 fffe 	bl	800884e <memset>
  if(i2cHandle->Instance==I2C1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_I2C_MspInit+0xb4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d13c      	bne.n	80018d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800185c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001860:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001862:	2300      	movs	r3, #0
 8001864:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4618      	mov	r0, r3
 800186c:	f002 ffb0 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001876:	f000 fb2b 	bl	8001ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001892:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	2312      	movs	r3, #18
 800189c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ac:	2304      	movs	r3, #4
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b6:	4619      	mov	r1, r3
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_I2C_MspInit+0xbc>)
 80018ba:	f001 f97f 	bl	8002bbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_I2C_MspInit+0xb8>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	37a8      	adds	r7, #168	; 0xa8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f0:	f000 ff3f 	bl	8002772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f864 	bl	80019c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f7ff fe52 	bl	80015a0 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018fc:	f000 fe68 	bl	80025d0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001900:	f7ff ff54 	bl	80017ac <MX_I2C1_Init>
  MX_TIM10_Init();
 8001904:	f000 fcde 	bl	80022c4 <MX_TIM10_Init>
  MX_TIM3_Init();
 8001908:	f000 fc2c 	bl	8002164 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800190c:	f000 fdc8 	bl	80024a0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001910:	f000 fc82 	bl	8002218 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_IT(&huart3, &temp, 3);
 8001914:	2203      	movs	r2, #3
 8001916:	491f      	ldr	r1, [pc, #124]	; (8001994 <main+0xa8>)
 8001918:	481f      	ldr	r0, [pc, #124]	; (8001998 <main+0xac>)
 800191a:	f004 fd2f 	bl	800637c <HAL_UART_Receive_IT>
BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 800191e:	2301      	movs	r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	2101      	movs	r1, #1
 8001924:	481d      	ldr	r0, [pc, #116]	; (800199c <main+0xb0>)
 8001926:	f7ff fbc5 	bl	80010b4 <BMP280_Init>
HAL_TIM_Base_Start_IT(&htim10);
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <main+0xb4>)
 800192c:	f003 fb98 	bl	8005060 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001930:	2108      	movs	r1, #8
 8001932:	481c      	ldr	r0, [pc, #112]	; (80019a4 <main+0xb8>)
 8001934:	f003 fc64 	bl	8005200 <HAL_TIM_PWM_Start>
__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse);
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <main+0xbc>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <main+0xb8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001946:	ee17 2a90 	vmov	r2, s15
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c
HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800194c:	213c      	movs	r1, #60	; 0x3c
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <main+0xc0>)
 8001950:	f003 fdf6 	bl	8005540 <HAL_TIM_Encoder_Start_IT>
TM1637_SetBrightness(7);
 8001954:	2007      	movs	r0, #7
 8001956:	f7ff fd95 	bl	8001484 <TM1637_SetBrightness>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(ENC_Btn_GPIO_Port, ENC_Btn_Pin)==1) TM1637_DisplayDecimal(temp_zad_disp, 1);
 800195a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800195e:	4814      	ldr	r0, [pc, #80]	; (80019b0 <main+0xc4>)
 8001960:	f001 fad8 	bl	8002f14 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <main+0x8c>
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <main+0xc8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd19 	bl	80013a8 <TM1637_DisplayDecimal>
 8001976:	e005      	b.n	8001984 <main+0x98>
	  else TM1637_DisplayDecimal(temp_act_disp, 1);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <main+0xcc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd12 	bl	80013a8 <TM1637_DisplayDecimal>
	  impulsy = __HAL_TIM_GET_COUNTER(&htim4);
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <main+0xc0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	461a      	mov	r2, r3
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <main+0xd0>)
 800198e:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(ENC_Btn_GPIO_Port, ENC_Btn_Pin)==1) TM1637_DisplayDecimal(temp_zad_disp, 1);
 8001990:	e7e3      	b.n	800195a <main+0x6e>
 8001992:	bf00      	nop
 8001994:	20000284 	.word	0x20000284
 8001998:	20000394 	.word	0x20000394
 800199c:	20000230 	.word	0x20000230
 80019a0:	20000348 	.word	0x20000348
 80019a4:	200002b0 	.word	0x200002b0
 80019a8:	200002a4 	.word	0x200002a4
 80019ac:	200002fc 	.word	0x200002fc
 80019b0:	40020400 	.word	0x40020400
 80019b4:	2000028c 	.word	0x2000028c
 80019b8:	20000290 	.word	0x20000290
 80019bc:	20000294 	.word	0x20000294

080019c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b094      	sub	sp, #80	; 0x50
 80019c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2230      	movs	r2, #48	; 0x30
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f006 ff3d 	bl	800884e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e4:	f002 fa1a 	bl	8003e1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <SystemClock_Config+0xc8>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <SystemClock_Config+0xc8>)
 80019ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f2:	6413      	str	r3, [r2, #64]	; 0x40
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <SystemClock_Config+0xc8>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <SystemClock_Config+0xcc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a08:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <SystemClock_Config+0xcc>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <SystemClock_Config+0xcc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a26:	2302      	movs	r3, #2
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a30:	2304      	movs	r3, #4
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a34:	2348      	movs	r3, #72	; 0x48
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 f9f9 	bl	8003e3c <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a50:	f000 fa3e 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fc87 	bl	8004384 <HAL_RCC_ClockConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a7c:	f000 fa28 	bl	8001ed0 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3750      	adds	r7, #80	; 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <calc_pid>:

/* USER CODE BEGIN 4 */
float calc_pid(PIDController* pid, float set_temp, float meas_temp){
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a9c:	edc7 0a01 	vstr	s1, [r7, #4]
	float u, P, I, D, error, integral, derivative;

	error = set_temp-meas_temp;
 8001aa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	P=pid->kp * error;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	integral = pid->prev_integral + (error+pid->prev_error);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ace:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid->prev_integral = integral;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	615a      	str	r2, [r3, #20]
	I = pid->ki*integral*(pid->dt/2.0);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	ee17 0a90 	vmov	r0, s15
 8001af6:	f7fe fd47 	bl	8000588 <__aeabi_f2d>
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd40 	bl	8000588 <__aeabi_f2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	f7fe febc 	bl	800088c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fd8c 	bl	8000638 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f85e 	bl	8000be8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	623b      	str	r3, [r7, #32]

	derivative = (error - pid->prev_error)/pid->dt;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b36:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b48:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->prev_error=error;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b50:	611a      	str	r2, [r3, #16]
	D = pid->kd*derivative;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	edc7 7a06 	vstr	s15, [r7, #24]

	u = P+I+D;
 8001b64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b68:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b70:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b78:	edc7 7a05 	vstr	s15, [r7, #20]


	return u;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	ee07 3a90 	vmov	s15, r3
}
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}

08001b8c <ConvertTemperature>:

int ConvertTemperature(char hundreds, char tens, char units)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	460b      	mov	r3, r1
 8001b98:	71bb      	strb	r3, [r7, #6]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	717b      	strb	r3, [r7, #5]
  int integer_part = (hundreds - '0') * 100 + (tens - '0') * 10 + (units - '0');
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3b30      	subs	r3, #48	; 0x30
 8001ba2:	2264      	movs	r2, #100	; 0x64
 8001ba4:	fb02 f103 	mul.w	r1, r2, r3
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	18ca      	adds	r2, r1, r3
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	3b30      	subs	r3, #48	; 0x30
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  return integer_part;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_UART_RxCpltCallback+0xb4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10b      	bne.n	8001bfa <HAL_UART_RxCpltCallback+0x2a>
		received_temperature = ConvertTemperature(temp[0], temp[1], temp[2]);
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_UART_RxCpltCallback+0xb8>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <HAL_UART_RxCpltCallback+0xb8>)
 8001be8:	7851      	ldrb	r1, [r2, #1]
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_UART_RxCpltCallback+0xb8>)
 8001bec:	7892      	ldrb	r2, [r2, #2]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffcc 	bl	8001b8c <ConvertTemperature>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_UART_RxCpltCallback+0xbc>)
 8001bf8:	6013      	str	r3, [r2, #0]
//
//							HAL_UART_Transmit_IT(&huart3, (uint8_t*)Data, strlen(Data));
//							HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//		}

		temp_zad = received_temperature / 10.0;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_UART_RxCpltCallback+0xbc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcb0 	bl	8000564 <__aeabi_i2d>
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_UART_RxCpltCallback+0xc0>)
 8001c0a:	f7fe fe3f 	bl	800088c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ffe7 	bl	8000be8 <__aeabi_d2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c1e:	6013      	str	r3, [r2, #0]
		if(temp_zad>35){
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c98 <HAL_UART_RxCpltCallback+0xc8>
 8001c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd03      	ble.n	8001c3c <HAL_UART_RxCpltCallback+0x6c>
			temp_zad=35;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_UART_RxCpltCallback+0xcc>)
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00c      	b.n	8001c56 <HAL_UART_RxCpltCallback+0x86>
		}
		else if(temp_zad<25){
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d502      	bpl.n	8001c56 <HAL_UART_RxCpltCallback+0x86>
			temp_zad=25;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_UART_RxCpltCallback+0xd0>)
 8001c54:	601a      	str	r2, [r3, #0]
		}
		temp_zad_disp=temp_zad*100;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_UART_RxCpltCallback+0xc4>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ca4 <HAL_UART_RxCpltCallback+0xd4>
 8001c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 2a90 	vmov	r2, s15
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_UART_RxCpltCallback+0xd8>)
 8001c6e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &temp, 3);
 8001c70:	2203      	movs	r2, #3
 8001c72:	4905      	ldr	r1, [pc, #20]	; (8001c88 <HAL_UART_RxCpltCallback+0xb8>)
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <HAL_UART_RxCpltCallback+0xdc>)
 8001c76:	f004 fb81 	bl	800637c <HAL_UART_Receive_IT>

	}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40004800 	.word	0x40004800
 8001c88:	20000284 	.word	0x20000284
 8001c8c:	20000288 	.word	0x20000288
 8001c90:	40240000 	.word	0x40240000
 8001c94:	200002a0 	.word	0x200002a0
 8001c98:	420c0000 	.word	0x420c0000
 8001c9c:	420c0000 	.word	0x420c0000
 8001ca0:	41c80000 	.word	0x41c80000
 8001ca4:	42c80000 	.word	0x42c80000
 8001ca8:	2000028c 	.word	0x2000028c
 8001cac:	20000394 	.word	0x20000394

08001cb0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d15c      	bne.n	8001d7c <HAL_TIM_IC_CaptureCallback+0xcc>
  {
    if(__HAL_TIM_GET_COUNTER(&htim4)>prev_impulsy)temp_zad += 0.05;
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d913      	bls.n	8001cf8 <HAL_TIM_IC_CaptureCallback+0x48>
 8001cd0:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc57 	bl	8000588 <__aeabi_f2d>
 8001cda:	a32b      	add	r3, pc, #172	; (adr r3, 8001d88 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe faf4 	bl	80002cc <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe ff7c 	bl	8000be8 <__aeabi_d2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e012      	b.n	8001d1e <HAL_TIM_IC_CaptureCallback+0x6e>
    else temp_zad += -0.05;
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc43 	bl	8000588 <__aeabi_f2d>
 8001d02:	a321      	add	r3, pc, #132	; (adr r3, 8001d88 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fade 	bl	80002c8 <__aeabi_dsub>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff68 	bl	8000be8 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d1c:	6013      	str	r3, [r2, #0]
    temp_zad_disp=temp_zad*100; //skalowanie na wyświetlacz
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001da0 <HAL_TIM_IC_CaptureCallback+0xf0>
 8001d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d30:	ee17 2a90 	vmov	r2, s15
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001d36:	601a      	str	r2, [r3, #0]
    prev_impulsy =__HAL_TIM_GET_COUNTER(&htim4);
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001d42:	601a      	str	r2, [r3, #0]
    if(temp_zad>35){
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001da8 <HAL_TIM_IC_CaptureCallback+0xf8>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	dd03      	ble.n	8001d60 <HAL_TIM_IC_CaptureCallback+0xb0>
    			temp_zad=35;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001d5c:	601a      	str	r2, [r3, #0]
    		}
    		else if(temp_zad<25){
    			temp_zad=25;
    		}
      }
}
 8001d5e:	e00d      	b.n	8001d7c <HAL_TIM_IC_CaptureCallback+0xcc>
    		else if(temp_zad<25){
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d400      	bmi.n	8001d76 <HAL_TIM_IC_CaptureCallback+0xc6>
}
 8001d74:	e002      	b.n	8001d7c <HAL_TIM_IC_CaptureCallback+0xcc>
    			temp_zad=25;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f3af 8000 	nop.w
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fa99999 	.word	0x3fa99999
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200002fc 	.word	0x200002fc
 8001d98:	20000298 	.word	0x20000298
 8001d9c:	200002a0 	.word	0x200002a0
 8001da0:	42c80000 	.word	0x42c80000
 8001da4:	2000028c 	.word	0x2000028c
 8001da8:	420c0000 	.word	0x420c0000
 8001dac:	420c0000 	.word	0x420c0000
 8001db0:	41c80000 	.word	0x41c80000
 8001db4:	00000000 	.word	0x00000000

08001db8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	temperature = BMP280_ReadTemperature();
 8001dc0:	f7ff fa36 	bl	8001230 <BMP280_ReadTemperature>
 8001dc4:	eef0 7a40 	vmov.f32	s15, s0
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001dca:	edc3 7a00 	vstr	s15, [r3]
	temp_act_disp=temperature*100;
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001eac <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de0:	ee17 2a90 	vmov	r2, s15
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001de6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4832      	ldr	r0, [pc, #200]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001dec:	f001 f8c3 	bl	8002f76 <HAL_GPIO_TogglePin>
	if(temp_zad != 0){
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	d048      	beq.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0xda>
	pulse = (999.0*calc_pid(&myPID, temp_zad, temperature));
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	eef0 0a47 	vmov.f32	s1, s14
 8001e10:	eeb0 0a67 	vmov.f32	s0, s15
 8001e14:	4829      	ldr	r0, [pc, #164]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e16:	f7ff fe3b 	bl	8001a90 <calc_pid>
 8001e1a:	ee10 3a10 	vmov	r3, s0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fbb2 	bl	8000588 <__aeabi_f2d>
 8001e24:	a31e      	add	r3, pc, #120	; (adr r3, 8001ea0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fc05 	bl	8000638 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fed7 	bl	8000be8 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e3e:	6013      	str	r3, [r2, #0]
	if(pulse > 999.0){
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ec4 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	dd04      	ble.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0xa6>
		pwm_pulse = 999;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e014      	b.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0xd0>
	}
	else if(pulse <0){
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	d503      	bpl.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0xbe>
		pwm_pulse = 0;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e008      	b.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0xd0>
	}
	else {
		pwm_pulse = (int)pulse;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e86:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_pulse);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	408f3800 	.word	0x408f3800
 8001ea8:	2000029c 	.word	0x2000029c
 8001eac:	42c80000 	.word	0x42c80000
 8001eb0:	20000290 	.word	0x20000290
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	200002a0 	.word	0x200002a0
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	200002a4 	.word	0x200002a4
 8001ec4:	4479c000 	.word	0x4479c000
 8001ec8:	200002a8 	.word	0x200002a8
 8001ecc:	200002b0 	.word	0x200002b0

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x44>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_MspInit+0x44>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x44>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x44>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x44>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 fc3c 	bl	80027ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f7e:	f003 fb8d 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000348 	.word	0x20000348

08001f8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM4_IRQHandler+0x10>)
 8001f92:	f003 fb83 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200002fc 	.word	0x200002fc

08001fa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USART3_IRQHandler+0x10>)
 8001fa6:	f004 fa2d 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000394 	.word	0x20000394

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fce:	f006 fc91 	bl	80088f4 <__errno>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2216      	movs	r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe7 	bl	8001fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff6:	e7fe      	b.n	8001ff6 <_exit+0x12>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
  }

  return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
  }
  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
  return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f006 fbf6 	bl	80088f4 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20050000 	.word	0x20050000
 8002134:	00000400 	.word	0x00000400
 8002138:	200002ac 	.word	0x200002ac
 800213c:	20000a78 	.word	0x20000a78

08002140 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002176:	463b      	mov	r3, r7
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_TIM3_Init+0xac>)
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <MX_TIM3_Init+0xb0>)
 800218c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MX_TIM3_Init+0xac>)
 8002190:	2247      	movs	r2, #71	; 0x47
 8002192:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_TIM3_Init+0xac>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <MX_TIM3_Init+0xac>)
 800219c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <MX_TIM3_Init+0xac>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_TIM3_Init+0xac>)
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <MX_TIM3_Init+0xac>)
 80021b0:	f002 ffce 	bl	8005150 <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f7ff fe89 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <MX_TIM3_Init+0xac>)
 80021ce:	f003 ffdb 	bl	8006188 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80021d8:	f7ff fe7a 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2208      	movs	r2, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_TIM3_Init+0xac>)
 80021f4:	f003 fb72 	bl	80058dc <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80021fe:	f7ff fe67 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <MX_TIM3_Init+0xac>)
 8002204:	f000 f914 	bl	8002430 <HAL_TIM_MspPostInit>

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200002b0 	.word	0x200002b0
 8002214:	40000400 	.word	0x40000400

08002218 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f006 fb11 	bl	800884e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <MX_TIM4_Init+0xa4>)
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <MX_TIM4_Init+0xa8>)
 800223a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <MX_TIM4_Init+0xa4>)
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <MX_TIM4_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <MX_TIM4_Init+0xa4>)
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_TIM4_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_TIM4_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800225c:	2303      	movs	r3, #3
 800225e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800226c:	230f      	movs	r3, #15
 800226e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800227c:	230f      	movs	r3, #15
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_TIM4_Init+0xa4>)
 8002288:	f003 f8b4 	bl	80053f4 <HAL_TIM_Encoder_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002292:	f7ff fe1d 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_TIM4_Init+0xa4>)
 80022a4:	f003 ff70 	bl	8006188 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80022ae:	f7ff fe0f 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3730      	adds	r7, #48	; 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200002fc 	.word	0x200002fc
 80022c0:	40000800 	.word	0x40000800

080022c4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_TIM10_Init+0x40>)
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <MX_TIM10_Init+0x44>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <MX_TIM10_Init+0x40>)
 80022d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80022d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_TIM10_Init+0x40>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_TIM10_Init+0x40>)
 80022de:	f241 3287 	movw	r2, #4999	; 0x1387
 80022e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <MX_TIM10_Init+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_TIM10_Init+0x40>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <MX_TIM10_Init+0x40>)
 80022f2:	f002 fe5d 	bl	8004fb0 <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80022fc:	f7ff fde8 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000348 	.word	0x20000348
 8002308:	40014400 	.word	0x40014400

0800230c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_TIM_PWM_MspInit+0x38>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10b      	bne.n	8002336 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_TIM_PWM_MspInit+0x3c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_TIM_PWM_MspInit+0x3c>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_TIM_PWM_MspInit+0x3c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40000400 	.word	0x40000400
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d130      	bne.n	80023d0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_TIM_Encoder_MspInit+0x90>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800239e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b0:	2302      	movs	r3, #2
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x94>)
 80023bc:	f000 fbfe 	bl	8002bbc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	201e      	movs	r0, #30
 80023c6:	f000 fb30 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023ca:	201e      	movs	r0, #30
 80023cc:	f000 fb49 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020c00 	.word	0x40020c00

080023e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_TIM_Base_MspInit+0x44>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d113      	bne.n	800241e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_TIM_Base_MspInit+0x48>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2019      	movs	r0, #25
 8002414:	f000 fb09 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002418:	2019      	movs	r0, #25
 800241a:	f000 fb22 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40014400 	.word	0x40014400
 800242c:	40023800 	.word	0x40023800

08002430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_TIM_MspPostInit+0x64>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11c      	bne.n	800248c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800246a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800247c:	2302      	movs	r3, #2
 800247e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_TIM_MspPostInit+0x6c>)
 8002488:	f000 fb98 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40000400 	.word	0x40000400
 8002498:	40023800 	.word	0x40023800
 800249c:	40020800 	.word	0x40020800

080024a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_USART3_UART_Init+0x5c>)
 80024a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_USART3_UART_Init+0x58>)
 80024e4:	f003 fefc 	bl	80062e0 <HAL_UART_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024ee:	f7ff fcef 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000394 	.word	0x20000394
 80024fc:	40004800 	.word	0x40004800

08002500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0aa      	sub	sp, #168	; 0xa8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	2284      	movs	r2, #132	; 0x84
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f006 f994 	bl	800884e <memset>
  if(uartHandle->Instance==USART3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <HAL_UART_MspInit+0xc4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d144      	bne.n	80025ba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002536:	2300      	movs	r3, #0
 8002538:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4618      	mov	r0, r3
 8002540:	f002 f946 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800254a:	f7ff fcc1 	bl	8001ed0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_UART_MspInit+0xc8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800257e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002598:	2307      	movs	r3, #7
 800259a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025a2:	4619      	mov	r1, r3
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <HAL_UART_MspInit+0xcc>)
 80025a6:	f000 fb09 	bl	8002bbc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2027      	movs	r0, #39	; 0x27
 80025b0:	f000 fa3b 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025b4:	2027      	movs	r0, #39	; 0x27
 80025b6:	f000 fa54 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025ba:	bf00      	nop
 80025bc:	37a8      	adds	r7, #168	; 0xa8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40004800 	.word	0x40004800
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020c00 	.word	0x40020c00

080025d0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80025da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025de:	2206      	movs	r2, #6
 80025e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025e4:	2202      	movs	r2, #2
 80025e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f0:	2202      	movs	r2, #2
 80025f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002608:	2201      	movs	r2, #1
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002614:	f001 fab9 	bl	8003b8a <HAL_PCD_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800261e:	f7ff fc57 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000041c 	.word	0x2000041c

0800262c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0ac      	sub	sp, #176	; 0xb0
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	2284      	movs	r2, #132	; 0x84
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 f8fe 	bl	800884e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800265a:	d159      	bne.n	8002710 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800265c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002660:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4618      	mov	r0, r3
 800266e:	f002 f8af 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002678:	f7ff fc2a 	bl	8001ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_PCD_MspInit+0xec>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_PCD_MspInit+0xec>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_PCD_MspInit+0xec>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002694:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026ae:	230a      	movs	r3, #10
 80026b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026b8:	4619      	mov	r1, r3
 80026ba:	4818      	ldr	r0, [pc, #96]	; (800271c <HAL_PCD_MspInit+0xf0>)
 80026bc:	f000 fa7e 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d8:	4619      	mov	r1, r3
 80026da:	4810      	ldr	r0, [pc, #64]	; (800271c <HAL_PCD_MspInit+0xf0>)
 80026dc:	f000 fa6e 	bl	8002bbc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_PCD_MspInit+0xec>)
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <HAL_PCD_MspInit+0xec>)
 80026e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ea:	6353      	str	r3, [r2, #52]	; 0x34
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_PCD_MspInit+0xec>)
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_PCD_MspInit+0xec>)
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_PCD_MspInit+0xec>)
 80026fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002702:	6453      	str	r3, [r2, #68]	; 0x44
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_PCD_MspInit+0xec>)
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002710:	bf00      	nop
 8002712:	37b0      	adds	r7, #176	; 0xb0
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002726:	490e      	ldr	r1, [pc, #56]	; (8002760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800273c:	4c0b      	ldr	r4, [pc, #44]	; (800276c <LoopFillZerobss+0x26>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274a:	f7ff fcf9 	bl	8002140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f006 f8d7 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002752:	f7ff f8cb 	bl	80018ec <main>
  bx  lr    
 8002756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002758:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002764:	0800aab4 	.word	0x0800aab4
  ldr r2, =_sbss
 8002768:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800276c:	20000a74 	.word	0x20000a74

08002770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC_IRQHandler>

08002772 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	2003      	movs	r0, #3
 8002778:	f000 f94c 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277c:	2000      	movs	r0, #0
 800277e:	f000 f805 	bl	800278c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002782:	f7ff fbab 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_InitTick+0x54>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_InitTick+0x58>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f967 	bl	8002a7e <HAL_SYSTICK_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00e      	b.n	80027d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	d80a      	bhi.n	80027d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c0:	2200      	movs	r2, #0
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f000 f92f 	bl	8002a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027cc:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <HAL_InitTick+0x5c>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	2000001c 	.word	0x2000001c
 80027e4:	20000024 	.word	0x20000024
 80027e8:	20000020 	.word	0x20000020

080027ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x20>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x24>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_IncTick+0x24>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000024 	.word	0x20000024
 8002810:	20000924 	.word	0x20000924

08002814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_GetTick+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000924 	.word	0x20000924

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff ffee 	bl	8002814 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffde 	bl	8002814 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000024 	.word	0x20000024

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x40>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00
 80028b8:	05fa0000 	.word	0x05fa0000

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff29 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff3e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff8e 	bl	8002968 <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5d 	bl	8002914 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff31 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffa2 	bl	80029d0 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff feb6 	bl	8002814 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d008      	beq.n	8002ac8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e052      	b.n	8002b6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0216 	bic.w	r2, r2, #22
 8002ad6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_DMA_Abort+0x62>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0208 	bic.w	r2, r2, #8
 8002b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b18:	e013      	b.n	8002b42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1a:	f7ff fe7b 	bl	8002814 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d90c      	bls.n	8002b42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2203      	movs	r2, #3
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e015      	b.n	8002b6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e4      	bne.n	8002b1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	223f      	movs	r2, #63	; 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d004      	beq.n	8002b94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e00c      	b.n	8002bae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2205      	movs	r2, #5
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e175      	b.n	8002ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8164 	bne.w	8002ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x56>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80be 	beq.w	8002ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d5e:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <HAL_GPIO_Init+0x328>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d037      	beq.n	8002dfa <HAL_GPIO_Init+0x23e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_GPIO_Init+0x330>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_GPIO_Init+0x23a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x236>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a55      	ldr	r2, [pc, #340]	; (8002ef4 <HAL_GPIO_Init+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x232>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x33c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x22e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_GPIO_Init+0x340>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x22a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_GPIO_Init+0x344>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_GPIO_Init+0x348>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a50      	ldr	r2, [pc, #320]	; (8002f08 <HAL_GPIO_Init+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	; (8002f0c <HAL_GPIO_Init+0x350>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	e012      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	e010      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	e00e      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00c      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de2:	2306      	movs	r3, #6
 8002de4:	e00a      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e0c:	4935      	ldr	r1, [pc, #212]	; (8002ee4 <HAL_GPIO_Init+0x328>)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e44:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e92:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	f67f ae86 	bls.w	8002bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40021400 	.word	0x40021400
 8002f00:	40021800 	.word	0x40021800
 8002f04:	40021c00 	.word	0x40021c00
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40022400 	.word	0x40022400
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e001      	b.n	8002f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	041a      	lsls	r2, r3, #16
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	400b      	ands	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fc2a 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e006      	b.n	8003034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d104      	bne.n	8003046 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_I2C_Init+0x11c>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69d9      	ldr	r1, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	02008000 	.word	0x02008000

080030cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80f9 	bne.w	80032e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_I2C_Mem_Write+0x34>
 80030fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ed      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2C_Mem_Write+0x4e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0e6      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003122:	f7ff fb77 	bl	8002814 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2319      	movs	r3, #25
 800312e:	2201      	movs	r2, #1
 8003130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fac3 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d1      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316c:	88f8      	ldrh	r0, [r7, #6]
 800316e:	893a      	ldrh	r2, [r7, #8]
 8003170:	8979      	ldrh	r1, [r7, #10]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4603      	mov	r3, r0
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f9d3 	bl	8003528 <I2C_RequestMemoryWrite>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0a9      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d90e      	bls.n	80031bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	22ff      	movs	r2, #255	; 0xff
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	8979      	ldrh	r1, [r7, #10]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fc1f 	bl	80039f8 <I2C_TransferConfig>
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	8979      	ldrh	r1, [r7, #10]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fc0e 	bl	80039f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 faad 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e07b      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d034      	beq.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d130      	bne.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fa3f 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e04d      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2bff      	cmp	r3, #255	; 0xff
 8003254:	d90e      	bls.n	8003274 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fbc3 	bl	80039f8 <I2C_TransferConfig>
 8003272:	e00f      	b.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fbb2 	bl	80039f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d19e      	bne.n	80031dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa8c 	bl	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01a      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2220      	movs	r2, #32
 80032b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_I2C_Mem_Write+0x224>)
 80032c6:	400b      	ands	r3, r1
 80032c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4603      	mov	r3, r0
 8003304:	817b      	strh	r3, [r7, #10]
 8003306:	460b      	mov	r3, r1
 8003308:	813b      	strh	r3, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 80fd 	bne.w	8003516 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_I2C_Mem_Read+0x34>
 8003322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0f1      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Mem_Read+0x4e>
 800333e:	2302      	movs	r3, #2
 8003340:	e0ea      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800334a:	f7ff fa63 	bl	8002814 <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f9af 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0d5      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2222      	movs	r2, #34	; 0x22
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003394:	88f8      	ldrh	r0, [r7, #6]
 8003396:	893a      	ldrh	r2, [r7, #8]
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f913 	bl	80035d0 <I2C_RequestMemoryRead>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0ad      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d90e      	bls.n	80033e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	22ff      	movs	r2, #255	; 0xff
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	4b52      	ldr	r3, [pc, #328]	; (8003520 <HAL_I2C_Mem_Read+0x22c>)
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fb0b 	bl	80039f8 <I2C_TransferConfig>
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	8979      	ldrh	r1, [r7, #10]
 80033f6:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_I2C_Mem_Read+0x22c>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fafa 	bl	80039f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2200      	movs	r2, #0
 800340c:	2104      	movs	r1, #4
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f956 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07c      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d034      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x1d0>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	d130      	bne.n	80034c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	2200      	movs	r2, #0
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f927 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e04d      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2bff      	cmp	r3, #255	; 0xff
 8003484:	d90e      	bls.n	80034a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	2300      	movs	r3, #0
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 faab 	bl	80039f8 <I2C_TransferConfig>
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa9a 	bl	80039f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d19a      	bne.n	8003404 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f974 	bl	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e01a      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2220      	movs	r2, #32
 80034e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_I2C_Mem_Read+0x230>)
 80034f6:	400b      	ands	r3, r1
 80034f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	80002400 	.word	0x80002400
 8003524:	fe00e800 	.word	0xfe00e800

08003528 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <I2C_RequestMemoryWrite+0xa4>)
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fa51 	bl	80039f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8f0 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e02c      	b.n	80035c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003570:	893b      	ldrh	r3, [r7, #8]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
 800357a:	e015      	b.n	80035a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800357c:	893b      	ldrh	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	69b9      	ldr	r1, [r7, #24]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f8d6 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e012      	b.n	80035c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f884 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	80002000 	.word	0x80002000

080035d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <I2C_RequestMemoryRead+0xa4>)
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f9fe 	bl	80039f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f89d 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02c      	b.n	800366a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003616:	893b      	ldrh	r3, [r7, #8]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
 8003620:	e015      	b.n	800364e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	b29b      	uxth	r3, r3
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f883 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e012      	b.n	800366a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f831 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	80002000 	.word	0x80002000

08003678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d103      	bne.n	8003696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d007      	beq.n	80036b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	619a      	str	r2, [r3, #24]
  }
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	e022      	b.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d01e      	beq.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7ff f89b 	bl	8002814 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e00f      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	429a      	cmp	r2, r3
 8003734:	d0cd      	beq.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800374c:	e02c      	b.n	80037a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f870 	bl	8003838 <I2C_IsErrorOccurred>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02a      	b.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d01e      	beq.n	80037a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7ff f853 	bl	8002814 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d113      	bne.n	80037a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d1cb      	bne.n	800374e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037cc:	e028      	b.n	8003820 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f830 	bl	8003838 <I2C_IsErrorOccurred>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e026      	b.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7ff f817 	bl	8002814 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d113      	bne.n	8003820 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e007      	b.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	d1cf      	bne.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d068      	beq.n	8003936 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2210      	movs	r2, #16
 800386a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800386c:	e049      	b.n	8003902 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d045      	beq.n	8003902 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fe ffcd 	bl	8002814 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_IsErrorOccurred+0x54>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d13a      	bne.n	8003902 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003896:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800389e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d121      	bne.n	80038f4 <I2C_IsErrorOccurred+0xbc>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b6:	d01d      	beq.n	80038f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d01a      	beq.n	80038f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038ce:	f7fe ffa1 	bl	8002814 <HAL_GetTick>
 80038d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d4:	e00e      	b.n	80038f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038d6:	f7fe ff9d 	bl	8002814 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b19      	cmp	r3, #25
 80038e2:	d907      	bls.n	80038f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f043 0320 	orr.w	r3, r3, #32
 80038ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80038f2:	e006      	b.n	8003902 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d1e9      	bne.n	80038d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b20      	cmp	r3, #32
 800390e:	d003      	beq.n	8003918 <I2C_IsErrorOccurred+0xe0>
 8003910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0aa      	beq.n	800386e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800397a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00b      	beq.n	80039a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01c      	beq.n	80039e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fe63 	bl	8003678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <I2C_IsErrorOccurred+0x1bc>)
 80039be:	400b      	ands	r3, r1
 80039c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3728      	adds	r7, #40	; 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	fe00e800 	.word	0xfe00e800

080039f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	4613      	mov	r3, r2
 8003a08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a10:	7a7b      	ldrb	r3, [r7, #9]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	0d5b      	lsrs	r3, r3, #21
 8003a32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <I2C_TransferConfig+0x60>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	ea02 0103 	and.w	r1, r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	03ff63ff 	.word	0x03ff63ff

08003a5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d138      	bne.n	8003ae4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e032      	b.n	8003ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d139      	bne.n	8003b7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e033      	b.n	8003b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2224      	movs	r2, #36	; 0x24
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8c:	b08f      	sub	sp, #60	; 0x3c
 8003b8e:	af0a      	add	r7, sp, #40	; 0x28
 8003b90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e116      	b.n	8003dca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fe fd38 	bl	800262c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f003 fe30 	bl	8007840 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	687e      	ldr	r6, [r7, #4]
 8003be8:	466d      	mov	r5, sp
 8003bea:	f106 0410 	add.w	r4, r6, #16
 8003bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bfe:	1d33      	adds	r3, r6, #4
 8003c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f003 fdc4 	bl	8007790 <USB_CoreInit>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0d7      	b.n	8003dca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 fe1e 	bl	8007862 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
 8003c2a:	e04a      	b.n	8003cc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	333d      	adds	r3, #61	; 0x3d
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	333c      	adds	r3, #60	; 0x3c
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	b298      	uxth	r0, r3
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3344      	adds	r3, #68	; 0x44
 8003c68:	4602      	mov	r2, r0
 8003c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3340      	adds	r3, #64	; 0x40
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3348      	adds	r3, #72	; 0x48
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334c      	adds	r3, #76	; 0x4c
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3354      	adds	r3, #84	; 0x54
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3af      	bcc.n	8003c2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e044      	b.n	8003d5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3b5      	bcc.n	8003cd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	687e      	ldr	r6, [r7, #4]
 8003d6e:	466d      	mov	r5, sp
 8003d70:	f106 0410 	add.w	r4, r6, #16
 8003d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d84:	1d33      	adds	r3, r6, #4
 8003d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	f003 fdb7 	bl	80078fc <USB_DevInit>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e014      	b.n	8003dca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f80b 	bl	8003dd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f003 ff75 	bl	8007cb2 <USB_DevDisconnect>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003dd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	10000003 	.word	0x10000003

08003e1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40007000 	.word	0x40007000

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e291      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8087 	beq.w	8003f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e60:	4b96      	ldr	r3, [pc, #600]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d00c      	beq.n	8003e86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6c:	4b93      	ldr	r3, [pc, #588]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d112      	bne.n	8003e9e <HAL_RCC_OscConfig+0x62>
 8003e78:	4b90      	ldr	r3, [pc, #576]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e86:	4b8d      	ldr	r3, [pc, #564]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d06c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x130>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d168      	bne.n	8003f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e26b      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x7a>
 8003ea8:	4b84      	ldr	r3, [pc, #528]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a83      	ldr	r2, [pc, #524]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e02e      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x9c>
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7e      	ldr	r2, [pc, #504]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b7c      	ldr	r3, [pc, #496]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7b      	ldr	r2, [pc, #492]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0xc0>
 8003ee2:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a75      	ldr	r2, [pc, #468]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a72      	ldr	r2, [pc, #456]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a6e      	ldr	r2, [pc, #440]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fc7a 	bl	8002814 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe fc76 	bl	8002814 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e21f      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xe8>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe fc66 	bl	8002814 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fc62 	bl	8002814 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e20b      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	4b57      	ldr	r3, [pc, #348]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x110>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d069      	beq.n	800404e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b4d      	ldr	r3, [pc, #308]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d11c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x190>
 8003f92:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x17a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1df      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	493d      	ldr	r1, [pc, #244]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	e040      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b39      	ldr	r3, [pc, #228]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a38      	ldr	r2, [pc, #224]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fc18 	bl	8002814 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fe fc14 	bl	8002814 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1bd      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffa:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4929      	ldr	r1, [pc, #164]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
 800401a:	e018      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a26      	ldr	r2, [pc, #152]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fbf4 	bl	8002814 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe fbf0 	bl	8002814 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e199      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d038      	beq.n	80040cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d019      	beq.n	8004096 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fe fbd1 	bl	8002814 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004076:	f7fe fbcd 	bl	8002814 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e176      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x23a>
 8004094:	e01a      	b.n	80040cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x280>)
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fe fbb7 	bl	8002814 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040aa:	f7fe fbb3 	bl	8002814 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d903      	bls.n	80040c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e15c      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
 80040bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	4b91      	ldr	r3, [pc, #580]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a4 	beq.w	8004222 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a87      	ldr	r2, [pc, #540]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
 80040f2:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004102:	4b82      	ldr	r3, [pc, #520]	; (800430c <HAL_RCC_OscConfig+0x4d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d118      	bne.n	8004140 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800410e:	4b7f      	ldr	r3, [pc, #508]	; (800430c <HAL_RCC_OscConfig+0x4d0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7e      	ldr	r2, [pc, #504]	; (800430c <HAL_RCC_OscConfig+0x4d0>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411a:	f7fe fb7b 	bl	8002814 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004122:	f7fe fb77 	bl	8002814 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b64      	cmp	r3, #100	; 0x64
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e120      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004134:	4b75      	ldr	r3, [pc, #468]	; (800430c <HAL_RCC_OscConfig+0x4d0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x31a>
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a6e      	ldr	r2, [pc, #440]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e02d      	b.n	80041b2 <HAL_RCC_OscConfig+0x376>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x33c>
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a69      	ldr	r2, [pc, #420]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a66      	ldr	r2, [pc, #408]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	6713      	str	r3, [r2, #112]	; 0x70
 8004176:	e01c      	b.n	80041b2 <HAL_RCC_OscConfig+0x376>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d10c      	bne.n	800419a <HAL_RCC_OscConfig+0x35e>
 8004180:	4b61      	ldr	r3, [pc, #388]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a60      	ldr	r2, [pc, #384]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b5e      	ldr	r3, [pc, #376]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a5d      	ldr	r2, [pc, #372]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e00b      	b.n	80041b2 <HAL_RCC_OscConfig+0x376>
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a5a      	ldr	r2, [pc, #360]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d015      	beq.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe fb2b 	bl	8002814 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe fb27 	bl	8002814 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0ce      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCC_OscConfig+0x386>
 80041e4:	e014      	b.n	8004210 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fe fb15 	bl	8002814 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fe fb11 	bl	8002814 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0b8      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004204:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ee      	bne.n	80041ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004216:	4b3c      	ldr	r3, [pc, #240]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800421c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80a4 	beq.w	8004374 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d06b      	beq.n	8004310 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d149      	bne.n	80042d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a30      	ldr	r2, [pc, #192]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe fae2 	bl	8002814 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fe fade 	bl	8002814 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e087      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	3b01      	subs	r3, #1
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4313      	orrs	r3, r2
 8004298:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800429e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe fab2 	bl	8002814 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fe faae 	bl	8002814 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e057      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x478>
 80042d2:	e04f      	b.n	8004374 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fe fa98 	bl	8002814 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fe fa94 	bl	8002814 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e03d      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4ac>
 8004306:	e035      	b.n	8004374 <HAL_RCC_OscConfig+0x538>
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x544>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d028      	beq.n	8004370 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d121      	bne.n	8004370 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11a      	bne.n	8004370 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004346:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	3b01      	subs	r3, #1
 800435a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0d0      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d910      	bls.n	80043cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b67      	ldr	r3, [pc, #412]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	4965      	ldr	r1, [pc, #404]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a58      	ldr	r2, [pc, #352]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004406:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d040      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d115      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b41      	ldr	r3, [pc, #260]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e073      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e06b      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4936      	ldr	r1, [pc, #216]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004478:	f7fe f9cc 	bl	8002814 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fe f9c8 	bl	8002814 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e053      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d210      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4922      	ldr	r1, [pc, #136]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f821 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x1cc>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCC_ClockConfig+0x1d0>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1d4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f928 	bl	800278c <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023c00 	.word	0x40023c00
 800454c:	40023800 	.word	0x40023800
 8004550:	0800a71c 	.word	0x0800a71c
 8004554:	2000001c 	.word	0x2000001c
 8004558:	20000020 	.word	0x20000020

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b094      	sub	sp, #80	; 0x50
 8004562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
 8004568:	2300      	movs	r3, #0
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456c:	2300      	movs	r3, #0
 800456e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004574:	4b79      	ldr	r3, [pc, #484]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d00d      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x40>
 8004580:	2b08      	cmp	r3, #8
 8004582:	f200 80e1 	bhi.w	8004748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x3a>
 800458e:	e0db      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_GetSysClockFreq+0x204>)
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004594:	e0db      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCC_GetSysClockFreq+0x208>)
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459a:	e0d8      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459c:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045a6:	4b6d      	ldr	r3, [pc, #436]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	2200      	movs	r2, #0
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80045bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	0159      	lsls	r1, r3, #5
 80045dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e0:	0150      	lsls	r0, r2, #5
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4621      	mov	r1, r4
 80045e8:	1a51      	subs	r1, r2, r1
 80045ea:	6139      	str	r1, [r7, #16]
 80045ec:	4629      	mov	r1, r5
 80045ee:	eb63 0301 	sbc.w	r3, r3, r1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004600:	4659      	mov	r1, fp
 8004602:	018b      	lsls	r3, r1, #6
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800460a:	4651      	mov	r1, sl
 800460c:	018a      	lsls	r2, r1, #6
 800460e:	4651      	mov	r1, sl
 8004610:	ebb2 0801 	subs.w	r8, r2, r1
 8004614:	4659      	mov	r1, fp
 8004616:	eb63 0901 	sbc.w	r9, r3, r1
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462e:	4690      	mov	r8, r2
 8004630:	4699      	mov	r9, r3
 8004632:	4623      	mov	r3, r4
 8004634:	eb18 0303 	adds.w	r3, r8, r3
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	462b      	mov	r3, r5
 800463c:	eb49 0303 	adc.w	r3, r9, r3
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800464e:	4629      	mov	r1, r5
 8004650:	024b      	lsls	r3, r1, #9
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004658:	4621      	mov	r1, r4
 800465a:	024a      	lsls	r2, r1, #9
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004662:	2200      	movs	r2, #0
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
 8004666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466c:	f7fc fb0c 	bl	8000c88 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004678:	e058      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	2200      	movs	r2, #0
 8004682:	4618      	mov	r0, r3
 8004684:	4611      	mov	r1, r2
 8004686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
 8004690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	f04f 0000 	mov.w	r0, #0
 800469c:	f04f 0100 	mov.w	r1, #0
 80046a0:	0159      	lsls	r1, r3, #5
 80046a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a6:	0150      	lsls	r0, r2, #5
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4641      	mov	r1, r8
 80046ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80046b2:	4649      	mov	r1, r9
 80046b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046cc:	ebb2 040a 	subs.w	r4, r2, sl
 80046d0:	eb63 050b 	sbc.w	r5, r3, fp
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	00eb      	lsls	r3, r5, #3
 80046de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e2:	00e2      	lsls	r2, r4, #3
 80046e4:	4614      	mov	r4, r2
 80046e6:	461d      	mov	r5, r3
 80046e8:	4643      	mov	r3, r8
 80046ea:	18e3      	adds	r3, r4, r3
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	464b      	mov	r3, r9
 80046f0:	eb45 0303 	adc.w	r3, r5, r3
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004702:	4629      	mov	r1, r5
 8004704:	028b      	lsls	r3, r1, #10
 8004706:	4621      	mov	r1, r4
 8004708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800470c:	4621      	mov	r1, r4
 800470e:	028a      	lsls	r2, r1, #10
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004716:	2200      	movs	r2, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	61fa      	str	r2, [r7, #28]
 800471c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004720:	f7fc fab2 	bl	8000c88 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	3301      	adds	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800473c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004746:	e002      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetSysClockFreq+0x204>)
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800474c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800474e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004750:	4618      	mov	r0, r3
 8004752:	3750      	adds	r7, #80	; 0x50
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200

08004768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000001c 	.word	0x2000001c

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4903      	ldr	r1, [pc, #12]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40023800 	.word	0x40023800
 80047a4:	0800a72c 	.word	0x0800a72c

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ac:	f7ff ffdc 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0b5b      	lsrs	r3, r3, #13
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800a72c 	.word	0x0800a72c

080047d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d012      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a68      	ldr	r2, [pc, #416]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	4964      	ldr	r1, [pc, #400]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800482a:	4b5d      	ldr	r3, [pc, #372]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	4959      	ldr	r1, [pc, #356]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d017      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004866:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	494a      	ldr	r1, [pc, #296]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 808b 	beq.w	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b4:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4a39      	ldr	r2, [pc, #228]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	6413      	str	r3, [r2, #64]	; 0x40
 80048c0:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd ff9c 	bl	8002814 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e0:	f7fd ff98 	bl	8002814 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e357      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048f2:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048fe:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d035      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d02e      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800491c:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004924:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004926:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004944:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d114      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd ff60 	bl	8002814 <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd ff5c 	bl	8002814 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e319      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004986:	d111      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004996:	400b      	ands	r3, r1
 8004998:	4901      	ldr	r1, [pc, #4]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
 800499e:	e00b      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40007000 	.word	0x40007000
 80049a8:	0ffffcff 	.word	0x0ffffcff
 80049ac:	4baa      	ldr	r3, [pc, #680]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4aa9      	ldr	r2, [pc, #676]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049b6:	6093      	str	r3, [r2, #8]
 80049b8:	4ba7      	ldr	r3, [pc, #668]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	49a4      	ldr	r1, [pc, #656]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d010      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049d6:	4ba0      	ldr	r3, [pc, #640]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049dc:	4a9e      	ldr	r2, [pc, #632]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049e6:	4b9c      	ldr	r3, [pc, #624]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4999      	ldr	r1, [pc, #612]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a04:	4b94      	ldr	r3, [pc, #592]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a12:	4991      	ldr	r1, [pc, #580]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a26:	4b8c      	ldr	r3, [pc, #560]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a34:	4988      	ldr	r1, [pc, #544]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a48:	4b83      	ldr	r3, [pc, #524]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a56:	4980      	ldr	r1, [pc, #512]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a6a:	4b7b      	ldr	r3, [pc, #492]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	4977      	ldr	r1, [pc, #476]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a8c:	4b72      	ldr	r3, [pc, #456]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	496f      	ldr	r1, [pc, #444]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aae:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f023 020c 	bic.w	r2, r3, #12
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abc:	4966      	ldr	r1, [pc, #408]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	495e      	ldr	r1, [pc, #376]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af2:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	4955      	ldr	r1, [pc, #340]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	494d      	ldr	r1, [pc, #308]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b36:	4b48      	ldr	r3, [pc, #288]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	4944      	ldr	r1, [pc, #272]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b58:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	493c      	ldr	r1, [pc, #240]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b7a:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	4933      	ldr	r1, [pc, #204]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004baa:	492b      	ldr	r1, [pc, #172]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d011      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bbe:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bcc:	4922      	ldr	r1, [pc, #136]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0c:	4912      	ldr	r1, [pc, #72]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c30:	4909      	ldr	r1, [pc, #36]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d006      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80d9 	beq.w	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a01      	ldr	r2, [pc, #4]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c56:	e001      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fdd9 	bl	8002814 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fd fdd5 	bl	8002814 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e194      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	4b6c      	ldr	r3, [pc, #432]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d021      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11d      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c98:	4b64      	ldr	r3, [pc, #400]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca6:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	019a      	lsls	r2, r3, #6
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	4957      	ldr	r1, [pc, #348]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02e      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfe:	d129      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d00:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	0f1b      	lsrs	r3, r3, #28
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	019a      	lsls	r2, r3, #6
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	061b      	lsls	r3, r3, #24
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	071b      	lsls	r3, r3, #28
 8004d34:	493d      	ldr	r1, [pc, #244]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d42:	f023 021f 	bic.w	r2, r3, #31
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	4937      	ldr	r1, [pc, #220]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01d      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d60:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	0e1b      	lsrs	r3, r3, #24
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d6e:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d74:	0f1b      	lsrs	r3, r3, #28
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	019a      	lsls	r2, r3, #6
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	061b      	lsls	r3, r3, #24
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	071b      	lsls	r3, r3, #28
 8004d94:	4925      	ldr	r1, [pc, #148]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d011      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	019a      	lsls	r2, r3, #6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	071b      	lsls	r3, r3, #28
 8004dc4:	4919      	ldr	r1, [pc, #100]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dcc:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fd fd1c 	bl	8002814 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004de0:	f7fd fd18 	bl	8002814 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e0d7      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 80cd 	bne.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e12:	f7fd fcff 	bl	8002814 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e1a:	f7fd fcfb 	bl	8002814 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d903      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0ba      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e30:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d0ed      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02e      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d12a      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e66:	4b51      	ldr	r3, [pc, #324]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e74:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	0f1b      	lsrs	r3, r3, #28
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	019a      	lsls	r2, r3, #6
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	4944      	ldr	r1, [pc, #272]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	493d      	ldr	r1, [pc, #244]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed0:	d11d      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ee0:	4b32      	ldr	r3, [pc, #200]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	019a      	lsls	r2, r3, #6
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	4929      	ldr	r1, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d028      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	0e1b      	lsrs	r3, r3, #24
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	0c1b      	lsrs	r3, r3, #16
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4917      	ldr	r1, [pc, #92]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4911      	ldr	r1, [pc, #68]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fd fc4c 	bl	8002814 <HAL_GetTick>
 8004f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f80:	f7fd fc48 	bl	8002814 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e007      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d1ef      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800

08004fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e049      	b.n	8005056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fd fa04 	bl	80023e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 fda6 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e054      	b.n	8005122 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <HAL_TIM_Base_Start_IT+0xd0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d01d      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a22      	ldr	r2, [pc, #136]	; (8005134 <HAL_TIM_Base_Start_IT+0xd4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_Base_Start_IT+0xdc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_Base_Start_IT+0xe0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_TIM_Base_Start_IT+0xe4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIM_Base_Start_IT+0xe8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d115      	bne.n	800510c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <HAL_TIM_Base_Start_IT+0xec>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d015      	beq.n	800511e <HAL_TIM_Base_Start_IT+0xbe>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f8:	d011      	beq.n	800511e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	e008      	b.n	800511e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e000      	b.n	8005120 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800
 800514c:	00010007 	.word	0x00010007

08005150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e049      	b.n	80051f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fd f8c8 	bl	800230c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fcd6 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start+0x24>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e03c      	b.n	800529e <HAL_TIM_PWM_Start+0x9e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b04      	cmp	r3, #4
 8005228:	d109      	bne.n	800523e <HAL_TIM_PWM_Start+0x3e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e02f      	b.n	800529e <HAL_TIM_PWM_Start+0x9e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x58>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e022      	b.n	800529e <HAL_TIM_PWM_Start+0x9e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d109      	bne.n	8005272 <HAL_TIM_PWM_Start+0x72>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e015      	b.n	800529e <HAL_TIM_PWM_Start+0x9e>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b10      	cmp	r3, #16
 8005276:	d109      	bne.n	800528c <HAL_TIM_PWM_Start+0x8c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e008      	b.n	800529e <HAL_TIM_PWM_Start+0x9e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e092      	b.n	80053cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xb6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b4:	e023      	b.n	80052fe <HAL_TIM_PWM_Start+0xfe>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xc6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c4:	e01b      	b.n	80052fe <HAL_TIM_PWM_Start+0xfe>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_PWM_Start+0xd6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d4:	e013      	b.n	80052fe <HAL_TIM_PWM_Start+0xfe>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d104      	bne.n	80052e6 <HAL_TIM_PWM_Start+0xe6>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e4:	e00b      	b.n	80052fe <HAL_TIM_PWM_Start+0xfe>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_PWM_Start+0xf6>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	e003      	b.n	80052fe <HAL_TIM_PWM_Start+0xfe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 ff18 	bl	800613c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a30      	ldr	r2, [pc, #192]	; (80053d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_PWM_Start+0x120>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <HAL_TIM_PWM_Start+0x1d8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <HAL_TIM_PWM_Start+0x124>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_TIM_PWM_Start+0x126>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d01d      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_TIM_PWM_Start+0x1dc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <HAL_TIM_PWM_Start+0x1e0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_TIM_PWM_Start+0x1e4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <HAL_TIM_PWM_Start+0x1d8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_TIM_PWM_Start+0x1e8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIM_PWM_Start+0x18a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_TIM_PWM_Start+0x1ec>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d115      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_TIM_PWM_Start+0x1f0>)
 8005392:	4013      	ands	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d015      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x1c8>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d011      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	e008      	b.n	80053c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e000      	b.n	80053ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40001800 	.word	0x40001800
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e08f      	b.n	8005528 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fc ff95 	bl	800234c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <HAL_TIM_Encoder_Init+0x13c>)
 8005436:	400b      	ands	r3, r1
 8005438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 fb7b 	bl	8005b40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_TIM_Encoder_Init+0x140>)
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	4313      	orrs	r3, r2
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <HAL_TIM_Encoder_Init+0x144>)
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4b2a      	ldr	r3, [pc, #168]	; (800553c <HAL_TIM_Encoder_Init+0x148>)
 8005492:	4013      	ands	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	4313      	orrs	r3, r2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	011a      	lsls	r2, r3, #4
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	031b      	lsls	r3, r3, #12
 80054b4:	4313      	orrs	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	4313      	orrs	r3, r2
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	fffebff8 	.word	0xfffebff8
 8005534:	fffffcfc 	.word	0xfffffcfc
 8005538:	fffff3f3 	.word	0xfffff3f3
 800553c:	ffff0f0f 	.word	0xffff0f0f

08005540 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005550:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005558:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005560:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d110      	bne.n	8005592 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d102      	bne.n	800557c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005576:	7b7b      	ldrb	r3, [r7, #13]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d001      	beq.n	8005580 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e089      	b.n	8005694 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005590:	e031      	b.n	80055f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d110      	bne.n	80055ba <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d102      	bne.n	80055a4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800559e:	7b3b      	ldrb	r3, [r7, #12]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e075      	b.n	8005694 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b8:	e01d      	b.n	80055f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d108      	bne.n	80055d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d105      	bne.n	80055d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	7b7b      	ldrb	r3, [r7, #13]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055cc:	7b3b      	ldrb	r3, [r7, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e05e      	b.n	8005694 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_TIM_Encoder_Start_IT+0xc4>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d010      	beq.n	8005624 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005602:	e01f      	b.n	8005644 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2201      	movs	r2, #1
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fd95 	bl	800613c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0202 	orr.w	r2, r2, #2
 8005620:	60da      	str	r2, [r3, #12]
      break;
 8005622:	e02e      	b.n	8005682 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2201      	movs	r2, #1
 800562a:	2104      	movs	r1, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fd85 	bl	800613c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0204 	orr.w	r2, r2, #4
 8005640:	60da      	str	r2, [r3, #12]
      break;
 8005642:	e01e      	b.n	8005682 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2201      	movs	r2, #1
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fd75 	bl	800613c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	2104      	movs	r1, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fd6e 	bl	800613c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0202 	orr.w	r2, r2, #2
 800566e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0204 	orr.w	r2, r2, #4
 800567e:	60da      	str	r2, [r3, #12]
      break;
 8005680:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0202 	mvn.w	r2, #2
 80056c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fae6 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa0c 	bl	8005b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa13 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0204 	mvn.w	r2, #4
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fabc 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9e2 	bl	8005b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9e9 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b08      	cmp	r3, #8
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc fa92 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f9b8 	bl	8005b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9bf 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2208      	movs	r2, #8
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fa68 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f98e 	bl	8005b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f995 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0201 	mvn.w	r2, #1
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc facc 	bl	8001db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b80      	cmp	r3, #128	; 0x80
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fd36 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fd29 	bl	80062cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d10e      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f943 	bl	8005b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d10e      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d107      	bne.n	80058d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0220 	mvn.w	r2, #32
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fce9 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e0ff      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b14      	cmp	r3, #20
 8005906:	f200 80f0 	bhi.w	8005aea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005965 	.word	0x08005965
 8005914:	08005aeb 	.word	0x08005aeb
 8005918:	08005aeb 	.word	0x08005aeb
 800591c:	08005aeb 	.word	0x08005aeb
 8005920:	080059a5 	.word	0x080059a5
 8005924:	08005aeb 	.word	0x08005aeb
 8005928:	08005aeb 	.word	0x08005aeb
 800592c:	08005aeb 	.word	0x08005aeb
 8005930:	080059e7 	.word	0x080059e7
 8005934:	08005aeb 	.word	0x08005aeb
 8005938:	08005aeb 	.word	0x08005aeb
 800593c:	08005aeb 	.word	0x08005aeb
 8005940:	08005a27 	.word	0x08005a27
 8005944:	08005aeb 	.word	0x08005aeb
 8005948:	08005aeb 	.word	0x08005aeb
 800594c:	08005aeb 	.word	0x08005aeb
 8005950:	08005a69 	.word	0x08005a69
 8005954:	08005aeb 	.word	0x08005aeb
 8005958:	08005aeb 	.word	0x08005aeb
 800595c:	08005aeb 	.word	0x08005aeb
 8005960:	08005aa9 	.word	0x08005aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f988 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0204 	bic.w	r2, r2, #4
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	619a      	str	r2, [r3, #24]
      break;
 80059a2:	e0a5      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f9da 	bl	8005d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
      break;
 80059e4:	e084      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fa31 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0208 	orr.w	r2, r2, #8
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0204 	bic.w	r2, r2, #4
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]
      break;
 8005a24:	e064      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fa87 	bl	8005f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	61da      	str	r2, [r3, #28]
      break;
 8005a66:	e043      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fabe 	bl	8005ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0208 	orr.w	r2, r2, #8
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0204 	bic.w	r2, r2, #4
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aa6:	e023      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 faf0 	bl	8006094 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	021a      	lsls	r2, r3, #8
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ae8:	e002      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3d      	ldr	r2, [pc, #244]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3c      	ldr	r2, [pc, #240]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d02b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d027      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d023      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01f      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d017      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <TIM_Base_SetConfig+0x128>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <TIM_Base_SetConfig+0x12c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00f      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <TIM_Base_SetConfig+0x130>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <TIM_Base_SetConfig+0x134>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d007      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a24      	ldr	r2, [pc, #144]	; (8005c78 <TIM_Base_SetConfig+0x138>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <TIM_Base_SetConfig+0x13c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d103      	bne.n	8005c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	615a      	str	r2, [r3, #20]
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40010400 	.word	0x40010400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800
 8005c74:	40001800 	.word	0x40001800
 8005c78:	40001c00 	.word	0x40001c00
 8005c7c:	40002000 	.word	0x40002000

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <TIM_OC1_SetConfig+0xd8>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC1_SetConfig+0x64>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <TIM_OC1_SetConfig+0xe0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10c      	bne.n	8005cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0308 	bic.w	r3, r3, #8
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC1_SetConfig+0x8e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <TIM_OC1_SetConfig+0xe0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	621a      	str	r2, [r3, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	fffeff8f 	.word	0xfffeff8f
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400

08005d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <TIM_OC2_SetConfig+0xe4>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0320 	bic.w	r3, r3, #32
 8005dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <TIM_OC2_SetConfig+0xe8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC2_SetConfig+0x68>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a22      	ldr	r2, [pc, #136]	; (8005e50 <TIM_OC2_SetConfig+0xec>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10d      	bne.n	8005de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <TIM_OC2_SetConfig+0xe8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC2_SetConfig+0x94>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <TIM_OC2_SetConfig+0xec>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d113      	bne.n	8005e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <TIM_OC3_SetConfig+0xe0>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a22      	ldr	r2, [pc, #136]	; (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC3_SetConfig+0x66>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <TIM_OC3_SetConfig+0xe8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10d      	bne.n	8005ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0x92>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <TIM_OC3_SetConfig+0xe8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d113      	bne.n	8005f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	fffeff8f 	.word	0xfffeff8f
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <TIM_OC4_SetConfig+0xa4>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC4_SetConfig+0xa8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x68>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a12      	ldr	r2, [pc, #72]	; (8005fec <TIM_OC4_SetConfig+0xac>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d109      	bne.n	8005fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	019b      	lsls	r3, r3, #6
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	feff8fff 	.word	0xfeff8fff
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400

08005ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <TIM_OC5_SetConfig+0x98>)
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a12      	ldr	r2, [pc, #72]	; (800608c <TIM_OC5_SetConfig+0x9c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC5_SetConfig+0x5e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a11      	ldr	r2, [pc, #68]	; (8006090 <TIM_OC5_SetConfig+0xa0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d109      	bne.n	8006062 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	fffeff8f 	.word	0xfffeff8f
 800608c:	40010000 	.word	0x40010000
 8006090:	40010400 	.word	0x40010400

08006094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <TIM_OC6_SetConfig+0x9c>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	051b      	lsls	r3, r3, #20
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <TIM_OC6_SetConfig+0xa0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC6_SetConfig+0x60>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a12      	ldr	r2, [pc, #72]	; (8006138 <TIM_OC6_SetConfig+0xa4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d109      	bne.n	8006108 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	029b      	lsls	r3, r3, #10
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	feff8fff 	.word	0xfeff8fff
 8006134:	40010000 	.word	0x40010000
 8006138:	40010400 	.word	0x40010400

0800613c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2201      	movs	r2, #1
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	43db      	mvns	r3, r3
 800615e:	401a      	ands	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	431a      	orrs	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800619c:	2302      	movs	r3, #2
 800619e:	e06d      	b.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a30      	ldr	r2, [pc, #192]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2f      	ldr	r2, [pc, #188]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a20      	ldr	r2, [pc, #128]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d022      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d01d      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a15      	ldr	r2, [pc, #84]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a16      	ldr	r2, [pc, #88]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10c      	bne.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40014000 	.word	0x40014000
 80062a0:	40001800 	.word	0x40001800

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e040      	b.n	8006374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc f8fc 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fb62 	bl	80069e8 <UART_SetConfig>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e022      	b.n	8006374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fdba 	bl	8006eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fe41 	bl	8006ff4 <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006390:	2b20      	cmp	r3, #32
 8006392:	d132      	bne.n	80063fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_UART_Receive_IT+0x24>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e02b      	b.n	80063fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d018      	beq.n	80063ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	613b      	str	r3, [r7, #16]
   return(result);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	69f9      	ldr	r1, [r7, #28]
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e6      	bne.n	80063b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	461a      	mov	r2, r3
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fefd 	bl	80071f0 <UART_Start_Receive_IT>
 80063f6:	4603      	mov	r3, r0
 80063f8:	e000      	b.n	80063fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80063fa:	2302      	movs	r3, #2
  }
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3728      	adds	r7, #40	; 0x28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b0ba      	sub	sp, #232	; 0xe8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800642a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800642e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006432:	4013      	ands	r3, r2
 8006434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800643c:	2b00      	cmp	r3, #0
 800643e:	d115      	bne.n	800646c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00f      	beq.n	800646c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d009      	beq.n	800646c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8297 	beq.w	8006990 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
      }
      return;
 800646a:	e291      	b.n	8006990 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800646c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8117 	beq.w	80066a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006482:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006486:	4b85      	ldr	r3, [pc, #532]	; (800669c <HAL_UART_IRQHandler+0x298>)
 8006488:	4013      	ands	r3, r2
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 810a 	beq.w	80066a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <HAL_UART_IRQHandler+0xbc>
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2201      	movs	r2, #1
 80064ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b6:	f043 0201 	orr.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <HAL_UART_IRQHandler+0xec>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2202      	movs	r2, #2
 80064de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e6:	f043 0204 	orr.w	r2, r3, #4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d011      	beq.n	8006520 <HAL_UART_IRQHandler+0x11c>
 80064fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2204      	movs	r2, #4
 800650e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006516:	f043 0202 	orr.w	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d017      	beq.n	800655c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2208      	movs	r2, #8
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	f043 0208 	orr.w	r2, r3, #8
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006564:	2b00      	cmp	r3, #0
 8006566:	d012      	beq.n	800658e <HAL_UART_IRQHandler+0x18a>
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800657c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006584:	f043 0220 	orr.w	r2, r3, #32
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 81fd 	beq.w	8006994 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d005      	beq.n	80065e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d04f      	beq.n	8006686 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fec8 	bl	800737c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d141      	bne.n	800667e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800662a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800663e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1d9      	bne.n	80065fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	2b00      	cmp	r3, #0
 800664c:	d013      	beq.n	8006676 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <HAL_UART_IRQHandler+0x29c>)
 8006654:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	4618      	mov	r0, r3
 800665c:	f7fc fa8b 	bl	8002b76 <HAL_DMA_Abort_IT>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d017      	beq.n	8006696 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e00f      	b.n	8006696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9a0 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00b      	b.n	8006696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f99c 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e007      	b.n	8006696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f998 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006694:	e17e      	b.n	8006994 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006696:	bf00      	nop
    return;
 8006698:	e17c      	b.n	8006994 <HAL_UART_IRQHandler+0x590>
 800669a:	bf00      	nop
 800669c:	04000120 	.word	0x04000120
 80066a0:	08007445 	.word	0x08007445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	f040 814c 	bne.w	8006946 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8145 	beq.w	8006946 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 813e 	beq.w	8006946 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2210      	movs	r2, #16
 80066d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	f040 80b6 	bne.w	800684e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8150 	beq.w	8006998 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006702:	429a      	cmp	r2, r3
 8006704:	f080 8148 	bcs.w	8006998 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800670e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671c:	f000 8086 	beq.w	800682c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800674a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800674e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006756:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1da      	bne.n	8006720 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800677a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800678e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006792:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e1      	bne.n	800676a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e3      	bne.n	80067a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	f023 0310 	bic.w	r3, r3, #16
 8006800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006810:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800681c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e4      	bne.n	80067ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006826:	4618      	mov	r0, r3
 8006828:	f7fc f935 	bl	8002a96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800683e:	b29b      	uxth	r3, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b29b      	uxth	r3, r3
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8c2 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800684c:	e0a4      	b.n	8006998 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800685a:	b29b      	uxth	r3, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8096 	beq.w	800699c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8091 	beq.w	800699c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800688e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800689c:	647b      	str	r3, [r7, #68]	; 0x44
 800689e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e4      	bne.n	800687a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	623b      	str	r3, [r7, #32]
   return(result);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068d4:	633a      	str	r2, [r7, #48]	; 0x30
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e3      	bne.n	80068b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60fb      	str	r3, [r7, #12]
   return(result);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0310 	bic.w	r3, r3, #16
 8006910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	617b      	str	r3, [r7, #20]
   return(result);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e4      	bne.n	80068fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f846 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006944:	e02a      	b.n	800699c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00e      	beq.n	8006970 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01c      	beq.n	80069a0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
    }
    return;
 800696e:	e017      	b.n	80069a0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d012      	beq.n	80069a2 <HAL_UART_IRQHandler+0x59e>
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00c      	beq.n	80069a2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fd71 	bl	8007470 <UART_EndTransmit_IT>
    return;
 800698e:	e008      	b.n	80069a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8006990:	bf00      	nop
 8006992:	e006      	b.n	80069a2 <HAL_UART_IRQHandler+0x59e>
    return;
 8006994:	bf00      	nop
 8006996:	e004      	b.n	80069a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_UART_IRQHandler+0x59e>
    return;
 80069a0:	bf00      	nop
  }

}
 80069a2:	37e8      	adds	r7, #232	; 0xe8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4ba6      	ldr	r3, [pc, #664]	; (8006cac <UART_SetConfig+0x2c4>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	6979      	ldr	r1, [r7, #20]
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a94      	ldr	r2, [pc, #592]	; (8006cb0 <UART_SetConfig+0x2c8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d120      	bne.n	8006aa6 <UART_SetConfig+0xbe>
 8006a64:	4b93      	ldr	r3, [pc, #588]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d816      	bhi.n	8006aa0 <UART_SetConfig+0xb8>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x90>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006a95 	.word	0x08006a95
 8006a80:	08006a8f 	.word	0x08006a8f
 8006a84:	08006a9b 	.word	0x08006a9b
 8006a88:	2301      	movs	r3, #1
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e150      	b.n	8006d30 <UART_SetConfig+0x348>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e14d      	b.n	8006d30 <UART_SetConfig+0x348>
 8006a94:	2304      	movs	r3, #4
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e14a      	b.n	8006d30 <UART_SetConfig+0x348>
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e147      	b.n	8006d30 <UART_SetConfig+0x348>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e144      	b.n	8006d30 <UART_SetConfig+0x348>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a83      	ldr	r2, [pc, #524]	; (8006cb8 <UART_SetConfig+0x2d0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d132      	bne.n	8006b16 <UART_SetConfig+0x12e>
 8006ab0:	4b80      	ldr	r3, [pc, #512]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b0c      	cmp	r3, #12
 8006abc:	d828      	bhi.n	8006b10 <UART_SetConfig+0x128>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0xdc>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b05 	.word	0x08006b05
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b11 	.word	0x08006b11
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006aff 	.word	0x08006aff
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006b0b 	.word	0x08006b0b
 8006af8:	2300      	movs	r3, #0
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e118      	b.n	8006d30 <UART_SetConfig+0x348>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e115      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e112      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e10f      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e10c      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a68      	ldr	r2, [pc, #416]	; (8006cbc <UART_SetConfig+0x2d4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d120      	bne.n	8006b62 <UART_SetConfig+0x17a>
 8006b20:	4b64      	ldr	r3, [pc, #400]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b2a:	2b30      	cmp	r3, #48	; 0x30
 8006b2c:	d013      	beq.n	8006b56 <UART_SetConfig+0x16e>
 8006b2e:	2b30      	cmp	r3, #48	; 0x30
 8006b30:	d814      	bhi.n	8006b5c <UART_SetConfig+0x174>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d009      	beq.n	8006b4a <UART_SetConfig+0x162>
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d810      	bhi.n	8006b5c <UART_SetConfig+0x174>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <UART_SetConfig+0x15c>
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d006      	beq.n	8006b50 <UART_SetConfig+0x168>
 8006b42:	e00b      	b.n	8006b5c <UART_SetConfig+0x174>
 8006b44:	2300      	movs	r3, #0
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e0f2      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e0ef      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b50:	2304      	movs	r3, #4
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0ec      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b56:	2308      	movs	r3, #8
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e0e9      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e0e6      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a56      	ldr	r2, [pc, #344]	; (8006cc0 <UART_SetConfig+0x2d8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d120      	bne.n	8006bae <UART_SetConfig+0x1c6>
 8006b6c:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b76:	2bc0      	cmp	r3, #192	; 0xc0
 8006b78:	d013      	beq.n	8006ba2 <UART_SetConfig+0x1ba>
 8006b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b7c:	d814      	bhi.n	8006ba8 <UART_SetConfig+0x1c0>
 8006b7e:	2b80      	cmp	r3, #128	; 0x80
 8006b80:	d009      	beq.n	8006b96 <UART_SetConfig+0x1ae>
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d810      	bhi.n	8006ba8 <UART_SetConfig+0x1c0>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <UART_SetConfig+0x1a8>
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d006      	beq.n	8006b9c <UART_SetConfig+0x1b4>
 8006b8e:	e00b      	b.n	8006ba8 <UART_SetConfig+0x1c0>
 8006b90:	2300      	movs	r3, #0
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e0cc      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b96:	2302      	movs	r3, #2
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e0c9      	b.n	8006d30 <UART_SetConfig+0x348>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e0c6      	b.n	8006d30 <UART_SetConfig+0x348>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e0c3      	b.n	8006d30 <UART_SetConfig+0x348>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e0c0      	b.n	8006d30 <UART_SetConfig+0x348>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a44      	ldr	r2, [pc, #272]	; (8006cc4 <UART_SetConfig+0x2dc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d125      	bne.n	8006c04 <UART_SetConfig+0x21c>
 8006bb8:	4b3e      	ldr	r3, [pc, #248]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc6:	d017      	beq.n	8006bf8 <UART_SetConfig+0x210>
 8006bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bcc:	d817      	bhi.n	8006bfe <UART_SetConfig+0x216>
 8006bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd2:	d00b      	beq.n	8006bec <UART_SetConfig+0x204>
 8006bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd8:	d811      	bhi.n	8006bfe <UART_SetConfig+0x216>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <UART_SetConfig+0x1fe>
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be2:	d006      	beq.n	8006bf2 <UART_SetConfig+0x20a>
 8006be4:	e00b      	b.n	8006bfe <UART_SetConfig+0x216>
 8006be6:	2300      	movs	r3, #0
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e0a1      	b.n	8006d30 <UART_SetConfig+0x348>
 8006bec:	2302      	movs	r3, #2
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e09e      	b.n	8006d30 <UART_SetConfig+0x348>
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e09b      	b.n	8006d30 <UART_SetConfig+0x348>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e098      	b.n	8006d30 <UART_SetConfig+0x348>
 8006bfe:	2310      	movs	r3, #16
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e095      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2f      	ldr	r2, [pc, #188]	; (8006cc8 <UART_SetConfig+0x2e0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d125      	bne.n	8006c5a <UART_SetConfig+0x272>
 8006c0e:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1c:	d017      	beq.n	8006c4e <UART_SetConfig+0x266>
 8006c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c22:	d817      	bhi.n	8006c54 <UART_SetConfig+0x26c>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d00b      	beq.n	8006c42 <UART_SetConfig+0x25a>
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	d811      	bhi.n	8006c54 <UART_SetConfig+0x26c>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <UART_SetConfig+0x254>
 8006c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c38:	d006      	beq.n	8006c48 <UART_SetConfig+0x260>
 8006c3a:	e00b      	b.n	8006c54 <UART_SetConfig+0x26c>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e076      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c42:	2302      	movs	r3, #2
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e073      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e070      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e06d      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c54:	2310      	movs	r3, #16
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e06a      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <UART_SetConfig+0x2e4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d138      	bne.n	8006cd6 <UART_SetConfig+0x2ee>
 8006c64:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <UART_SetConfig+0x2cc>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c72:	d017      	beq.n	8006ca4 <UART_SetConfig+0x2bc>
 8006c74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c78:	d82a      	bhi.n	8006cd0 <UART_SetConfig+0x2e8>
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	d00b      	beq.n	8006c98 <UART_SetConfig+0x2b0>
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c84:	d824      	bhi.n	8006cd0 <UART_SetConfig+0x2e8>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <UART_SetConfig+0x2aa>
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d006      	beq.n	8006c9e <UART_SetConfig+0x2b6>
 8006c90:	e01e      	b.n	8006cd0 <UART_SetConfig+0x2e8>
 8006c92:	2300      	movs	r3, #0
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e04b      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e048      	b.n	8006d30 <UART_SetConfig+0x348>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e045      	b.n	8006d30 <UART_SetConfig+0x348>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e042      	b.n	8006d30 <UART_SetConfig+0x348>
 8006caa:	bf00      	nop
 8006cac:	efff69f3 	.word	0xefff69f3
 8006cb0:	40011000 	.word	0x40011000
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40004400 	.word	0x40004400
 8006cbc:	40004800 	.word	0x40004800
 8006cc0:	40004c00 	.word	0x40004c00
 8006cc4:	40005000 	.word	0x40005000
 8006cc8:	40011400 	.word	0x40011400
 8006ccc:	40007800 	.word	0x40007800
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e02c      	b.n	8006d30 <UART_SetConfig+0x348>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a72      	ldr	r2, [pc, #456]	; (8006ea4 <UART_SetConfig+0x4bc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d125      	bne.n	8006d2c <UART_SetConfig+0x344>
 8006ce0:	4b71      	ldr	r3, [pc, #452]	; (8006ea8 <UART_SetConfig+0x4c0>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cee:	d017      	beq.n	8006d20 <UART_SetConfig+0x338>
 8006cf0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cf4:	d817      	bhi.n	8006d26 <UART_SetConfig+0x33e>
 8006cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfa:	d00b      	beq.n	8006d14 <UART_SetConfig+0x32c>
 8006cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d00:	d811      	bhi.n	8006d26 <UART_SetConfig+0x33e>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <UART_SetConfig+0x326>
 8006d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d0a:	d006      	beq.n	8006d1a <UART_SetConfig+0x332>
 8006d0c:	e00b      	b.n	8006d26 <UART_SetConfig+0x33e>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e00d      	b.n	8006d30 <UART_SetConfig+0x348>
 8006d14:	2302      	movs	r3, #2
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e00a      	b.n	8006d30 <UART_SetConfig+0x348>
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e007      	b.n	8006d30 <UART_SetConfig+0x348>
 8006d20:	2308      	movs	r3, #8
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e004      	b.n	8006d30 <UART_SetConfig+0x348>
 8006d26:	2310      	movs	r3, #16
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e001      	b.n	8006d30 <UART_SetConfig+0x348>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d38:	d15b      	bne.n	8006df2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d3a:	7ffb      	ldrb	r3, [r7, #31]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d828      	bhi.n	8006d92 <UART_SetConfig+0x3aa>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x360>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	08006d93 	.word	0x08006d93
 8006d58:	08006d83 	.word	0x08006d83
 8006d5c:	08006d93 	.word	0x08006d93
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006d93 	.word	0x08006d93
 8006d68:	08006d8b 	.word	0x08006d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fd fd08 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8006d70:	61b8      	str	r0, [r7, #24]
        break;
 8006d72:	e013      	b.n	8006d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d74:	f7fd fd18 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006d78:	61b8      	str	r0, [r7, #24]
        break;
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d7c:	4b4b      	ldr	r3, [pc, #300]	; (8006eac <UART_SetConfig+0x4c4>)
 8006d7e:	61bb      	str	r3, [r7, #24]
        break;
 8006d80:	e00c      	b.n	8006d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d82:	f7fd fbeb 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8006d86:	61b8      	str	r0, [r7, #24]
        break;
 8006d88:	e008      	b.n	8006d9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8e:	61bb      	str	r3, [r7, #24]
        break;
 8006d90:	e004      	b.n	8006d9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	77bb      	strb	r3, [r7, #30]
        break;
 8006d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d074      	beq.n	8006e8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	005a      	lsls	r2, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	441a      	add	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d916      	bls.n	8006dec <UART_SetConfig+0x404>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d212      	bcs.n	8006dec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f023 030f 	bic.w	r3, r3, #15
 8006dce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	89fb      	ldrh	r3, [r7, #14]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	89fa      	ldrh	r2, [r7, #14]
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	e04f      	b.n	8006e8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	77bb      	strb	r3, [r7, #30]
 8006df0:	e04c      	b.n	8006e8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006df2:	7ffb      	ldrb	r3, [r7, #31]
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d828      	bhi.n	8006e4a <UART_SetConfig+0x462>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x418>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e4b 	.word	0x08006e4b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd fcac 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8006e28:	61b8      	str	r0, [r7, #24]
        break;
 8006e2a:	e013      	b.n	8006e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fd fcbc 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006e30:	61b8      	str	r0, [r7, #24]
        break;
 8006e32:	e00f      	b.n	8006e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <UART_SetConfig+0x4c4>)
 8006e36:	61bb      	str	r3, [r7, #24]
        break;
 8006e38:	e00c      	b.n	8006e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fd fb8f 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8006e3e:	61b8      	str	r0, [r7, #24]
        break;
 8006e40:	e008      	b.n	8006e54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	61bb      	str	r3, [r7, #24]
        break;
 8006e48:	e004      	b.n	8006e54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	77bb      	strb	r3, [r7, #30]
        break;
 8006e52:	bf00      	nop
    }

    if (pclk != 0U)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d018      	beq.n	8006e8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	085a      	lsrs	r2, r3, #1
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	441a      	add	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b0f      	cmp	r3, #15
 8006e72:	d909      	bls.n	8006e88 <UART_SetConfig+0x4a0>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7a:	d205      	bcs.n	8006e88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60da      	str	r2, [r3, #12]
 8006e86:	e001      	b.n	8006e8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3720      	adds	r7, #32
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40007c00 	.word	0x40007c00
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400

08006eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fae:	d10a      	bne.n	8006fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fb fc06 	bl	8002814 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d10e      	bne.n	8007036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f81b 	bl	8007062 <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e011      	b.n	800705a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b09c      	sub	sp, #112	; 0x70
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007072:	e0a7      	b.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	f000 80a3 	beq.w	80071c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fb fbc9 	bl	8002814 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <UART_WaitOnFlagUntilTimeout+0x32>
 800708e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007090:	2b00      	cmp	r3, #0
 8007092:	d13f      	bne.n	8007114 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a8:	667b      	str	r3, [r7, #100]	; 0x64
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e6      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	663b      	str	r3, [r7, #96]	; 0x60
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e068      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d050      	beq.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007130:	d148      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800713a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
 800715c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	613b      	str	r3, [r7, #16]
   return(result);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	66bb      	str	r3, [r7, #104]	; 0x68
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800718e:	623a      	str	r2, [r7, #32]
 8007190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	69f9      	ldr	r1, [r7, #28]
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	61bb      	str	r3, [r7, #24]
   return(result);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e010      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69da      	ldr	r2, [r3, #28]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4013      	ands	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bf0c      	ite	eq
 80071d4:	2301      	moveq	r3, #1
 80071d6:	2300      	movne	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	429a      	cmp	r2, r3
 80071e0:	f43f af48 	beq.w	8007074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3770      	adds	r7, #112	; 0x70
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b097      	sub	sp, #92	; 0x5c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d10e      	bne.n	8007242 <UART_Start_Receive_IT+0x52>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <UART_Start_Receive_IT+0x48>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007236:	e02d      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	22ff      	movs	r2, #255	; 0xff
 800723c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007240:	e028      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <UART_Start_Receive_IT+0x76>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <UART_Start_Receive_IT+0x6c>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800725a:	e01b      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	227f      	movs	r2, #127	; 0x7f
 8007260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007264:	e016      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726e:	d10d      	bne.n	800728c <UART_Start_Receive_IT+0x9c>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <UART_Start_Receive_IT+0x92>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	227f      	movs	r2, #127	; 0x7f
 800727c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007280:	e008      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	223f      	movs	r2, #63	; 0x3f
 8007286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800728a:	e003      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2222      	movs	r2, #34	; 0x22
 80072a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	657b      	str	r3, [r7, #84]	; 0x54
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e5      	bne.n	80072a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e0:	d107      	bne.n	80072f2 <UART_Start_Receive_IT+0x102>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4a21      	ldr	r2, [pc, #132]	; (8007374 <UART_Start_Receive_IT+0x184>)
 80072ee:	669a      	str	r2, [r3, #104]	; 0x68
 80072f0:	e002      	b.n	80072f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a20      	ldr	r2, [pc, #128]	; (8007378 <UART_Start_Receive_IT+0x188>)
 80072f6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d019      	beq.n	8007334 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731e:	637b      	str	r3, [r7, #52]	; 0x34
 8007320:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e6      	bne.n	8007300 <UART_Start_Receive_IT+0x110>
 8007332:	e018      	b.n	8007366 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	613b      	str	r3, [r7, #16]
   return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f043 0320 	orr.w	r3, r3, #32
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	69f9      	ldr	r1, [r7, #28]
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e6      	bne.n	8007334 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	375c      	adds	r7, #92	; 0x5c
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	0800762b 	.word	0x0800762b
 8007378:	080074c5 	.word	0x080074c5

0800737c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b095      	sub	sp, #84	; 0x54
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a2:	643b      	str	r3, [r7, #64]	; 0x40
 80073a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3308      	adds	r3, #8
 80073bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d118      	bne.n	8007424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	647b      	str	r3, [r7, #68]	; 0x44
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6979      	ldr	r1, [r7, #20]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	613b      	str	r3, [r7, #16]
   return(result);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007438:	bf00      	nop
 800743a:	3754      	adds	r7, #84	; 0x54
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff faaa 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60bb      	str	r3, [r7, #8]
   return(result);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6979      	ldr	r1, [r7, #20]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	613b      	str	r3, [r7, #16]
   return(result);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fa76 	bl	80069a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074bc:	bf00      	nop
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b096      	sub	sp, #88	; 0x58
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074dc:	2b22      	cmp	r3, #34	; 0x22
 80074de:	f040 8098 	bne.w	8007612 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80074f0:	b2d9      	uxtb	r1, r3
 80074f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fc:	400a      	ands	r2, r1
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d17b      	bne.n	8007622 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800753e:	653b      	str	r3, [r7, #80]	; 0x50
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	647b      	str	r3, [r7, #68]	; 0x44
 800754a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800754e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	623b      	str	r3, [r7, #32]
   return(result);
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757c:	633a      	str	r2, [r7, #48]	; 0x30
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e5      	bne.n	800755c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d12e      	bne.n	800760a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0310 	bic.w	r3, r3, #16
 80075c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	617b      	str	r3, [r7, #20]
   return(result);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d103      	bne.n	80075fa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2210      	movs	r2, #16
 80075f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f9e4 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007608:	e00b      	b.n	8007622 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fa fae0 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 8007610:	e007      	b.n	8007622 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0208 	orr.w	r2, r2, #8
 8007620:	619a      	str	r2, [r3, #24]
}
 8007622:	bf00      	nop
 8007624:	3758      	adds	r7, #88	; 0x58
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b096      	sub	sp, #88	; 0x58
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007638:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007642:	2b22      	cmp	r3, #34	; 0x22
 8007644:	f040 8098 	bne.w	8007778 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007658:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800765c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007660:	4013      	ands	r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007666:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d17b      	bne.n	8007788 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
 80076b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e5      	bne.n	80076c2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770e:	2b01      	cmp	r3, #1
 8007710:	d12e      	bne.n	8007770 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	60bb      	str	r3, [r7, #8]
   return(result);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f023 0310 	bic.w	r3, r3, #16
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6979      	ldr	r1, [r7, #20]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	613b      	str	r3, [r7, #16]
   return(result);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e6      	bne.n	8007718 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b10      	cmp	r3, #16
 8007756:	d103      	bne.n	8007760 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2210      	movs	r2, #16
 800775e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff f931 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800776e:	e00b      	b.n	8007788 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fa fa2d 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 8007776:	e007      	b.n	8007788 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0208 	orr.w	r2, r2, #8
 8007786:	619a      	str	r2, [r3, #24]
}
 8007788:	bf00      	nop
 800778a:	3758      	adds	r7, #88	; 0x58
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007790:	b084      	sub	sp, #16
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	f107 001c 	add.w	r0, r7, #28
 800779e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d120      	bne.n	80077ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	4b20      	ldr	r3, [pc, #128]	; (800783c <USB_CoreInit+0xac>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d105      	bne.n	80077de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa96 	bl	8007d10 <USB_CoreReset>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	e010      	b.n	800780c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa8a 	bl	8007d10 <USB_CoreReset>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	2b01      	cmp	r3, #1
 8007810:	d10b      	bne.n	800782a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f043 0206 	orr.w	r2, r3, #6
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f043 0220 	orr.w	r2, r3, #32
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007836:	b004      	add	sp, #16
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	ffbdffbf 	.word	0xffbdffbf

08007840 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f023 0201 	bic.w	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d115      	bne.n	80078b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007890:	2001      	movs	r0, #1
 8007892:	f7fa ffcb 	bl	800282c <HAL_Delay>
      ms++;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fa29 	bl	8007cf4 <USB_GetMode>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d01e      	beq.n	80078e6 <USB_SetCurrentMode+0x84>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b31      	cmp	r3, #49	; 0x31
 80078ac:	d9f0      	bls.n	8007890 <USB_SetCurrentMode+0x2e>
 80078ae:	e01a      	b.n	80078e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d115      	bne.n	80078e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078c2:	2001      	movs	r0, #1
 80078c4:	f7fa ffb2 	bl	800282c <HAL_Delay>
      ms++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa10 	bl	8007cf4 <USB_GetMode>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <USB_SetCurrentMode+0x84>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b31      	cmp	r3, #49	; 0x31
 80078de:	d9f0      	bls.n	80078c2 <USB_SetCurrentMode+0x60>
 80078e0:	e001      	b.n	80078e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e005      	b.n	80078f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b32      	cmp	r3, #50	; 0x32
 80078ea:	d101      	bne.n	80078f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078fc:	b084      	sub	sp, #16
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800790a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	e009      	b.n	8007930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3340      	adds	r3, #64	; 0x40
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	2200      	movs	r2, #0
 8007928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3301      	adds	r3, #1
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b0e      	cmp	r3, #14
 8007934:	d9f2      	bls.n	800791c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11c      	bne.n	8007976 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e005      	b.n	8007982 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007988:	461a      	mov	r2, r3
 800798a:	2300      	movs	r3, #0
 800798c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	4619      	mov	r1, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	461a      	mov	r2, r3
 800799e:	680b      	ldr	r3, [r1, #0]
 80079a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d10c      	bne.n	80079c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079ae:	2100      	movs	r1, #0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f965 	bl	8007c80 <USB_SetDevSpeed>
 80079b6:	e008      	b.n	80079ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f960 	bl	8007c80 <USB_SetDevSpeed>
 80079c0:	e003      	b.n	80079ca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079c2:	2103      	movs	r1, #3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f95b 	bl	8007c80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ca:	2110      	movs	r1, #16
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f8f3 	bl	8007bb8 <USB_FlushTxFifo>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f91f 	bl	8007c20 <USB_FlushRxFifo>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	461a      	mov	r2, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fe:	461a      	mov	r2, r3
 8007a00:	2300      	movs	r3, #0
 8007a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a10:	2300      	movs	r3, #0
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	e043      	b.n	8007a9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a2c:	d118      	bne.n	8007a60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	461a      	mov	r2, r3
 8007a42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	e013      	b.n	8007a72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	461a      	mov	r2, r3
 8007a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e008      	b.n	8007a72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	461a      	mov	r2, r3
 8007a80:	2300      	movs	r3, #0
 8007a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	461a      	mov	r2, r3
 8007a92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	613b      	str	r3, [r7, #16]
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d3b7      	bcc.n	8007a16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	e043      	b.n	8007b34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac2:	d118      	bne.n	8007af6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e013      	b.n	8007b08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aec:	461a      	mov	r2, r3
 8007aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e008      	b.n	8007b08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	461a      	mov	r2, r3
 8007b04:	2300      	movs	r3, #0
 8007b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	3301      	adds	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d3b7      	bcc.n	8007aac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f043 0210 	orr.w	r2, r3, #16
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <USB_DevInit+0x2b4>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d105      	bne.n	8007ba0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <USB_DevInit+0x2b8>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bac:	b004      	add	sp, #16
 8007bae:	4770      	bx	lr
 8007bb0:	803c3800 	.word	0x803c3800
 8007bb4:	40000004 	.word	0x40000004

08007bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <USB_FlushTxFifo+0x64>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d901      	bls.n	8007bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e01b      	b.n	8007c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	daf2      	bge.n	8007bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	019b      	lsls	r3, r3, #6
 8007be8:	f043 0220 	orr.w	r2, r3, #32
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <USB_FlushTxFifo+0x64>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e006      	b.n	8007c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d0f0      	beq.n	8007bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	00030d40 	.word	0x00030d40

08007c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <USB_FlushRxFifo+0x5c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e018      	b.n	8007c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	daf2      	bge.n	8007c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <USB_FlushRxFifo+0x5c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d0f0      	beq.n	8007c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	00030d40 	.word	0x00030d40

08007c80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ccc:	f023 0303 	bic.w	r3, r3, #3
 8007cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce0:	f043 0302 	orr.w	r3, r3, #2
 8007ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0301 	and.w	r3, r3, #1
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <USB_CoreReset+0x64>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e01b      	b.n	8007d66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	daf2      	bge.n	8007d1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f043 0201 	orr.w	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <USB_CoreReset+0x64>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d901      	bls.n	8007d58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e006      	b.n	8007d66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d0f0      	beq.n	8007d46 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	00030d40 	.word	0x00030d40

08007d78 <__cvt>:
 8007d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	ec55 4b10 	vmov	r4, r5, d0
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	460e      	mov	r6, r1
 8007d84:	4619      	mov	r1, r3
 8007d86:	462b      	mov	r3, r5
 8007d88:	bfbb      	ittet	lt
 8007d8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d8e:	461d      	movlt	r5, r3
 8007d90:	2300      	movge	r3, #0
 8007d92:	232d      	movlt	r3, #45	; 0x2d
 8007d94:	700b      	strb	r3, [r1, #0]
 8007d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d9c:	4691      	mov	r9, r2
 8007d9e:	f023 0820 	bic.w	r8, r3, #32
 8007da2:	bfbc      	itt	lt
 8007da4:	4622      	movlt	r2, r4
 8007da6:	4614      	movlt	r4, r2
 8007da8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dac:	d005      	beq.n	8007dba <__cvt+0x42>
 8007dae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007db2:	d100      	bne.n	8007db6 <__cvt+0x3e>
 8007db4:	3601      	adds	r6, #1
 8007db6:	2102      	movs	r1, #2
 8007db8:	e000      	b.n	8007dbc <__cvt+0x44>
 8007dba:	2103      	movs	r1, #3
 8007dbc:	ab03      	add	r3, sp, #12
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	ab02      	add	r3, sp, #8
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	ec45 4b10 	vmov	d0, r4, r5
 8007dc8:	4653      	mov	r3, sl
 8007dca:	4632      	mov	r2, r6
 8007dcc:	f000 fe48 	bl	8008a60 <_dtoa_r>
 8007dd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	d102      	bne.n	8007dde <__cvt+0x66>
 8007dd8:	f019 0f01 	tst.w	r9, #1
 8007ddc:	d022      	beq.n	8007e24 <__cvt+0xac>
 8007dde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007de2:	eb07 0906 	add.w	r9, r7, r6
 8007de6:	d110      	bne.n	8007e0a <__cvt+0x92>
 8007de8:	783b      	ldrb	r3, [r7, #0]
 8007dea:	2b30      	cmp	r3, #48	; 0x30
 8007dec:	d10a      	bne.n	8007e04 <__cvt+0x8c>
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8007dfa:	b918      	cbnz	r0, 8007e04 <__cvt+0x8c>
 8007dfc:	f1c6 0601 	rsb	r6, r6, #1
 8007e00:	f8ca 6000 	str.w	r6, [sl]
 8007e04:	f8da 3000 	ldr.w	r3, [sl]
 8007e08:	4499      	add	r9, r3
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fe79 	bl	8000b08 <__aeabi_dcmpeq>
 8007e16:	b108      	cbz	r0, 8007e1c <__cvt+0xa4>
 8007e18:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e1c:	2230      	movs	r2, #48	; 0x30
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	454b      	cmp	r3, r9
 8007e22:	d307      	bcc.n	8007e34 <__cvt+0xbc>
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e28:	1bdb      	subs	r3, r3, r7
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	b004      	add	sp, #16
 8007e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e34:	1c59      	adds	r1, r3, #1
 8007e36:	9103      	str	r1, [sp, #12]
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	e7f0      	b.n	8007e1e <__cvt+0xa6>

08007e3c <__exponent>:
 8007e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2900      	cmp	r1, #0
 8007e42:	bfb8      	it	lt
 8007e44:	4249      	neglt	r1, r1
 8007e46:	f803 2b02 	strb.w	r2, [r3], #2
 8007e4a:	bfb4      	ite	lt
 8007e4c:	222d      	movlt	r2, #45	; 0x2d
 8007e4e:	222b      	movge	r2, #43	; 0x2b
 8007e50:	2909      	cmp	r1, #9
 8007e52:	7042      	strb	r2, [r0, #1]
 8007e54:	dd2a      	ble.n	8007eac <__exponent+0x70>
 8007e56:	f10d 0207 	add.w	r2, sp, #7
 8007e5a:	4617      	mov	r7, r2
 8007e5c:	260a      	movs	r6, #10
 8007e5e:	4694      	mov	ip, r2
 8007e60:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e64:	fb06 1415 	mls	r4, r6, r5, r1
 8007e68:	3430      	adds	r4, #48	; 0x30
 8007e6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2c63      	cmp	r4, #99	; 0x63
 8007e72:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e76:	4629      	mov	r1, r5
 8007e78:	dcf1      	bgt.n	8007e5e <__exponent+0x22>
 8007e7a:	3130      	adds	r1, #48	; 0x30
 8007e7c:	f1ac 0402 	sub.w	r4, ip, #2
 8007e80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e84:	1c41      	adds	r1, r0, #1
 8007e86:	4622      	mov	r2, r4
 8007e88:	42ba      	cmp	r2, r7
 8007e8a:	d30a      	bcc.n	8007ea2 <__exponent+0x66>
 8007e8c:	f10d 0209 	add.w	r2, sp, #9
 8007e90:	eba2 020c 	sub.w	r2, r2, ip
 8007e94:	42bc      	cmp	r4, r7
 8007e96:	bf88      	it	hi
 8007e98:	2200      	movhi	r2, #0
 8007e9a:	4413      	add	r3, r2
 8007e9c:	1a18      	subs	r0, r3, r0
 8007e9e:	b003      	add	sp, #12
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ea6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007eaa:	e7ed      	b.n	8007e88 <__exponent+0x4c>
 8007eac:	2330      	movs	r3, #48	; 0x30
 8007eae:	3130      	adds	r1, #48	; 0x30
 8007eb0:	7083      	strb	r3, [r0, #2]
 8007eb2:	70c1      	strb	r1, [r0, #3]
 8007eb4:	1d03      	adds	r3, r0, #4
 8007eb6:	e7f1      	b.n	8007e9c <__exponent+0x60>

08007eb8 <_printf_float>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	ed2d 8b02 	vpush	{d8}
 8007ec0:	b08d      	sub	sp, #52	; 0x34
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ec8:	4616      	mov	r6, r2
 8007eca:	461f      	mov	r7, r3
 8007ecc:	4605      	mov	r5, r0
 8007ece:	f000 fcc7 	bl	8008860 <_localeconv_r>
 8007ed2:	f8d0 a000 	ldr.w	sl, [r0]
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f7f8 f9ea 	bl	80002b0 <strlen>
 8007edc:	2300      	movs	r3, #0
 8007ede:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007eec:	3307      	adds	r3, #7
 8007eee:	f023 0307 	bic.w	r3, r3, #7
 8007ef2:	f103 0208 	add.w	r2, r3, #8
 8007ef6:	f8c8 2000 	str.w	r2, [r8]
 8007efa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007efe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f08:	ee08 0a10 	vmov	s16, r0
 8007f0c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f14:	4b9e      	ldr	r3, [pc, #632]	; (8008190 <_printf_float+0x2d8>)
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	f7f8 fe27 	bl	8000b6c <__aeabi_dcmpun>
 8007f1e:	bb88      	cbnz	r0, 8007f84 <_printf_float+0xcc>
 8007f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f24:	4b9a      	ldr	r3, [pc, #616]	; (8008190 <_printf_float+0x2d8>)
 8007f26:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2a:	f7f8 fe01 	bl	8000b30 <__aeabi_dcmple>
 8007f2e:	bb48      	cbnz	r0, 8007f84 <_printf_float+0xcc>
 8007f30:	2200      	movs	r2, #0
 8007f32:	2300      	movs	r3, #0
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fdf0 	bl	8000b1c <__aeabi_dcmplt>
 8007f3c:	b110      	cbz	r0, 8007f44 <_printf_float+0x8c>
 8007f3e:	232d      	movs	r3, #45	; 0x2d
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f44:	4a93      	ldr	r2, [pc, #588]	; (8008194 <_printf_float+0x2dc>)
 8007f46:	4b94      	ldr	r3, [pc, #592]	; (8008198 <_printf_float+0x2e0>)
 8007f48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f4c:	bf94      	ite	ls
 8007f4e:	4690      	movls	r8, r2
 8007f50:	4698      	movhi	r8, r3
 8007f52:	2303      	movs	r3, #3
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	9b05      	ldr	r3, [sp, #20]
 8007f58:	f023 0304 	bic.w	r3, r3, #4
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	f04f 0900 	mov.w	r9, #0
 8007f62:	9700      	str	r7, [sp, #0]
 8007f64:	4633      	mov	r3, r6
 8007f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f9da 	bl	8008324 <_printf_common>
 8007f70:	3001      	adds	r0, #1
 8007f72:	f040 8090 	bne.w	8008096 <_printf_float+0x1de>
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	b00d      	add	sp, #52	; 0x34
 8007f7c:	ecbd 8b02 	vpop	{d8}
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	4642      	mov	r2, r8
 8007f86:	464b      	mov	r3, r9
 8007f88:	4640      	mov	r0, r8
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	f7f8 fdee 	bl	8000b6c <__aeabi_dcmpun>
 8007f90:	b140      	cbz	r0, 8007fa4 <_printf_float+0xec>
 8007f92:	464b      	mov	r3, r9
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfbc      	itt	lt
 8007f98:	232d      	movlt	r3, #45	; 0x2d
 8007f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f9e:	4a7f      	ldr	r2, [pc, #508]	; (800819c <_printf_float+0x2e4>)
 8007fa0:	4b7f      	ldr	r3, [pc, #508]	; (80081a0 <_printf_float+0x2e8>)
 8007fa2:	e7d1      	b.n	8007f48 <_printf_float+0x90>
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007faa:	9206      	str	r2, [sp, #24]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	d13f      	bne.n	8008030 <_printf_float+0x178>
 8007fb0:	2306      	movs	r3, #6
 8007fb2:	6063      	str	r3, [r4, #4]
 8007fb4:	9b05      	ldr	r3, [sp, #20]
 8007fb6:	6861      	ldr	r1, [r4, #4]
 8007fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8007fc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fc6:	ab09      	add	r3, sp, #36	; 0x24
 8007fc8:	ec49 8b10 	vmov	d0, r8, r9
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	6022      	str	r2, [r4, #0]
 8007fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7ff fecf 	bl	8007d78 <__cvt>
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fde:	2b47      	cmp	r3, #71	; 0x47
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	d108      	bne.n	8007ff6 <_printf_float+0x13e>
 8007fe4:	1cc8      	adds	r0, r1, #3
 8007fe6:	db02      	blt.n	8007fee <_printf_float+0x136>
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	4299      	cmp	r1, r3
 8007fec:	dd41      	ble.n	8008072 <_printf_float+0x1ba>
 8007fee:	f1ab 0302 	sub.w	r3, fp, #2
 8007ff2:	fa5f fb83 	uxtb.w	fp, r3
 8007ff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ffa:	d820      	bhi.n	800803e <_printf_float+0x186>
 8007ffc:	3901      	subs	r1, #1
 8007ffe:	465a      	mov	r2, fp
 8008000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008004:	9109      	str	r1, [sp, #36]	; 0x24
 8008006:	f7ff ff19 	bl	8007e3c <__exponent>
 800800a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800800c:	1813      	adds	r3, r2, r0
 800800e:	2a01      	cmp	r2, #1
 8008010:	4681      	mov	r9, r0
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	dc02      	bgt.n	800801c <_printf_float+0x164>
 8008016:	6822      	ldr	r2, [r4, #0]
 8008018:	07d2      	lsls	r2, r2, #31
 800801a:	d501      	bpl.n	8008020 <_printf_float+0x168>
 800801c:	3301      	adds	r3, #1
 800801e:	6123      	str	r3, [r4, #16]
 8008020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008024:	2b00      	cmp	r3, #0
 8008026:	d09c      	beq.n	8007f62 <_printf_float+0xaa>
 8008028:	232d      	movs	r3, #45	; 0x2d
 800802a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800802e:	e798      	b.n	8007f62 <_printf_float+0xaa>
 8008030:	9a06      	ldr	r2, [sp, #24]
 8008032:	2a47      	cmp	r2, #71	; 0x47
 8008034:	d1be      	bne.n	8007fb4 <_printf_float+0xfc>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1bc      	bne.n	8007fb4 <_printf_float+0xfc>
 800803a:	2301      	movs	r3, #1
 800803c:	e7b9      	b.n	8007fb2 <_printf_float+0xfa>
 800803e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008042:	d118      	bne.n	8008076 <_printf_float+0x1be>
 8008044:	2900      	cmp	r1, #0
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	dd0b      	ble.n	8008062 <_printf_float+0x1aa>
 800804a:	6121      	str	r1, [r4, #16]
 800804c:	b913      	cbnz	r3, 8008054 <_printf_float+0x19c>
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	07d0      	lsls	r0, r2, #31
 8008052:	d502      	bpl.n	800805a <_printf_float+0x1a2>
 8008054:	3301      	adds	r3, #1
 8008056:	440b      	add	r3, r1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	65a1      	str	r1, [r4, #88]	; 0x58
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	e7de      	b.n	8008020 <_printf_float+0x168>
 8008062:	b913      	cbnz	r3, 800806a <_printf_float+0x1b2>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	07d2      	lsls	r2, r2, #31
 8008068:	d501      	bpl.n	800806e <_printf_float+0x1b6>
 800806a:	3302      	adds	r3, #2
 800806c:	e7f4      	b.n	8008058 <_printf_float+0x1a0>
 800806e:	2301      	movs	r3, #1
 8008070:	e7f2      	b.n	8008058 <_printf_float+0x1a0>
 8008072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008078:	4299      	cmp	r1, r3
 800807a:	db05      	blt.n	8008088 <_printf_float+0x1d0>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	6121      	str	r1, [r4, #16]
 8008080:	07d8      	lsls	r0, r3, #31
 8008082:	d5ea      	bpl.n	800805a <_printf_float+0x1a2>
 8008084:	1c4b      	adds	r3, r1, #1
 8008086:	e7e7      	b.n	8008058 <_printf_float+0x1a0>
 8008088:	2900      	cmp	r1, #0
 800808a:	bfd4      	ite	le
 800808c:	f1c1 0202 	rsble	r2, r1, #2
 8008090:	2201      	movgt	r2, #1
 8008092:	4413      	add	r3, r2
 8008094:	e7e0      	b.n	8008058 <_printf_float+0x1a0>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	055a      	lsls	r2, r3, #21
 800809a:	d407      	bmi.n	80080ac <_printf_float+0x1f4>
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	4642      	mov	r2, r8
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	d12c      	bne.n	8008104 <_printf_float+0x24c>
 80080aa:	e764      	b.n	8007f76 <_printf_float+0xbe>
 80080ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080b0:	f240 80e0 	bls.w	8008274 <_printf_float+0x3bc>
 80080b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	f7f8 fd24 	bl	8000b08 <__aeabi_dcmpeq>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d034      	beq.n	800812e <_printf_float+0x276>
 80080c4:	4a37      	ldr	r2, [pc, #220]	; (80081a4 <_printf_float+0x2ec>)
 80080c6:	2301      	movs	r3, #1
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af51 	beq.w	8007f76 <_printf_float+0xbe>
 80080d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d8:	429a      	cmp	r2, r3
 80080da:	db02      	blt.n	80080e2 <_printf_float+0x22a>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	07d8      	lsls	r0, r3, #31
 80080e0:	d510      	bpl.n	8008104 <_printf_float+0x24c>
 80080e2:	ee18 3a10 	vmov	r3, s16
 80080e6:	4652      	mov	r2, sl
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af41 	beq.w	8007f76 <_printf_float+0xbe>
 80080f4:	f04f 0800 	mov.w	r8, #0
 80080f8:	f104 091a 	add.w	r9, r4, #26
 80080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fe:	3b01      	subs	r3, #1
 8008100:	4543      	cmp	r3, r8
 8008102:	dc09      	bgt.n	8008118 <_printf_float+0x260>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	079b      	lsls	r3, r3, #30
 8008108:	f100 8107 	bmi.w	800831a <_printf_float+0x462>
 800810c:	68e0      	ldr	r0, [r4, #12]
 800810e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008110:	4298      	cmp	r0, r3
 8008112:	bfb8      	it	lt
 8008114:	4618      	movlt	r0, r3
 8008116:	e730      	b.n	8007f7a <_printf_float+0xc2>
 8008118:	2301      	movs	r3, #1
 800811a:	464a      	mov	r2, r9
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f af27 	beq.w	8007f76 <_printf_float+0xbe>
 8008128:	f108 0801 	add.w	r8, r8, #1
 800812c:	e7e6      	b.n	80080fc <_printf_float+0x244>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	dc39      	bgt.n	80081a8 <_printf_float+0x2f0>
 8008134:	4a1b      	ldr	r2, [pc, #108]	; (80081a4 <_printf_float+0x2ec>)
 8008136:	2301      	movs	r3, #1
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f af19 	beq.w	8007f76 <_printf_float+0xbe>
 8008144:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008148:	4313      	orrs	r3, r2
 800814a:	d102      	bne.n	8008152 <_printf_float+0x29a>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	07d9      	lsls	r1, r3, #31
 8008150:	d5d8      	bpl.n	8008104 <_printf_float+0x24c>
 8008152:	ee18 3a10 	vmov	r3, s16
 8008156:	4652      	mov	r2, sl
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f af09 	beq.w	8007f76 <_printf_float+0xbe>
 8008164:	f04f 0900 	mov.w	r9, #0
 8008168:	f104 0a1a 	add.w	sl, r4, #26
 800816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816e:	425b      	negs	r3, r3
 8008170:	454b      	cmp	r3, r9
 8008172:	dc01      	bgt.n	8008178 <_printf_float+0x2c0>
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	e792      	b.n	800809e <_printf_float+0x1e6>
 8008178:	2301      	movs	r3, #1
 800817a:	4652      	mov	r2, sl
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f aef7 	beq.w	8007f76 <_printf_float+0xbe>
 8008188:	f109 0901 	add.w	r9, r9, #1
 800818c:	e7ee      	b.n	800816c <_printf_float+0x2b4>
 800818e:	bf00      	nop
 8008190:	7fefffff 	.word	0x7fefffff
 8008194:	0800a734 	.word	0x0800a734
 8008198:	0800a738 	.word	0x0800a738
 800819c:	0800a73c 	.word	0x0800a73c
 80081a0:	0800a740 	.word	0x0800a740
 80081a4:	0800a744 	.word	0x0800a744
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ac:	429a      	cmp	r2, r3
 80081ae:	bfa8      	it	ge
 80081b0:	461a      	movge	r2, r3
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	4691      	mov	r9, r2
 80081b6:	dc37      	bgt.n	8008228 <_printf_float+0x370>
 80081b8:	f04f 0b00 	mov.w	fp, #0
 80081bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081c0:	f104 021a 	add.w	r2, r4, #26
 80081c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c6:	9305      	str	r3, [sp, #20]
 80081c8:	eba3 0309 	sub.w	r3, r3, r9
 80081cc:	455b      	cmp	r3, fp
 80081ce:	dc33      	bgt.n	8008238 <_printf_float+0x380>
 80081d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081d4:	429a      	cmp	r2, r3
 80081d6:	db3b      	blt.n	8008250 <_printf_float+0x398>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	07da      	lsls	r2, r3, #31
 80081dc:	d438      	bmi.n	8008250 <_printf_float+0x398>
 80081de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081e2:	eba2 0903 	sub.w	r9, r2, r3
 80081e6:	9b05      	ldr	r3, [sp, #20]
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	4591      	cmp	r9, r2
 80081ec:	bfa8      	it	ge
 80081ee:	4691      	movge	r9, r2
 80081f0:	f1b9 0f00 	cmp.w	r9, #0
 80081f4:	dc35      	bgt.n	8008262 <_printf_float+0x3aa>
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081fe:	f104 0a1a 	add.w	sl, r4, #26
 8008202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	eba3 0309 	sub.w	r3, r3, r9
 800820c:	4543      	cmp	r3, r8
 800820e:	f77f af79 	ble.w	8008104 <_printf_float+0x24c>
 8008212:	2301      	movs	r3, #1
 8008214:	4652      	mov	r2, sl
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f aeaa 	beq.w	8007f76 <_printf_float+0xbe>
 8008222:	f108 0801 	add.w	r8, r8, #1
 8008226:	e7ec      	b.n	8008202 <_printf_float+0x34a>
 8008228:	4613      	mov	r3, r2
 800822a:	4631      	mov	r1, r6
 800822c:	4642      	mov	r2, r8
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	d1c0      	bne.n	80081b8 <_printf_float+0x300>
 8008236:	e69e      	b.n	8007f76 <_printf_float+0xbe>
 8008238:	2301      	movs	r3, #1
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	9205      	str	r2, [sp, #20]
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f ae97 	beq.w	8007f76 <_printf_float+0xbe>
 8008248:	9a05      	ldr	r2, [sp, #20]
 800824a:	f10b 0b01 	add.w	fp, fp, #1
 800824e:	e7b9      	b.n	80081c4 <_printf_float+0x30c>
 8008250:	ee18 3a10 	vmov	r3, s16
 8008254:	4652      	mov	r2, sl
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	d1be      	bne.n	80081de <_printf_float+0x326>
 8008260:	e689      	b.n	8007f76 <_printf_float+0xbe>
 8008262:	9a05      	ldr	r2, [sp, #20]
 8008264:	464b      	mov	r3, r9
 8008266:	4442      	add	r2, r8
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	d1c1      	bne.n	80081f6 <_printf_float+0x33e>
 8008272:	e680      	b.n	8007f76 <_printf_float+0xbe>
 8008274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008276:	2a01      	cmp	r2, #1
 8008278:	dc01      	bgt.n	800827e <_printf_float+0x3c6>
 800827a:	07db      	lsls	r3, r3, #31
 800827c:	d53a      	bpl.n	80082f4 <_printf_float+0x43c>
 800827e:	2301      	movs	r3, #1
 8008280:	4642      	mov	r2, r8
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae74 	beq.w	8007f76 <_printf_float+0xbe>
 800828e:	ee18 3a10 	vmov	r3, s16
 8008292:	4652      	mov	r2, sl
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	f43f ae6b 	beq.w	8007f76 <_printf_float+0xbe>
 80082a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082ac:	f7f8 fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 80082b0:	b9d8      	cbnz	r0, 80082ea <_printf_float+0x432>
 80082b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082b6:	f108 0201 	add.w	r2, r8, #1
 80082ba:	4631      	mov	r1, r6
 80082bc:	4628      	mov	r0, r5
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	d10e      	bne.n	80082e2 <_printf_float+0x42a>
 80082c4:	e657      	b.n	8007f76 <_printf_float+0xbe>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4652      	mov	r2, sl
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f ae50 	beq.w	8007f76 <_printf_float+0xbe>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	3b01      	subs	r3, #1
 80082de:	4543      	cmp	r3, r8
 80082e0:	dcf1      	bgt.n	80082c6 <_printf_float+0x40e>
 80082e2:	464b      	mov	r3, r9
 80082e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082e8:	e6da      	b.n	80080a0 <_printf_float+0x1e8>
 80082ea:	f04f 0800 	mov.w	r8, #0
 80082ee:	f104 0a1a 	add.w	sl, r4, #26
 80082f2:	e7f2      	b.n	80082da <_printf_float+0x422>
 80082f4:	2301      	movs	r3, #1
 80082f6:	4642      	mov	r2, r8
 80082f8:	e7df      	b.n	80082ba <_printf_float+0x402>
 80082fa:	2301      	movs	r3, #1
 80082fc:	464a      	mov	r2, r9
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f ae36 	beq.w	8007f76 <_printf_float+0xbe>
 800830a:	f108 0801 	add.w	r8, r8, #1
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008312:	1a5b      	subs	r3, r3, r1
 8008314:	4543      	cmp	r3, r8
 8008316:	dcf0      	bgt.n	80082fa <_printf_float+0x442>
 8008318:	e6f8      	b.n	800810c <_printf_float+0x254>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	f104 0919 	add.w	r9, r4, #25
 8008322:	e7f4      	b.n	800830e <_printf_float+0x456>

08008324 <_printf_common>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	4616      	mov	r6, r2
 800832a:	4699      	mov	r9, r3
 800832c:	688a      	ldr	r2, [r1, #8]
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008334:	4293      	cmp	r3, r2
 8008336:	bfb8      	it	lt
 8008338:	4613      	movlt	r3, r2
 800833a:	6033      	str	r3, [r6, #0]
 800833c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008340:	4607      	mov	r7, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b10a      	cbz	r2, 800834a <_printf_common+0x26>
 8008346:	3301      	adds	r3, #1
 8008348:	6033      	str	r3, [r6, #0]
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	0699      	lsls	r1, r3, #26
 800834e:	bf42      	ittt	mi
 8008350:	6833      	ldrmi	r3, [r6, #0]
 8008352:	3302      	addmi	r3, #2
 8008354:	6033      	strmi	r3, [r6, #0]
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	f015 0506 	ands.w	r5, r5, #6
 800835c:	d106      	bne.n	800836c <_printf_common+0x48>
 800835e:	f104 0a19 	add.w	sl, r4, #25
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	6832      	ldr	r2, [r6, #0]
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	42ab      	cmp	r3, r5
 800836a:	dc26      	bgt.n	80083ba <_printf_common+0x96>
 800836c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008370:	1e13      	subs	r3, r2, #0
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	2301      	movne	r3, #1
 8008378:	0692      	lsls	r2, r2, #26
 800837a:	d42b      	bmi.n	80083d4 <_printf_common+0xb0>
 800837c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008380:	4649      	mov	r1, r9
 8008382:	4638      	mov	r0, r7
 8008384:	47c0      	blx	r8
 8008386:	3001      	adds	r0, #1
 8008388:	d01e      	beq.n	80083c8 <_printf_common+0xa4>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	6922      	ldr	r2, [r4, #16]
 800838e:	f003 0306 	and.w	r3, r3, #6
 8008392:	2b04      	cmp	r3, #4
 8008394:	bf02      	ittt	eq
 8008396:	68e5      	ldreq	r5, [r4, #12]
 8008398:	6833      	ldreq	r3, [r6, #0]
 800839a:	1aed      	subeq	r5, r5, r3
 800839c:	68a3      	ldr	r3, [r4, #8]
 800839e:	bf0c      	ite	eq
 80083a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a4:	2500      	movne	r5, #0
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bfc4      	itt	gt
 80083aa:	1a9b      	subgt	r3, r3, r2
 80083ac:	18ed      	addgt	r5, r5, r3
 80083ae:	2600      	movs	r6, #0
 80083b0:	341a      	adds	r4, #26
 80083b2:	42b5      	cmp	r5, r6
 80083b4:	d11a      	bne.n	80083ec <_printf_common+0xc8>
 80083b6:	2000      	movs	r0, #0
 80083b8:	e008      	b.n	80083cc <_printf_common+0xa8>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4652      	mov	r2, sl
 80083be:	4649      	mov	r1, r9
 80083c0:	4638      	mov	r0, r7
 80083c2:	47c0      	blx	r8
 80083c4:	3001      	adds	r0, #1
 80083c6:	d103      	bne.n	80083d0 <_printf_common+0xac>
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d0:	3501      	adds	r5, #1
 80083d2:	e7c6      	b.n	8008362 <_printf_common+0x3e>
 80083d4:	18e1      	adds	r1, r4, r3
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	2030      	movs	r0, #48	; 0x30
 80083da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083de:	4422      	add	r2, r4
 80083e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e8:	3302      	adds	r3, #2
 80083ea:	e7c7      	b.n	800837c <_printf_common+0x58>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4622      	mov	r2, r4
 80083f0:	4649      	mov	r1, r9
 80083f2:	4638      	mov	r0, r7
 80083f4:	47c0      	blx	r8
 80083f6:	3001      	adds	r0, #1
 80083f8:	d0e6      	beq.n	80083c8 <_printf_common+0xa4>
 80083fa:	3601      	adds	r6, #1
 80083fc:	e7d9      	b.n	80083b2 <_printf_common+0x8e>
	...

08008400 <_printf_i>:
 8008400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	7e0f      	ldrb	r7, [r1, #24]
 8008406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008408:	2f78      	cmp	r7, #120	; 0x78
 800840a:	4691      	mov	r9, r2
 800840c:	4680      	mov	r8, r0
 800840e:	460c      	mov	r4, r1
 8008410:	469a      	mov	sl, r3
 8008412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008416:	d807      	bhi.n	8008428 <_printf_i+0x28>
 8008418:	2f62      	cmp	r7, #98	; 0x62
 800841a:	d80a      	bhi.n	8008432 <_printf_i+0x32>
 800841c:	2f00      	cmp	r7, #0
 800841e:	f000 80d4 	beq.w	80085ca <_printf_i+0x1ca>
 8008422:	2f58      	cmp	r7, #88	; 0x58
 8008424:	f000 80c0 	beq.w	80085a8 <_printf_i+0x1a8>
 8008428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800842c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008430:	e03a      	b.n	80084a8 <_printf_i+0xa8>
 8008432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008436:	2b15      	cmp	r3, #21
 8008438:	d8f6      	bhi.n	8008428 <_printf_i+0x28>
 800843a:	a101      	add	r1, pc, #4	; (adr r1, 8008440 <_printf_i+0x40>)
 800843c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008440:	08008499 	.word	0x08008499
 8008444:	080084ad 	.word	0x080084ad
 8008448:	08008429 	.word	0x08008429
 800844c:	08008429 	.word	0x08008429
 8008450:	08008429 	.word	0x08008429
 8008454:	08008429 	.word	0x08008429
 8008458:	080084ad 	.word	0x080084ad
 800845c:	08008429 	.word	0x08008429
 8008460:	08008429 	.word	0x08008429
 8008464:	08008429 	.word	0x08008429
 8008468:	08008429 	.word	0x08008429
 800846c:	080085b1 	.word	0x080085b1
 8008470:	080084d9 	.word	0x080084d9
 8008474:	0800856b 	.word	0x0800856b
 8008478:	08008429 	.word	0x08008429
 800847c:	08008429 	.word	0x08008429
 8008480:	080085d3 	.word	0x080085d3
 8008484:	08008429 	.word	0x08008429
 8008488:	080084d9 	.word	0x080084d9
 800848c:	08008429 	.word	0x08008429
 8008490:	08008429 	.word	0x08008429
 8008494:	08008573 	.word	0x08008573
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a8:	2301      	movs	r3, #1
 80084aa:	e09f      	b.n	80085ec <_printf_i+0x1ec>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	0607      	lsls	r7, r0, #24
 80084b2:	f103 0104 	add.w	r1, r3, #4
 80084b6:	6029      	str	r1, [r5, #0]
 80084b8:	d501      	bpl.n	80084be <_printf_i+0xbe>
 80084ba:	681e      	ldr	r6, [r3, #0]
 80084bc:	e003      	b.n	80084c6 <_printf_i+0xc6>
 80084be:	0646      	lsls	r6, r0, #25
 80084c0:	d5fb      	bpl.n	80084ba <_printf_i+0xba>
 80084c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	da03      	bge.n	80084d2 <_printf_i+0xd2>
 80084ca:	232d      	movs	r3, #45	; 0x2d
 80084cc:	4276      	negs	r6, r6
 80084ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d2:	485a      	ldr	r0, [pc, #360]	; (800863c <_printf_i+0x23c>)
 80084d4:	230a      	movs	r3, #10
 80084d6:	e012      	b.n	80084fe <_printf_i+0xfe>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	6820      	ldr	r0, [r4, #0]
 80084dc:	1d19      	adds	r1, r3, #4
 80084de:	6029      	str	r1, [r5, #0]
 80084e0:	0605      	lsls	r5, r0, #24
 80084e2:	d501      	bpl.n	80084e8 <_printf_i+0xe8>
 80084e4:	681e      	ldr	r6, [r3, #0]
 80084e6:	e002      	b.n	80084ee <_printf_i+0xee>
 80084e8:	0641      	lsls	r1, r0, #25
 80084ea:	d5fb      	bpl.n	80084e4 <_printf_i+0xe4>
 80084ec:	881e      	ldrh	r6, [r3, #0]
 80084ee:	4853      	ldr	r0, [pc, #332]	; (800863c <_printf_i+0x23c>)
 80084f0:	2f6f      	cmp	r7, #111	; 0x6f
 80084f2:	bf0c      	ite	eq
 80084f4:	2308      	moveq	r3, #8
 80084f6:	230a      	movne	r3, #10
 80084f8:	2100      	movs	r1, #0
 80084fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084fe:	6865      	ldr	r5, [r4, #4]
 8008500:	60a5      	str	r5, [r4, #8]
 8008502:	2d00      	cmp	r5, #0
 8008504:	bfa2      	ittt	ge
 8008506:	6821      	ldrge	r1, [r4, #0]
 8008508:	f021 0104 	bicge.w	r1, r1, #4
 800850c:	6021      	strge	r1, [r4, #0]
 800850e:	b90e      	cbnz	r6, 8008514 <_printf_i+0x114>
 8008510:	2d00      	cmp	r5, #0
 8008512:	d04b      	beq.n	80085ac <_printf_i+0x1ac>
 8008514:	4615      	mov	r5, r2
 8008516:	fbb6 f1f3 	udiv	r1, r6, r3
 800851a:	fb03 6711 	mls	r7, r3, r1, r6
 800851e:	5dc7      	ldrb	r7, [r0, r7]
 8008520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008524:	4637      	mov	r7, r6
 8008526:	42bb      	cmp	r3, r7
 8008528:	460e      	mov	r6, r1
 800852a:	d9f4      	bls.n	8008516 <_printf_i+0x116>
 800852c:	2b08      	cmp	r3, #8
 800852e:	d10b      	bne.n	8008548 <_printf_i+0x148>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	07de      	lsls	r6, r3, #31
 8008534:	d508      	bpl.n	8008548 <_printf_i+0x148>
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	6861      	ldr	r1, [r4, #4]
 800853a:	4299      	cmp	r1, r3
 800853c:	bfde      	ittt	le
 800853e:	2330      	movle	r3, #48	; 0x30
 8008540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008548:	1b52      	subs	r2, r2, r5
 800854a:	6122      	str	r2, [r4, #16]
 800854c:	f8cd a000 	str.w	sl, [sp]
 8008550:	464b      	mov	r3, r9
 8008552:	aa03      	add	r2, sp, #12
 8008554:	4621      	mov	r1, r4
 8008556:	4640      	mov	r0, r8
 8008558:	f7ff fee4 	bl	8008324 <_printf_common>
 800855c:	3001      	adds	r0, #1
 800855e:	d14a      	bne.n	80085f6 <_printf_i+0x1f6>
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	b004      	add	sp, #16
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f043 0320 	orr.w	r3, r3, #32
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	4833      	ldr	r0, [pc, #204]	; (8008640 <_printf_i+0x240>)
 8008574:	2778      	movs	r7, #120	; 0x78
 8008576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	6829      	ldr	r1, [r5, #0]
 800857e:	061f      	lsls	r7, r3, #24
 8008580:	f851 6b04 	ldr.w	r6, [r1], #4
 8008584:	d402      	bmi.n	800858c <_printf_i+0x18c>
 8008586:	065f      	lsls	r7, r3, #25
 8008588:	bf48      	it	mi
 800858a:	b2b6      	uxthmi	r6, r6
 800858c:	07df      	lsls	r7, r3, #31
 800858e:	bf48      	it	mi
 8008590:	f043 0320 	orrmi.w	r3, r3, #32
 8008594:	6029      	str	r1, [r5, #0]
 8008596:	bf48      	it	mi
 8008598:	6023      	strmi	r3, [r4, #0]
 800859a:	b91e      	cbnz	r6, 80085a4 <_printf_i+0x1a4>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f023 0320 	bic.w	r3, r3, #32
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	2310      	movs	r3, #16
 80085a6:	e7a7      	b.n	80084f8 <_printf_i+0xf8>
 80085a8:	4824      	ldr	r0, [pc, #144]	; (800863c <_printf_i+0x23c>)
 80085aa:	e7e4      	b.n	8008576 <_printf_i+0x176>
 80085ac:	4615      	mov	r5, r2
 80085ae:	e7bd      	b.n	800852c <_printf_i+0x12c>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	6826      	ldr	r6, [r4, #0]
 80085b4:	6961      	ldr	r1, [r4, #20]
 80085b6:	1d18      	adds	r0, r3, #4
 80085b8:	6028      	str	r0, [r5, #0]
 80085ba:	0635      	lsls	r5, r6, #24
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0x1c4>
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	e002      	b.n	80085ca <_printf_i+0x1ca>
 80085c4:	0670      	lsls	r0, r6, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0x1c0>
 80085c8:	8019      	strh	r1, [r3, #0]
 80085ca:	2300      	movs	r3, #0
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	4615      	mov	r5, r2
 80085d0:	e7bc      	b.n	800854c <_printf_i+0x14c>
 80085d2:	682b      	ldr	r3, [r5, #0]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	602a      	str	r2, [r5, #0]
 80085d8:	681d      	ldr	r5, [r3, #0]
 80085da:	6862      	ldr	r2, [r4, #4]
 80085dc:	2100      	movs	r1, #0
 80085de:	4628      	mov	r0, r5
 80085e0:	f7f7 fe16 	bl	8000210 <memchr>
 80085e4:	b108      	cbz	r0, 80085ea <_printf_i+0x1ea>
 80085e6:	1b40      	subs	r0, r0, r5
 80085e8:	6060      	str	r0, [r4, #4]
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	2300      	movs	r3, #0
 80085f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f4:	e7aa      	b.n	800854c <_printf_i+0x14c>
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d0ad      	beq.n	8008560 <_printf_i+0x160>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	079b      	lsls	r3, r3, #30
 8008608:	d413      	bmi.n	8008632 <_printf_i+0x232>
 800860a:	68e0      	ldr	r0, [r4, #12]
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	4298      	cmp	r0, r3
 8008610:	bfb8      	it	lt
 8008612:	4618      	movlt	r0, r3
 8008614:	e7a6      	b.n	8008564 <_printf_i+0x164>
 8008616:	2301      	movs	r3, #1
 8008618:	4632      	mov	r2, r6
 800861a:	4649      	mov	r1, r9
 800861c:	4640      	mov	r0, r8
 800861e:	47d0      	blx	sl
 8008620:	3001      	adds	r0, #1
 8008622:	d09d      	beq.n	8008560 <_printf_i+0x160>
 8008624:	3501      	adds	r5, #1
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	9903      	ldr	r1, [sp, #12]
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	42ab      	cmp	r3, r5
 800862e:	dcf2      	bgt.n	8008616 <_printf_i+0x216>
 8008630:	e7eb      	b.n	800860a <_printf_i+0x20a>
 8008632:	2500      	movs	r5, #0
 8008634:	f104 0619 	add.w	r6, r4, #25
 8008638:	e7f5      	b.n	8008626 <_printf_i+0x226>
 800863a:	bf00      	nop
 800863c:	0800a746 	.word	0x0800a746
 8008640:	0800a757 	.word	0x0800a757

08008644 <std>:
 8008644:	2300      	movs	r3, #0
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	e9c0 3300 	strd	r3, r3, [r0]
 800864e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008652:	6083      	str	r3, [r0, #8]
 8008654:	8181      	strh	r1, [r0, #12]
 8008656:	6643      	str	r3, [r0, #100]	; 0x64
 8008658:	81c2      	strh	r2, [r0, #14]
 800865a:	6183      	str	r3, [r0, #24]
 800865c:	4619      	mov	r1, r3
 800865e:	2208      	movs	r2, #8
 8008660:	305c      	adds	r0, #92	; 0x5c
 8008662:	f000 f8f4 	bl	800884e <memset>
 8008666:	4b0d      	ldr	r3, [pc, #52]	; (800869c <std+0x58>)
 8008668:	6263      	str	r3, [r4, #36]	; 0x24
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <std+0x5c>)
 800866c:	62a3      	str	r3, [r4, #40]	; 0x28
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <std+0x60>)
 8008670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008672:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <std+0x64>)
 8008674:	6323      	str	r3, [r4, #48]	; 0x30
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <std+0x68>)
 8008678:	6224      	str	r4, [r4, #32]
 800867a:	429c      	cmp	r4, r3
 800867c:	d006      	beq.n	800868c <std+0x48>
 800867e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008682:	4294      	cmp	r4, r2
 8008684:	d002      	beq.n	800868c <std+0x48>
 8008686:	33d0      	adds	r3, #208	; 0xd0
 8008688:	429c      	cmp	r4, r3
 800868a:	d105      	bne.n	8008698 <std+0x54>
 800868c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008694:	f000 b958 	b.w	8008948 <__retarget_lock_init_recursive>
 8008698:	bd10      	pop	{r4, pc}
 800869a:	bf00      	nop
 800869c:	080087c9 	.word	0x080087c9
 80086a0:	080087eb 	.word	0x080087eb
 80086a4:	08008823 	.word	0x08008823
 80086a8:	08008847 	.word	0x08008847
 80086ac:	20000928 	.word	0x20000928

080086b0 <stdio_exit_handler>:
 80086b0:	4a02      	ldr	r2, [pc, #8]	; (80086bc <stdio_exit_handler+0xc>)
 80086b2:	4903      	ldr	r1, [pc, #12]	; (80086c0 <stdio_exit_handler+0x10>)
 80086b4:	4803      	ldr	r0, [pc, #12]	; (80086c4 <stdio_exit_handler+0x14>)
 80086b6:	f000 b869 	b.w	800878c <_fwalk_sglue>
 80086ba:	bf00      	nop
 80086bc:	20000028 	.word	0x20000028
 80086c0:	0800a049 	.word	0x0800a049
 80086c4:	20000034 	.word	0x20000034

080086c8 <cleanup_stdio>:
 80086c8:	6841      	ldr	r1, [r0, #4]
 80086ca:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <cleanup_stdio+0x34>)
 80086cc:	4299      	cmp	r1, r3
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	d001      	beq.n	80086d8 <cleanup_stdio+0x10>
 80086d4:	f001 fcb8 	bl	800a048 <_fflush_r>
 80086d8:	68a1      	ldr	r1, [r4, #8]
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <cleanup_stdio+0x38>)
 80086dc:	4299      	cmp	r1, r3
 80086de:	d002      	beq.n	80086e6 <cleanup_stdio+0x1e>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 fcb1 	bl	800a048 <_fflush_r>
 80086e6:	68e1      	ldr	r1, [r4, #12]
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <cleanup_stdio+0x3c>)
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d004      	beq.n	80086f8 <cleanup_stdio+0x30>
 80086ee:	4620      	mov	r0, r4
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	f001 bca8 	b.w	800a048 <_fflush_r>
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	20000928 	.word	0x20000928
 8008700:	20000990 	.word	0x20000990
 8008704:	200009f8 	.word	0x200009f8

08008708 <global_stdio_init.part.0>:
 8008708:	b510      	push	{r4, lr}
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <global_stdio_init.part.0+0x30>)
 800870c:	4c0b      	ldr	r4, [pc, #44]	; (800873c <global_stdio_init.part.0+0x34>)
 800870e:	4a0c      	ldr	r2, [pc, #48]	; (8008740 <global_stdio_init.part.0+0x38>)
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	4620      	mov	r0, r4
 8008714:	2200      	movs	r2, #0
 8008716:	2104      	movs	r1, #4
 8008718:	f7ff ff94 	bl	8008644 <std>
 800871c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008720:	2201      	movs	r2, #1
 8008722:	2109      	movs	r1, #9
 8008724:	f7ff ff8e 	bl	8008644 <std>
 8008728:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800872c:	2202      	movs	r2, #2
 800872e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008732:	2112      	movs	r1, #18
 8008734:	f7ff bf86 	b.w	8008644 <std>
 8008738:	20000a60 	.word	0x20000a60
 800873c:	20000928 	.word	0x20000928
 8008740:	080086b1 	.word	0x080086b1

08008744 <__sfp_lock_acquire>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sfp_lock_acquire+0x8>)
 8008746:	f000 b900 	b.w	800894a <__retarget_lock_acquire_recursive>
 800874a:	bf00      	nop
 800874c:	20000a69 	.word	0x20000a69

08008750 <__sfp_lock_release>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__sfp_lock_release+0x8>)
 8008752:	f000 b8fb 	b.w	800894c <__retarget_lock_release_recursive>
 8008756:	bf00      	nop
 8008758:	20000a69 	.word	0x20000a69

0800875c <__sinit>:
 800875c:	b510      	push	{r4, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	f7ff fff0 	bl	8008744 <__sfp_lock_acquire>
 8008764:	6a23      	ldr	r3, [r4, #32]
 8008766:	b11b      	cbz	r3, 8008770 <__sinit+0x14>
 8008768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876c:	f7ff bff0 	b.w	8008750 <__sfp_lock_release>
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <__sinit+0x28>)
 8008772:	6223      	str	r3, [r4, #32]
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <__sinit+0x2c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f5      	bne.n	8008768 <__sinit+0xc>
 800877c:	f7ff ffc4 	bl	8008708 <global_stdio_init.part.0>
 8008780:	e7f2      	b.n	8008768 <__sinit+0xc>
 8008782:	bf00      	nop
 8008784:	080086c9 	.word	0x080086c9
 8008788:	20000a60 	.word	0x20000a60

0800878c <_fwalk_sglue>:
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008790:	4607      	mov	r7, r0
 8008792:	4688      	mov	r8, r1
 8008794:	4614      	mov	r4, r2
 8008796:	2600      	movs	r6, #0
 8008798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800879c:	f1b9 0901 	subs.w	r9, r9, #1
 80087a0:	d505      	bpl.n	80087ae <_fwalk_sglue+0x22>
 80087a2:	6824      	ldr	r4, [r4, #0]
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d1f7      	bne.n	8008798 <_fwalk_sglue+0xc>
 80087a8:	4630      	mov	r0, r6
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d907      	bls.n	80087c4 <_fwalk_sglue+0x38>
 80087b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087b8:	3301      	adds	r3, #1
 80087ba:	d003      	beq.n	80087c4 <_fwalk_sglue+0x38>
 80087bc:	4629      	mov	r1, r5
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	4306      	orrs	r6, r0
 80087c4:	3568      	adds	r5, #104	; 0x68
 80087c6:	e7e9      	b.n	800879c <_fwalk_sglue+0x10>

080087c8 <__sread>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	460c      	mov	r4, r1
 80087cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d0:	f000 f86c 	bl	80088ac <_read_r>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	bfab      	itete	ge
 80087d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087da:	89a3      	ldrhlt	r3, [r4, #12]
 80087dc:	181b      	addge	r3, r3, r0
 80087de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087e2:	bfac      	ite	ge
 80087e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087e6:	81a3      	strhlt	r3, [r4, #12]
 80087e8:	bd10      	pop	{r4, pc}

080087ea <__swrite>:
 80087ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ee:	461f      	mov	r7, r3
 80087f0:	898b      	ldrh	r3, [r1, #12]
 80087f2:	05db      	lsls	r3, r3, #23
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	4616      	mov	r6, r2
 80087fa:	d505      	bpl.n	8008808 <__swrite+0x1e>
 80087fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008800:	2302      	movs	r3, #2
 8008802:	2200      	movs	r2, #0
 8008804:	f000 f840 	bl	8008888 <_lseek_r>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800880e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	4632      	mov	r2, r6
 8008816:	463b      	mov	r3, r7
 8008818:	4628      	mov	r0, r5
 800881a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800881e:	f000 b857 	b.w	80088d0 <_write_r>

08008822 <__sseek>:
 8008822:	b510      	push	{r4, lr}
 8008824:	460c      	mov	r4, r1
 8008826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882a:	f000 f82d 	bl	8008888 <_lseek_r>
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	bf15      	itete	ne
 8008834:	6560      	strne	r0, [r4, #84]	; 0x54
 8008836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800883a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800883e:	81a3      	strheq	r3, [r4, #12]
 8008840:	bf18      	it	ne
 8008842:	81a3      	strhne	r3, [r4, #12]
 8008844:	bd10      	pop	{r4, pc}

08008846 <__sclose>:
 8008846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884a:	f000 b80d 	b.w	8008868 <_close_r>

0800884e <memset>:
 800884e:	4402      	add	r2, r0
 8008850:	4603      	mov	r3, r0
 8008852:	4293      	cmp	r3, r2
 8008854:	d100      	bne.n	8008858 <memset+0xa>
 8008856:	4770      	bx	lr
 8008858:	f803 1b01 	strb.w	r1, [r3], #1
 800885c:	e7f9      	b.n	8008852 <memset+0x4>
	...

08008860 <_localeconv_r>:
 8008860:	4800      	ldr	r0, [pc, #0]	; (8008864 <_localeconv_r+0x4>)
 8008862:	4770      	bx	lr
 8008864:	20000174 	.word	0x20000174

08008868 <_close_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d06      	ldr	r5, [pc, #24]	; (8008884 <_close_r+0x1c>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 fbf9 	bl	800206a <_close>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_close_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_close_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20000a64 	.word	0x20000a64

08008888 <_lseek_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_lseek_r+0x20>)
 800888c:	4604      	mov	r4, r0
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	2200      	movs	r2, #0
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7f9 fc0e 	bl	80020b8 <_lseek>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_lseek_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_lseek_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20000a64 	.word	0x20000a64

080088ac <_read_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	; (80088cc <_read_r+0x20>)
 80088b0:	4604      	mov	r4, r0
 80088b2:	4608      	mov	r0, r1
 80088b4:	4611      	mov	r1, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	602a      	str	r2, [r5, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f7f9 fb9c 	bl	8001ff8 <_read>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_read_r+0x1e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_read_r+0x1e>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000a64 	.word	0x20000a64

080088d0 <_write_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d07      	ldr	r5, [pc, #28]	; (80088f0 <_write_r+0x20>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	4611      	mov	r1, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	602a      	str	r2, [r5, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7f9 fba7 	bl	8002032 <_write>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_write_r+0x1e>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_write_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20000a64 	.word	0x20000a64

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000080 	.word	0x20000080

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4d0d      	ldr	r5, [pc, #52]	; (8008938 <__libc_init_array+0x38>)
 8008904:	4c0d      	ldr	r4, [pc, #52]	; (800893c <__libc_init_array+0x3c>)
 8008906:	1b64      	subs	r4, r4, r5
 8008908:	10a4      	asrs	r4, r4, #2
 800890a:	2600      	movs	r6, #0
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	4d0b      	ldr	r5, [pc, #44]	; (8008940 <__libc_init_array+0x40>)
 8008912:	4c0c      	ldr	r4, [pc, #48]	; (8008944 <__libc_init_array+0x44>)
 8008914:	f001 feec 	bl	800a6f0 <_init>
 8008918:	1b64      	subs	r4, r4, r5
 800891a:	10a4      	asrs	r4, r4, #2
 800891c:	2600      	movs	r6, #0
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f855 3b04 	ldr.w	r3, [r5], #4
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	0800aaac 	.word	0x0800aaac
 800893c:	0800aaac 	.word	0x0800aaac
 8008940:	0800aaac 	.word	0x0800aaac
 8008944:	0800aab0 	.word	0x0800aab0

08008948 <__retarget_lock_init_recursive>:
 8008948:	4770      	bx	lr

0800894a <__retarget_lock_acquire_recursive>:
 800894a:	4770      	bx	lr

0800894c <__retarget_lock_release_recursive>:
 800894c:	4770      	bx	lr

0800894e <quorem>:
 800894e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008952:	6903      	ldr	r3, [r0, #16]
 8008954:	690c      	ldr	r4, [r1, #16]
 8008956:	42a3      	cmp	r3, r4
 8008958:	4607      	mov	r7, r0
 800895a:	db7e      	blt.n	8008a5a <quorem+0x10c>
 800895c:	3c01      	subs	r4, #1
 800895e:	f101 0814 	add.w	r8, r1, #20
 8008962:	f100 0514 	add.w	r5, r0, #20
 8008966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008974:	3301      	adds	r3, #1
 8008976:	429a      	cmp	r2, r3
 8008978:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800897c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008980:	fbb2 f6f3 	udiv	r6, r2, r3
 8008984:	d331      	bcc.n	80089ea <quorem+0x9c>
 8008986:	f04f 0e00 	mov.w	lr, #0
 800898a:	4640      	mov	r0, r8
 800898c:	46ac      	mov	ip, r5
 800898e:	46f2      	mov	sl, lr
 8008990:	f850 2b04 	ldr.w	r2, [r0], #4
 8008994:	b293      	uxth	r3, r2
 8008996:	fb06 e303 	mla	r3, r6, r3, lr
 800899a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800899e:	0c1a      	lsrs	r2, r3, #16
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	ebaa 0303 	sub.w	r3, sl, r3
 80089a6:	f8dc a000 	ldr.w	sl, [ip]
 80089aa:	fa13 f38a 	uxtah	r3, r3, sl
 80089ae:	fb06 220e 	mla	r2, r6, lr, r2
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	9b00      	ldr	r3, [sp, #0]
 80089b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089ba:	b292      	uxth	r2, r2
 80089bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80089c8:	4581      	cmp	r9, r0
 80089ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ce:	f84c 3b04 	str.w	r3, [ip], #4
 80089d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089d6:	d2db      	bcs.n	8008990 <quorem+0x42>
 80089d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80089dc:	b92b      	cbnz	r3, 80089ea <quorem+0x9c>
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	429d      	cmp	r5, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	d32c      	bcc.n	8008a42 <quorem+0xf4>
 80089e8:	613c      	str	r4, [r7, #16]
 80089ea:	4638      	mov	r0, r7
 80089ec:	f001 f9a6 	bl	8009d3c <__mcmp>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	db22      	blt.n	8008a3a <quorem+0xec>
 80089f4:	3601      	adds	r6, #1
 80089f6:	4629      	mov	r1, r5
 80089f8:	2000      	movs	r0, #0
 80089fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80089fe:	f8d1 c000 	ldr.w	ip, [r1]
 8008a02:	b293      	uxth	r3, r2
 8008a04:	1ac3      	subs	r3, r0, r3
 8008a06:	0c12      	lsrs	r2, r2, #16
 8008a08:	fa13 f38c 	uxtah	r3, r3, ip
 8008a0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a1a:	45c1      	cmp	r9, r8
 8008a1c:	f841 3b04 	str.w	r3, [r1], #4
 8008a20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a24:	d2e9      	bcs.n	80089fa <quorem+0xac>
 8008a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a2e:	b922      	cbnz	r2, 8008a3a <quorem+0xec>
 8008a30:	3b04      	subs	r3, #4
 8008a32:	429d      	cmp	r5, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	d30a      	bcc.n	8008a4e <quorem+0x100>
 8008a38:	613c      	str	r4, [r7, #16]
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	b003      	add	sp, #12
 8008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	3b04      	subs	r3, #4
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	d1ce      	bne.n	80089e8 <quorem+0x9a>
 8008a4a:	3c01      	subs	r4, #1
 8008a4c:	e7c9      	b.n	80089e2 <quorem+0x94>
 8008a4e:	6812      	ldr	r2, [r2, #0]
 8008a50:	3b04      	subs	r3, #4
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d1f0      	bne.n	8008a38 <quorem+0xea>
 8008a56:	3c01      	subs	r4, #1
 8008a58:	e7eb      	b.n	8008a32 <quorem+0xe4>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	e7ee      	b.n	8008a3c <quorem+0xee>
	...

08008a60 <_dtoa_r>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	ed2d 8b04 	vpush	{d8-d9}
 8008a68:	69c5      	ldr	r5, [r0, #28]
 8008a6a:	b093      	sub	sp, #76	; 0x4c
 8008a6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a70:	ec57 6b10 	vmov	r6, r7, d0
 8008a74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a78:	9107      	str	r1, [sp, #28]
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a80:	b975      	cbnz	r5, 8008aa0 <_dtoa_r+0x40>
 8008a82:	2010      	movs	r0, #16
 8008a84:	f000 fe2a 	bl	80096dc <malloc>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	61e0      	str	r0, [r4, #28]
 8008a8c:	b920      	cbnz	r0, 8008a98 <_dtoa_r+0x38>
 8008a8e:	4bae      	ldr	r3, [pc, #696]	; (8008d48 <_dtoa_r+0x2e8>)
 8008a90:	21ef      	movs	r1, #239	; 0xef
 8008a92:	48ae      	ldr	r0, [pc, #696]	; (8008d4c <_dtoa_r+0x2ec>)
 8008a94:	f001 fb1e 	bl	800a0d4 <__assert_func>
 8008a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a9c:	6005      	str	r5, [r0, #0]
 8008a9e:	60c5      	str	r5, [r0, #12]
 8008aa0:	69e3      	ldr	r3, [r4, #28]
 8008aa2:	6819      	ldr	r1, [r3, #0]
 8008aa4:	b151      	cbz	r1, 8008abc <_dtoa_r+0x5c>
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	604a      	str	r2, [r1, #4]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4093      	lsls	r3, r2
 8008aae:	608b      	str	r3, [r1, #8]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 ff07 	bl	80098c4 <_Bfree>
 8008ab6:	69e3      	ldr	r3, [r4, #28]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	1e3b      	subs	r3, r7, #0
 8008abe:	bfbb      	ittet	lt
 8008ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ac4:	9303      	strlt	r3, [sp, #12]
 8008ac6:	2300      	movge	r3, #0
 8008ac8:	2201      	movlt	r2, #1
 8008aca:	bfac      	ite	ge
 8008acc:	f8c8 3000 	strge.w	r3, [r8]
 8008ad0:	f8c8 2000 	strlt.w	r2, [r8]
 8008ad4:	4b9e      	ldr	r3, [pc, #632]	; (8008d50 <_dtoa_r+0x2f0>)
 8008ad6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ada:	ea33 0308 	bics.w	r3, r3, r8
 8008ade:	d11b      	bne.n	8008b18 <_dtoa_r+0xb8>
 8008ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008aec:	4333      	orrs	r3, r6
 8008aee:	f000 8593 	beq.w	8009618 <_dtoa_r+0xbb8>
 8008af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af4:	b963      	cbnz	r3, 8008b10 <_dtoa_r+0xb0>
 8008af6:	4b97      	ldr	r3, [pc, #604]	; (8008d54 <_dtoa_r+0x2f4>)
 8008af8:	e027      	b.n	8008b4a <_dtoa_r+0xea>
 8008afa:	4b97      	ldr	r3, [pc, #604]	; (8008d58 <_dtoa_r+0x2f8>)
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	9800      	ldr	r0, [sp, #0]
 8008b06:	b013      	add	sp, #76	; 0x4c
 8008b08:	ecbd 8b04 	vpop	{d8-d9}
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b10:	4b90      	ldr	r3, [pc, #576]	; (8008d54 <_dtoa_r+0x2f4>)
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	3303      	adds	r3, #3
 8008b16:	e7f3      	b.n	8008b00 <_dtoa_r+0xa0>
 8008b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	ec51 0b17 	vmov	r0, r1, d7
 8008b22:	eeb0 8a47 	vmov.f32	s16, s14
 8008b26:	eef0 8a67 	vmov.f32	s17, s15
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f7f7 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8008b30:	4681      	mov	r9, r0
 8008b32:	b160      	cbz	r0, 8008b4e <_dtoa_r+0xee>
 8008b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b36:	2301      	movs	r3, #1
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 8568 	beq.w	8009612 <_dtoa_r+0xbb2>
 8008b42:	4b86      	ldr	r3, [pc, #536]	; (8008d5c <_dtoa_r+0x2fc>)
 8008b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	e7da      	b.n	8008b04 <_dtoa_r+0xa4>
 8008b4e:	aa10      	add	r2, sp, #64	; 0x40
 8008b50:	a911      	add	r1, sp, #68	; 0x44
 8008b52:	4620      	mov	r0, r4
 8008b54:	eeb0 0a48 	vmov.f32	s0, s16
 8008b58:	eef0 0a68 	vmov.f32	s1, s17
 8008b5c:	f001 f994 	bl	8009e88 <__d2b>
 8008b60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b64:	4682      	mov	sl, r0
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	d07f      	beq.n	8008c6a <_dtoa_r+0x20a>
 8008b6a:	ee18 3a90 	vmov	r3, s17
 8008b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b76:	ec51 0b18 	vmov	r0, r1, d8
 8008b7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b86:	4619      	mov	r1, r3
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b75      	ldr	r3, [pc, #468]	; (8008d60 <_dtoa_r+0x300>)
 8008b8c:	f7f7 fb9c 	bl	80002c8 <__aeabi_dsub>
 8008b90:	a367      	add	r3, pc, #412	; (adr r3, 8008d30 <_dtoa_r+0x2d0>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fd4f 	bl	8000638 <__aeabi_dmul>
 8008b9a:	a367      	add	r3, pc, #412	; (adr r3, 8008d38 <_dtoa_r+0x2d8>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f7f7 fb94 	bl	80002cc <__adddf3>
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	460f      	mov	r7, r1
 8008baa:	f7f7 fcdb 	bl	8000564 <__aeabi_i2d>
 8008bae:	a364      	add	r3, pc, #400	; (adr r3, 8008d40 <_dtoa_r+0x2e0>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 fd40 	bl	8000638 <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fb84 	bl	80002cc <__adddf3>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	f7f7 ffe6 	bl	8000b98 <__aeabi_d2iz>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4683      	mov	fp, r0
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 ffa1 	bl	8000b1c <__aeabi_dcmplt>
 8008bda:	b148      	cbz	r0, 8008bf0 <_dtoa_r+0x190>
 8008bdc:	4658      	mov	r0, fp
 8008bde:	f7f7 fcc1 	bl	8000564 <__aeabi_i2d>
 8008be2:	4632      	mov	r2, r6
 8008be4:	463b      	mov	r3, r7
 8008be6:	f7f7 ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 8008bea:	b908      	cbnz	r0, 8008bf0 <_dtoa_r+0x190>
 8008bec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bf0:	f1bb 0f16 	cmp.w	fp, #22
 8008bf4:	d857      	bhi.n	8008ca6 <_dtoa_r+0x246>
 8008bf6:	4b5b      	ldr	r3, [pc, #364]	; (8008d64 <_dtoa_r+0x304>)
 8008bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	ec51 0b18 	vmov	r0, r1, d8
 8008c04:	f7f7 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d04e      	beq.n	8008caa <_dtoa_r+0x24a>
 8008c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c10:	2300      	movs	r3, #0
 8008c12:	930c      	str	r3, [sp, #48]	; 0x30
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	1b5b      	subs	r3, r3, r5
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	bf45      	ittet	mi
 8008c1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c20:	9305      	strmi	r3, [sp, #20]
 8008c22:	2300      	movpl	r3, #0
 8008c24:	2300      	movmi	r3, #0
 8008c26:	9206      	str	r2, [sp, #24]
 8008c28:	bf54      	ite	pl
 8008c2a:	9305      	strpl	r3, [sp, #20]
 8008c2c:	9306      	strmi	r3, [sp, #24]
 8008c2e:	f1bb 0f00 	cmp.w	fp, #0
 8008c32:	db3c      	blt.n	8008cae <_dtoa_r+0x24e>
 8008c34:	9b06      	ldr	r3, [sp, #24]
 8008c36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c3a:	445b      	add	r3, fp
 8008c3c:	9306      	str	r3, [sp, #24]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d868      	bhi.n	8008d1a <_dtoa_r+0x2ba>
 8008c48:	2b05      	cmp	r3, #5
 8008c4a:	bfc4      	itt	gt
 8008c4c:	3b04      	subgt	r3, #4
 8008c4e:	9307      	strgt	r3, [sp, #28]
 8008c50:	9b07      	ldr	r3, [sp, #28]
 8008c52:	f1a3 0302 	sub.w	r3, r3, #2
 8008c56:	bfcc      	ite	gt
 8008c58:	2500      	movgt	r5, #0
 8008c5a:	2501      	movle	r5, #1
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	f200 8085 	bhi.w	8008d6c <_dtoa_r+0x30c>
 8008c62:	e8df f003 	tbb	[pc, r3]
 8008c66:	3b2e      	.short	0x3b2e
 8008c68:	5839      	.short	0x5839
 8008c6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c6e:	441d      	add	r5, r3
 8008c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	bfc1      	itttt	gt
 8008c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c88:	bfd6      	itet	le
 8008c8a:	f1c3 0320 	rsble	r3, r3, #32
 8008c8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c92:	fa06 f003 	lslle.w	r0, r6, r3
 8008c96:	f7f7 fc55 	bl	8000544 <__aeabi_ui2d>
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ca0:	3d01      	subs	r5, #1
 8008ca2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ca4:	e76f      	b.n	8008b86 <_dtoa_r+0x126>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7b3      	b.n	8008c12 <_dtoa_r+0x1b2>
 8008caa:	900c      	str	r0, [sp, #48]	; 0x30
 8008cac:	e7b2      	b.n	8008c14 <_dtoa_r+0x1b4>
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	eba3 030b 	sub.w	r3, r3, fp
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f1cb 0300 	rsb	r3, fp, #0
 8008cba:	9308      	str	r3, [sp, #32]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc0:	e7bf      	b.n	8008c42 <_dtoa_r+0x1e2>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dc52      	bgt.n	8008d72 <_dtoa_r+0x312>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8008cd6:	e00b      	b.n	8008cf0 <_dtoa_r+0x290>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e7f3      	b.n	8008cc4 <_dtoa_r+0x264>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce2:	445b      	add	r3, fp
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	bfb8      	it	lt
 8008cee:	2301      	movlt	r3, #1
 8008cf0:	69e0      	ldr	r0, [r4, #28]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	2204      	movs	r2, #4
 8008cf6:	f102 0614 	add.w	r6, r2, #20
 8008cfa:	429e      	cmp	r6, r3
 8008cfc:	d93d      	bls.n	8008d7a <_dtoa_r+0x31a>
 8008cfe:	6041      	str	r1, [r0, #4]
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fd9f 	bl	8009844 <_Balloc>
 8008d06:	9000      	str	r0, [sp, #0]
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d139      	bne.n	8008d80 <_dtoa_r+0x320>
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <_dtoa_r+0x308>)
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f240 11af 	movw	r1, #431	; 0x1af
 8008d14:	e6bd      	b.n	8008a92 <_dtoa_r+0x32>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e7e1      	b.n	8008cde <_dtoa_r+0x27e>
 8008d1a:	2501      	movs	r5, #1
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	9509      	str	r5, [sp, #36]	; 0x24
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2312      	movs	r3, #18
 8008d2e:	e7d1      	b.n	8008cd4 <_dtoa_r+0x274>
 8008d30:	636f4361 	.word	0x636f4361
 8008d34:	3fd287a7 	.word	0x3fd287a7
 8008d38:	8b60c8b3 	.word	0x8b60c8b3
 8008d3c:	3fc68a28 	.word	0x3fc68a28
 8008d40:	509f79fb 	.word	0x509f79fb
 8008d44:	3fd34413 	.word	0x3fd34413
 8008d48:	0800a775 	.word	0x0800a775
 8008d4c:	0800a78c 	.word	0x0800a78c
 8008d50:	7ff00000 	.word	0x7ff00000
 8008d54:	0800a771 	.word	0x0800a771
 8008d58:	0800a768 	.word	0x0800a768
 8008d5c:	0800a745 	.word	0x0800a745
 8008d60:	3ff80000 	.word	0x3ff80000
 8008d64:	0800a878 	.word	0x0800a878
 8008d68:	0800a7e4 	.word	0x0800a7e4
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d70:	e7d7      	b.n	8008d22 <_dtoa_r+0x2c2>
 8008d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	e7ba      	b.n	8008cf0 <_dtoa_r+0x290>
 8008d7a:	3101      	adds	r1, #1
 8008d7c:	0052      	lsls	r2, r2, #1
 8008d7e:	e7ba      	b.n	8008cf6 <_dtoa_r+0x296>
 8008d80:	69e3      	ldr	r3, [r4, #28]
 8008d82:	9a00      	ldr	r2, [sp, #0]
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	2b0e      	cmp	r3, #14
 8008d8a:	f200 80a8 	bhi.w	8008ede <_dtoa_r+0x47e>
 8008d8e:	2d00      	cmp	r5, #0
 8008d90:	f000 80a5 	beq.w	8008ede <_dtoa_r+0x47e>
 8008d94:	f1bb 0f00 	cmp.w	fp, #0
 8008d98:	dd38      	ble.n	8008e0c <_dtoa_r+0x3ac>
 8008d9a:	4bc0      	ldr	r3, [pc, #768]	; (800909c <_dtoa_r+0x63c>)
 8008d9c:	f00b 020f 	and.w	r2, fp, #15
 8008da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008da8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008dac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008db0:	d019      	beq.n	8008de6 <_dtoa_r+0x386>
 8008db2:	4bbb      	ldr	r3, [pc, #748]	; (80090a0 <_dtoa_r+0x640>)
 8008db4:	ec51 0b18 	vmov	r0, r1, d8
 8008db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dbc:	f7f7 fd66 	bl	800088c <__aeabi_ddiv>
 8008dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc4:	f008 080f 	and.w	r8, r8, #15
 8008dc8:	2503      	movs	r5, #3
 8008dca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090a0 <_dtoa_r+0x640>
 8008dce:	f1b8 0f00 	cmp.w	r8, #0
 8008dd2:	d10a      	bne.n	8008dea <_dtoa_r+0x38a>
 8008dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd8:	4632      	mov	r2, r6
 8008dda:	463b      	mov	r3, r7
 8008ddc:	f7f7 fd56 	bl	800088c <__aeabi_ddiv>
 8008de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de4:	e02b      	b.n	8008e3e <_dtoa_r+0x3de>
 8008de6:	2502      	movs	r5, #2
 8008de8:	e7ef      	b.n	8008dca <_dtoa_r+0x36a>
 8008dea:	f018 0f01 	tst.w	r8, #1
 8008dee:	d008      	beq.n	8008e02 <_dtoa_r+0x3a2>
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008df8:	f7f7 fc1e 	bl	8000638 <__aeabi_dmul>
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e06:	f109 0908 	add.w	r9, r9, #8
 8008e0a:	e7e0      	b.n	8008dce <_dtoa_r+0x36e>
 8008e0c:	f000 809f 	beq.w	8008f4e <_dtoa_r+0x4ee>
 8008e10:	f1cb 0600 	rsb	r6, fp, #0
 8008e14:	4ba1      	ldr	r3, [pc, #644]	; (800909c <_dtoa_r+0x63c>)
 8008e16:	4fa2      	ldr	r7, [pc, #648]	; (80090a0 <_dtoa_r+0x640>)
 8008e18:	f006 020f 	and.w	r2, r6, #15
 8008e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	ec51 0b18 	vmov	r0, r1, d8
 8008e28:	f7f7 fc06 	bl	8000638 <__aeabi_dmul>
 8008e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e30:	1136      	asrs	r6, r6, #4
 8008e32:	2300      	movs	r3, #0
 8008e34:	2502      	movs	r5, #2
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d17e      	bne.n	8008f38 <_dtoa_r+0x4d8>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1d0      	bne.n	8008de0 <_dtoa_r+0x380>
 8008e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8084 	beq.w	8008f52 <_dtoa_r+0x4f2>
 8008e4a:	4b96      	ldr	r3, [pc, #600]	; (80090a4 <_dtoa_r+0x644>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4640      	mov	r0, r8
 8008e50:	4649      	mov	r1, r9
 8008e52:	f7f7 fe63 	bl	8000b1c <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d07b      	beq.n	8008f52 <_dtoa_r+0x4f2>
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d078      	beq.n	8008f52 <_dtoa_r+0x4f2>
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dd39      	ble.n	8008eda <_dtoa_r+0x47a>
 8008e66:	4b90      	ldr	r3, [pc, #576]	; (80090a8 <_dtoa_r+0x648>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fbe3 	bl	8000638 <__aeabi_dmul>
 8008e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e76:	9e01      	ldr	r6, [sp, #4]
 8008e78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7f7 fb6e 	bl	8000564 <__aeabi_i2d>
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	f7f7 fbd4 	bl	8000638 <__aeabi_dmul>
 8008e90:	4b86      	ldr	r3, [pc, #536]	; (80090ac <_dtoa_r+0x64c>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	f7f7 fa1a 	bl	80002cc <__adddf3>
 8008e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea0:	9303      	str	r3, [sp, #12]
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d158      	bne.n	8008f58 <_dtoa_r+0x4f8>
 8008ea6:	4b82      	ldr	r3, [pc, #520]	; (80090b0 <_dtoa_r+0x650>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 fa0b 	bl	80002c8 <__aeabi_dsub>
 8008eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	4689      	mov	r9, r1
 8008eba:	f7f7 fe4d 	bl	8000b58 <__aeabi_dcmpgt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f040 8296 	bne.w	80093f0 <_dtoa_r+0x990>
 8008ec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ec8:	4640      	mov	r0, r8
 8008eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe24 	bl	8000b1c <__aeabi_dcmplt>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8289 	bne.w	80093ec <_dtoa_r+0x98c>
 8008eda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f2c0 814e 	blt.w	8009182 <_dtoa_r+0x722>
 8008ee6:	f1bb 0f0e 	cmp.w	fp, #14
 8008eea:	f300 814a 	bgt.w	8009182 <_dtoa_r+0x722>
 8008eee:	4b6b      	ldr	r3, [pc, #428]	; (800909c <_dtoa_r+0x63c>)
 8008ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f280 80dc 	bge.w	80090b8 <_dtoa_r+0x658>
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f300 80d8 	bgt.w	80090b8 <_dtoa_r+0x658>
 8008f08:	f040 826f 	bne.w	80093ea <_dtoa_r+0x98a>
 8008f0c:	4b68      	ldr	r3, [pc, #416]	; (80090b0 <_dtoa_r+0x650>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4640      	mov	r0, r8
 8008f12:	4649      	mov	r1, r9
 8008f14:	f7f7 fb90 	bl	8000638 <__aeabi_dmul>
 8008f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f1c:	f7f7 fe12 	bl	8000b44 <__aeabi_dcmpge>
 8008f20:	9e04      	ldr	r6, [sp, #16]
 8008f22:	4637      	mov	r7, r6
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f040 8245 	bne.w	80093b4 <_dtoa_r+0x954>
 8008f2a:	9d00      	ldr	r5, [sp, #0]
 8008f2c:	2331      	movs	r3, #49	; 0x31
 8008f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f32:	f10b 0b01 	add.w	fp, fp, #1
 8008f36:	e241      	b.n	80093bc <_dtoa_r+0x95c>
 8008f38:	07f2      	lsls	r2, r6, #31
 8008f3a:	d505      	bpl.n	8008f48 <_dtoa_r+0x4e8>
 8008f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	3501      	adds	r5, #1
 8008f46:	2301      	movs	r3, #1
 8008f48:	1076      	asrs	r6, r6, #1
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	e773      	b.n	8008e36 <_dtoa_r+0x3d6>
 8008f4e:	2502      	movs	r5, #2
 8008f50:	e775      	b.n	8008e3e <_dtoa_r+0x3de>
 8008f52:	9e04      	ldr	r6, [sp, #16]
 8008f54:	465f      	mov	r7, fp
 8008f56:	e792      	b.n	8008e7e <_dtoa_r+0x41e>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	4b50      	ldr	r3, [pc, #320]	; (800909c <_dtoa_r+0x63c>)
 8008f5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f60:	4431      	add	r1, r6
 8008f62:	9102      	str	r1, [sp, #8]
 8008f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f66:	eeb0 9a47 	vmov.f32	s18, s14
 8008f6a:	eef0 9a67 	vmov.f32	s19, s15
 8008f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d044      	beq.n	8009004 <_dtoa_r+0x5a4>
 8008f7a:	494e      	ldr	r1, [pc, #312]	; (80090b4 <_dtoa_r+0x654>)
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	f7f7 fc85 	bl	800088c <__aeabi_ddiv>
 8008f82:	ec53 2b19 	vmov	r2, r3, d9
 8008f86:	f7f7 f99f 	bl	80002c8 <__aeabi_dsub>
 8008f8a:	9d00      	ldr	r5, [sp, #0]
 8008f8c:	ec41 0b19 	vmov	d9, r0, r1
 8008f90:	4649      	mov	r1, r9
 8008f92:	4640      	mov	r0, r8
 8008f94:	f7f7 fe00 	bl	8000b98 <__aeabi_d2iz>
 8008f98:	4606      	mov	r6, r0
 8008f9a:	f7f7 fae3 	bl	8000564 <__aeabi_i2d>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f98f 	bl	80002c8 <__aeabi_dsub>
 8008faa:	3630      	adds	r6, #48	; 0x30
 8008fac:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb0:	ec53 2b19 	vmov	r2, r3, d9
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4689      	mov	r9, r1
 8008fb8:	f7f7 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d164      	bne.n	800908a <_dtoa_r+0x62a>
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	4937      	ldr	r1, [pc, #220]	; (80090a4 <_dtoa_r+0x644>)
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f7f7 f97e 	bl	80002c8 <__aeabi_dsub>
 8008fcc:	ec53 2b19 	vmov	r2, r3, d9
 8008fd0:	f7f7 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f040 80b6 	bne.w	8009146 <_dtoa_r+0x6e6>
 8008fda:	9b02      	ldr	r3, [sp, #8]
 8008fdc:	429d      	cmp	r5, r3
 8008fde:	f43f af7c 	beq.w	8008eda <_dtoa_r+0x47a>
 8008fe2:	4b31      	ldr	r3, [pc, #196]	; (80090a8 <_dtoa_r+0x648>)
 8008fe4:	ec51 0b19 	vmov	r0, r1, d9
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f7f7 fb25 	bl	8000638 <__aeabi_dmul>
 8008fee:	4b2e      	ldr	r3, [pc, #184]	; (80090a8 <_dtoa_r+0x648>)
 8008ff0:	ec41 0b19 	vmov	d9, r0, r1
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	f7f7 fb1d 	bl	8000638 <__aeabi_dmul>
 8008ffe:	4680      	mov	r8, r0
 8009000:	4689      	mov	r9, r1
 8009002:	e7c5      	b.n	8008f90 <_dtoa_r+0x530>
 8009004:	ec51 0b17 	vmov	r0, r1, d7
 8009008:	f7f7 fb16 	bl	8000638 <__aeabi_dmul>
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	9d00      	ldr	r5, [sp, #0]
 8009010:	930f      	str	r3, [sp, #60]	; 0x3c
 8009012:	ec41 0b19 	vmov	d9, r0, r1
 8009016:	4649      	mov	r1, r9
 8009018:	4640      	mov	r0, r8
 800901a:	f7f7 fdbd 	bl	8000b98 <__aeabi_d2iz>
 800901e:	4606      	mov	r6, r0
 8009020:	f7f7 faa0 	bl	8000564 <__aeabi_i2d>
 8009024:	3630      	adds	r6, #48	; 0x30
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f94b 	bl	80002c8 <__aeabi_dsub>
 8009032:	f805 6b01 	strb.w	r6, [r5], #1
 8009036:	9b02      	ldr	r3, [sp, #8]
 8009038:	429d      	cmp	r5, r3
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	d124      	bne.n	800908e <_dtoa_r+0x62e>
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <_dtoa_r+0x654>)
 8009046:	ec51 0b19 	vmov	r0, r1, d9
 800904a:	f7f7 f93f 	bl	80002cc <__adddf3>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 fd7f 	bl	8000b58 <__aeabi_dcmpgt>
 800905a:	2800      	cmp	r0, #0
 800905c:	d173      	bne.n	8009146 <_dtoa_r+0x6e6>
 800905e:	ec53 2b19 	vmov	r2, r3, d9
 8009062:	4914      	ldr	r1, [pc, #80]	; (80090b4 <_dtoa_r+0x654>)
 8009064:	2000      	movs	r0, #0
 8009066:	f7f7 f92f 	bl	80002c8 <__aeabi_dsub>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	f7f7 fd53 	bl	8000b1c <__aeabi_dcmplt>
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f af2f 	beq.w	8008eda <_dtoa_r+0x47a>
 800907c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800907e:	1e6b      	subs	r3, r5, #1
 8009080:	930f      	str	r3, [sp, #60]	; 0x3c
 8009082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009086:	2b30      	cmp	r3, #48	; 0x30
 8009088:	d0f8      	beq.n	800907c <_dtoa_r+0x61c>
 800908a:	46bb      	mov	fp, r7
 800908c:	e04a      	b.n	8009124 <_dtoa_r+0x6c4>
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <_dtoa_r+0x648>)
 8009090:	f7f7 fad2 	bl	8000638 <__aeabi_dmul>
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	e7bd      	b.n	8009016 <_dtoa_r+0x5b6>
 800909a:	bf00      	nop
 800909c:	0800a878 	.word	0x0800a878
 80090a0:	0800a850 	.word	0x0800a850
 80090a4:	3ff00000 	.word	0x3ff00000
 80090a8:	40240000 	.word	0x40240000
 80090ac:	401c0000 	.word	0x401c0000
 80090b0:	40140000 	.word	0x40140000
 80090b4:	3fe00000 	.word	0x3fe00000
 80090b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090bc:	9d00      	ldr	r5, [sp, #0]
 80090be:	4642      	mov	r2, r8
 80090c0:	464b      	mov	r3, r9
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 fbe1 	bl	800088c <__aeabi_ddiv>
 80090ca:	f7f7 fd65 	bl	8000b98 <__aeabi_d2iz>
 80090ce:	9001      	str	r0, [sp, #4]
 80090d0:	f7f7 fa48 	bl	8000564 <__aeabi_i2d>
 80090d4:	4642      	mov	r2, r8
 80090d6:	464b      	mov	r3, r9
 80090d8:	f7f7 faae 	bl	8000638 <__aeabi_dmul>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 f8f0 	bl	80002c8 <__aeabi_dsub>
 80090e8:	9e01      	ldr	r6, [sp, #4]
 80090ea:	9f04      	ldr	r7, [sp, #16]
 80090ec:	3630      	adds	r6, #48	; 0x30
 80090ee:	f805 6b01 	strb.w	r6, [r5], #1
 80090f2:	9e00      	ldr	r6, [sp, #0]
 80090f4:	1bae      	subs	r6, r5, r6
 80090f6:	42b7      	cmp	r7, r6
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	d134      	bne.n	8009168 <_dtoa_r+0x708>
 80090fe:	f7f7 f8e5 	bl	80002cc <__adddf3>
 8009102:	4642      	mov	r2, r8
 8009104:	464b      	mov	r3, r9
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	f7f7 fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800910e:	b9c8      	cbnz	r0, 8009144 <_dtoa_r+0x6e4>
 8009110:	4642      	mov	r2, r8
 8009112:	464b      	mov	r3, r9
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 800911c:	b110      	cbz	r0, 8009124 <_dtoa_r+0x6c4>
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	07db      	lsls	r3, r3, #31
 8009122:	d40f      	bmi.n	8009144 <_dtoa_r+0x6e4>
 8009124:	4651      	mov	r1, sl
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fbcc 	bl	80098c4 <_Bfree>
 800912c:	2300      	movs	r3, #0
 800912e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009130:	702b      	strb	r3, [r5, #0]
 8009132:	f10b 0301 	add.w	r3, fp, #1
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800913a:	2b00      	cmp	r3, #0
 800913c:	f43f ace2 	beq.w	8008b04 <_dtoa_r+0xa4>
 8009140:	601d      	str	r5, [r3, #0]
 8009142:	e4df      	b.n	8008b04 <_dtoa_r+0xa4>
 8009144:	465f      	mov	r7, fp
 8009146:	462b      	mov	r3, r5
 8009148:	461d      	mov	r5, r3
 800914a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800914e:	2a39      	cmp	r2, #57	; 0x39
 8009150:	d106      	bne.n	8009160 <_dtoa_r+0x700>
 8009152:	9a00      	ldr	r2, [sp, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d1f7      	bne.n	8009148 <_dtoa_r+0x6e8>
 8009158:	9900      	ldr	r1, [sp, #0]
 800915a:	2230      	movs	r2, #48	; 0x30
 800915c:	3701      	adds	r7, #1
 800915e:	700a      	strb	r2, [r1, #0]
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	3201      	adds	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	e790      	b.n	800908a <_dtoa_r+0x62a>
 8009168:	4ba3      	ldr	r3, [pc, #652]	; (80093f8 <_dtoa_r+0x998>)
 800916a:	2200      	movs	r2, #0
 800916c:	f7f7 fa64 	bl	8000638 <__aeabi_dmul>
 8009170:	2200      	movs	r2, #0
 8009172:	2300      	movs	r3, #0
 8009174:	4606      	mov	r6, r0
 8009176:	460f      	mov	r7, r1
 8009178:	f7f7 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800917c:	2800      	cmp	r0, #0
 800917e:	d09e      	beq.n	80090be <_dtoa_r+0x65e>
 8009180:	e7d0      	b.n	8009124 <_dtoa_r+0x6c4>
 8009182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009184:	2a00      	cmp	r2, #0
 8009186:	f000 80ca 	beq.w	800931e <_dtoa_r+0x8be>
 800918a:	9a07      	ldr	r2, [sp, #28]
 800918c:	2a01      	cmp	r2, #1
 800918e:	f300 80ad 	bgt.w	80092ec <_dtoa_r+0x88c>
 8009192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009194:	2a00      	cmp	r2, #0
 8009196:	f000 80a5 	beq.w	80092e4 <_dtoa_r+0x884>
 800919a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800919e:	9e08      	ldr	r6, [sp, #32]
 80091a0:	9d05      	ldr	r5, [sp, #20]
 80091a2:	9a05      	ldr	r2, [sp, #20]
 80091a4:	441a      	add	r2, r3
 80091a6:	9205      	str	r2, [sp, #20]
 80091a8:	9a06      	ldr	r2, [sp, #24]
 80091aa:	2101      	movs	r1, #1
 80091ac:	441a      	add	r2, r3
 80091ae:	4620      	mov	r0, r4
 80091b0:	9206      	str	r2, [sp, #24]
 80091b2:	f000 fc3d 	bl	8009a30 <__i2b>
 80091b6:	4607      	mov	r7, r0
 80091b8:	b165      	cbz	r5, 80091d4 <_dtoa_r+0x774>
 80091ba:	9b06      	ldr	r3, [sp, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd09      	ble.n	80091d4 <_dtoa_r+0x774>
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	9a05      	ldr	r2, [sp, #20]
 80091c4:	bfa8      	it	ge
 80091c6:	462b      	movge	r3, r5
 80091c8:	1ad2      	subs	r2, r2, r3
 80091ca:	9205      	str	r2, [sp, #20]
 80091cc:	9a06      	ldr	r2, [sp, #24]
 80091ce:	1aed      	subs	r5, r5, r3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	9306      	str	r3, [sp, #24]
 80091d4:	9b08      	ldr	r3, [sp, #32]
 80091d6:	b1f3      	cbz	r3, 8009216 <_dtoa_r+0x7b6>
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80a3 	beq.w	8009326 <_dtoa_r+0x8c6>
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	dd10      	ble.n	8009206 <_dtoa_r+0x7a6>
 80091e4:	4639      	mov	r1, r7
 80091e6:	4632      	mov	r2, r6
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fce1 	bl	8009bb0 <__pow5mult>
 80091ee:	4652      	mov	r2, sl
 80091f0:	4601      	mov	r1, r0
 80091f2:	4607      	mov	r7, r0
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fc31 	bl	8009a5c <__multiply>
 80091fa:	4651      	mov	r1, sl
 80091fc:	4680      	mov	r8, r0
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 fb60 	bl	80098c4 <_Bfree>
 8009204:	46c2      	mov	sl, r8
 8009206:	9b08      	ldr	r3, [sp, #32]
 8009208:	1b9a      	subs	r2, r3, r6
 800920a:	d004      	beq.n	8009216 <_dtoa_r+0x7b6>
 800920c:	4651      	mov	r1, sl
 800920e:	4620      	mov	r0, r4
 8009210:	f000 fcce 	bl	8009bb0 <__pow5mult>
 8009214:	4682      	mov	sl, r0
 8009216:	2101      	movs	r1, #1
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fc09 	bl	8009a30 <__i2b>
 800921e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009220:	2b00      	cmp	r3, #0
 8009222:	4606      	mov	r6, r0
 8009224:	f340 8081 	ble.w	800932a <_dtoa_r+0x8ca>
 8009228:	461a      	mov	r2, r3
 800922a:	4601      	mov	r1, r0
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fcbf 	bl	8009bb0 <__pow5mult>
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	2b01      	cmp	r3, #1
 8009236:	4606      	mov	r6, r0
 8009238:	dd7a      	ble.n	8009330 <_dtoa_r+0x8d0>
 800923a:	f04f 0800 	mov.w	r8, #0
 800923e:	6933      	ldr	r3, [r6, #16]
 8009240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009244:	6918      	ldr	r0, [r3, #16]
 8009246:	f000 fba5 	bl	8009994 <__hi0bits>
 800924a:	f1c0 0020 	rsb	r0, r0, #32
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	4418      	add	r0, r3
 8009252:	f010 001f 	ands.w	r0, r0, #31
 8009256:	f000 8094 	beq.w	8009382 <_dtoa_r+0x922>
 800925a:	f1c0 0320 	rsb	r3, r0, #32
 800925e:	2b04      	cmp	r3, #4
 8009260:	f340 8085 	ble.w	800936e <_dtoa_r+0x90e>
 8009264:	9b05      	ldr	r3, [sp, #20]
 8009266:	f1c0 001c 	rsb	r0, r0, #28
 800926a:	4403      	add	r3, r0
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	9b06      	ldr	r3, [sp, #24]
 8009270:	4403      	add	r3, r0
 8009272:	4405      	add	r5, r0
 8009274:	9306      	str	r3, [sp, #24]
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dd05      	ble.n	8009288 <_dtoa_r+0x828>
 800927c:	4651      	mov	r1, sl
 800927e:	461a      	mov	r2, r3
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fcef 	bl	8009c64 <__lshift>
 8009286:	4682      	mov	sl, r0
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	dd05      	ble.n	800929a <_dtoa_r+0x83a>
 800928e:	4631      	mov	r1, r6
 8009290:	461a      	mov	r2, r3
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fce6 	bl	8009c64 <__lshift>
 8009298:	4606      	mov	r6, r0
 800929a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800929c:	2b00      	cmp	r3, #0
 800929e:	d072      	beq.n	8009386 <_dtoa_r+0x926>
 80092a0:	4631      	mov	r1, r6
 80092a2:	4650      	mov	r0, sl
 80092a4:	f000 fd4a 	bl	8009d3c <__mcmp>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	da6c      	bge.n	8009386 <_dtoa_r+0x926>
 80092ac:	2300      	movs	r3, #0
 80092ae:	4651      	mov	r1, sl
 80092b0:	220a      	movs	r2, #10
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fb28 	bl	8009908 <__multadd>
 80092b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092be:	4682      	mov	sl, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 81b0 	beq.w	8009626 <_dtoa_r+0xbc6>
 80092c6:	2300      	movs	r3, #0
 80092c8:	4639      	mov	r1, r7
 80092ca:	220a      	movs	r2, #10
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fb1b 	bl	8009908 <__multadd>
 80092d2:	9b01      	ldr	r3, [sp, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	4607      	mov	r7, r0
 80092d8:	f300 8096 	bgt.w	8009408 <_dtoa_r+0x9a8>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	dc59      	bgt.n	8009396 <_dtoa_r+0x936>
 80092e2:	e091      	b.n	8009408 <_dtoa_r+0x9a8>
 80092e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092ea:	e758      	b.n	800919e <_dtoa_r+0x73e>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	1e5e      	subs	r6, r3, #1
 80092f0:	9b08      	ldr	r3, [sp, #32]
 80092f2:	42b3      	cmp	r3, r6
 80092f4:	bfbf      	itttt	lt
 80092f6:	9b08      	ldrlt	r3, [sp, #32]
 80092f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80092fa:	9608      	strlt	r6, [sp, #32]
 80092fc:	1af3      	sublt	r3, r6, r3
 80092fe:	bfb4      	ite	lt
 8009300:	18d2      	addlt	r2, r2, r3
 8009302:	1b9e      	subge	r6, r3, r6
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	bfbc      	itt	lt
 8009308:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800930a:	2600      	movlt	r6, #0
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfb7      	itett	lt
 8009310:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009314:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009318:	1a9d      	sublt	r5, r3, r2
 800931a:	2300      	movlt	r3, #0
 800931c:	e741      	b.n	80091a2 <_dtoa_r+0x742>
 800931e:	9e08      	ldr	r6, [sp, #32]
 8009320:	9d05      	ldr	r5, [sp, #20]
 8009322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009324:	e748      	b.n	80091b8 <_dtoa_r+0x758>
 8009326:	9a08      	ldr	r2, [sp, #32]
 8009328:	e770      	b.n	800920c <_dtoa_r+0x7ac>
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	2b01      	cmp	r3, #1
 800932e:	dc19      	bgt.n	8009364 <_dtoa_r+0x904>
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	b9bb      	cbnz	r3, 8009364 <_dtoa_r+0x904>
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800933a:	b99b      	cbnz	r3, 8009364 <_dtoa_r+0x904>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009342:	0d1b      	lsrs	r3, r3, #20
 8009344:	051b      	lsls	r3, r3, #20
 8009346:	b183      	cbz	r3, 800936a <_dtoa_r+0x90a>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	3301      	adds	r3, #1
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	9b06      	ldr	r3, [sp, #24]
 8009350:	3301      	adds	r3, #1
 8009352:	9306      	str	r3, [sp, #24]
 8009354:	f04f 0801 	mov.w	r8, #1
 8009358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935a:	2b00      	cmp	r3, #0
 800935c:	f47f af6f 	bne.w	800923e <_dtoa_r+0x7de>
 8009360:	2001      	movs	r0, #1
 8009362:	e774      	b.n	800924e <_dtoa_r+0x7ee>
 8009364:	f04f 0800 	mov.w	r8, #0
 8009368:	e7f6      	b.n	8009358 <_dtoa_r+0x8f8>
 800936a:	4698      	mov	r8, r3
 800936c:	e7f4      	b.n	8009358 <_dtoa_r+0x8f8>
 800936e:	d082      	beq.n	8009276 <_dtoa_r+0x816>
 8009370:	9a05      	ldr	r2, [sp, #20]
 8009372:	331c      	adds	r3, #28
 8009374:	441a      	add	r2, r3
 8009376:	9205      	str	r2, [sp, #20]
 8009378:	9a06      	ldr	r2, [sp, #24]
 800937a:	441a      	add	r2, r3
 800937c:	441d      	add	r5, r3
 800937e:	9206      	str	r2, [sp, #24]
 8009380:	e779      	b.n	8009276 <_dtoa_r+0x816>
 8009382:	4603      	mov	r3, r0
 8009384:	e7f4      	b.n	8009370 <_dtoa_r+0x910>
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	dc37      	bgt.n	80093fc <_dtoa_r+0x99c>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	2b02      	cmp	r3, #2
 8009390:	dd34      	ble.n	80093fc <_dtoa_r+0x99c>
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	b963      	cbnz	r3, 80093b4 <_dtoa_r+0x954>
 800939a:	4631      	mov	r1, r6
 800939c:	2205      	movs	r2, #5
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fab2 	bl	8009908 <__multadd>
 80093a4:	4601      	mov	r1, r0
 80093a6:	4606      	mov	r6, r0
 80093a8:	4650      	mov	r0, sl
 80093aa:	f000 fcc7 	bl	8009d3c <__mcmp>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f73f adbb 	bgt.w	8008f2a <_dtoa_r+0x4ca>
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	9d00      	ldr	r5, [sp, #0]
 80093b8:	ea6f 0b03 	mvn.w	fp, r3
 80093bc:	f04f 0800 	mov.w	r8, #0
 80093c0:	4631      	mov	r1, r6
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fa7e 	bl	80098c4 <_Bfree>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	f43f aeab 	beq.w	8009124 <_dtoa_r+0x6c4>
 80093ce:	f1b8 0f00 	cmp.w	r8, #0
 80093d2:	d005      	beq.n	80093e0 <_dtoa_r+0x980>
 80093d4:	45b8      	cmp	r8, r7
 80093d6:	d003      	beq.n	80093e0 <_dtoa_r+0x980>
 80093d8:	4641      	mov	r1, r8
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fa72 	bl	80098c4 <_Bfree>
 80093e0:	4639      	mov	r1, r7
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fa6e 	bl	80098c4 <_Bfree>
 80093e8:	e69c      	b.n	8009124 <_dtoa_r+0x6c4>
 80093ea:	2600      	movs	r6, #0
 80093ec:	4637      	mov	r7, r6
 80093ee:	e7e1      	b.n	80093b4 <_dtoa_r+0x954>
 80093f0:	46bb      	mov	fp, r7
 80093f2:	4637      	mov	r7, r6
 80093f4:	e599      	b.n	8008f2a <_dtoa_r+0x4ca>
 80093f6:	bf00      	nop
 80093f8:	40240000 	.word	0x40240000
 80093fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 80c8 	beq.w	8009594 <_dtoa_r+0xb34>
 8009404:	9b04      	ldr	r3, [sp, #16]
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	2d00      	cmp	r5, #0
 800940a:	dd05      	ble.n	8009418 <_dtoa_r+0x9b8>
 800940c:	4639      	mov	r1, r7
 800940e:	462a      	mov	r2, r5
 8009410:	4620      	mov	r0, r4
 8009412:	f000 fc27 	bl	8009c64 <__lshift>
 8009416:	4607      	mov	r7, r0
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d05b      	beq.n	80094d6 <_dtoa_r+0xa76>
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fa0f 	bl	8009844 <_Balloc>
 8009426:	4605      	mov	r5, r0
 8009428:	b928      	cbnz	r0, 8009436 <_dtoa_r+0x9d6>
 800942a:	4b83      	ldr	r3, [pc, #524]	; (8009638 <_dtoa_r+0xbd8>)
 800942c:	4602      	mov	r2, r0
 800942e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009432:	f7ff bb2e 	b.w	8008a92 <_dtoa_r+0x32>
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	3202      	adds	r2, #2
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	f107 010c 	add.w	r1, r7, #12
 8009440:	300c      	adds	r0, #12
 8009442:	f000 fe39 	bl	800a0b8 <memcpy>
 8009446:	2201      	movs	r2, #1
 8009448:	4629      	mov	r1, r5
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fc0a 	bl	8009c64 <__lshift>
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800945a:	4413      	add	r3, r2
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	9b02      	ldr	r3, [sp, #8]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	46b8      	mov	r8, r7
 8009466:	9306      	str	r3, [sp, #24]
 8009468:	4607      	mov	r7, r0
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	4631      	mov	r1, r6
 800946e:	3b01      	subs	r3, #1
 8009470:	4650      	mov	r0, sl
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	f7ff fa6b 	bl	800894e <quorem>
 8009478:	4641      	mov	r1, r8
 800947a:	9002      	str	r0, [sp, #8]
 800947c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009480:	4650      	mov	r0, sl
 8009482:	f000 fc5b 	bl	8009d3c <__mcmp>
 8009486:	463a      	mov	r2, r7
 8009488:	9005      	str	r0, [sp, #20]
 800948a:	4631      	mov	r1, r6
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fc71 	bl	8009d74 <__mdiff>
 8009492:	68c2      	ldr	r2, [r0, #12]
 8009494:	4605      	mov	r5, r0
 8009496:	bb02      	cbnz	r2, 80094da <_dtoa_r+0xa7a>
 8009498:	4601      	mov	r1, r0
 800949a:	4650      	mov	r0, sl
 800949c:	f000 fc4e 	bl	8009d3c <__mcmp>
 80094a0:	4602      	mov	r2, r0
 80094a2:	4629      	mov	r1, r5
 80094a4:	4620      	mov	r0, r4
 80094a6:	9209      	str	r2, [sp, #36]	; 0x24
 80094a8:	f000 fa0c 	bl	80098c4 <_Bfree>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b0:	9d04      	ldr	r5, [sp, #16]
 80094b2:	ea43 0102 	orr.w	r1, r3, r2
 80094b6:	9b06      	ldr	r3, [sp, #24]
 80094b8:	4319      	orrs	r1, r3
 80094ba:	d110      	bne.n	80094de <_dtoa_r+0xa7e>
 80094bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094c0:	d029      	beq.n	8009516 <_dtoa_r+0xab6>
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd02      	ble.n	80094ce <_dtoa_r+0xa6e>
 80094c8:	9b02      	ldr	r3, [sp, #8]
 80094ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	f883 9000 	strb.w	r9, [r3]
 80094d4:	e774      	b.n	80093c0 <_dtoa_r+0x960>
 80094d6:	4638      	mov	r0, r7
 80094d8:	e7ba      	b.n	8009450 <_dtoa_r+0x9f0>
 80094da:	2201      	movs	r2, #1
 80094dc:	e7e1      	b.n	80094a2 <_dtoa_r+0xa42>
 80094de:	9b05      	ldr	r3, [sp, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	db04      	blt.n	80094ee <_dtoa_r+0xa8e>
 80094e4:	9907      	ldr	r1, [sp, #28]
 80094e6:	430b      	orrs	r3, r1
 80094e8:	9906      	ldr	r1, [sp, #24]
 80094ea:	430b      	orrs	r3, r1
 80094ec:	d120      	bne.n	8009530 <_dtoa_r+0xad0>
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	dded      	ble.n	80094ce <_dtoa_r+0xa6e>
 80094f2:	4651      	mov	r1, sl
 80094f4:	2201      	movs	r2, #1
 80094f6:	4620      	mov	r0, r4
 80094f8:	f000 fbb4 	bl	8009c64 <__lshift>
 80094fc:	4631      	mov	r1, r6
 80094fe:	4682      	mov	sl, r0
 8009500:	f000 fc1c 	bl	8009d3c <__mcmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	dc03      	bgt.n	8009510 <_dtoa_r+0xab0>
 8009508:	d1e1      	bne.n	80094ce <_dtoa_r+0xa6e>
 800950a:	f019 0f01 	tst.w	r9, #1
 800950e:	d0de      	beq.n	80094ce <_dtoa_r+0xa6e>
 8009510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009514:	d1d8      	bne.n	80094c8 <_dtoa_r+0xa68>
 8009516:	9a01      	ldr	r2, [sp, #4]
 8009518:	2339      	movs	r3, #57	; 0x39
 800951a:	7013      	strb	r3, [r2, #0]
 800951c:	462b      	mov	r3, r5
 800951e:	461d      	mov	r5, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009526:	2a39      	cmp	r2, #57	; 0x39
 8009528:	d06c      	beq.n	8009604 <_dtoa_r+0xba4>
 800952a:	3201      	adds	r2, #1
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	e747      	b.n	80093c0 <_dtoa_r+0x960>
 8009530:	2a00      	cmp	r2, #0
 8009532:	dd07      	ble.n	8009544 <_dtoa_r+0xae4>
 8009534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009538:	d0ed      	beq.n	8009516 <_dtoa_r+0xab6>
 800953a:	9a01      	ldr	r2, [sp, #4]
 800953c:	f109 0301 	add.w	r3, r9, #1
 8009540:	7013      	strb	r3, [r2, #0]
 8009542:	e73d      	b.n	80093c0 <_dtoa_r+0x960>
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	9a08      	ldr	r2, [sp, #32]
 8009548:	f803 9c01 	strb.w	r9, [r3, #-1]
 800954c:	4293      	cmp	r3, r2
 800954e:	d043      	beq.n	80095d8 <_dtoa_r+0xb78>
 8009550:	4651      	mov	r1, sl
 8009552:	2300      	movs	r3, #0
 8009554:	220a      	movs	r2, #10
 8009556:	4620      	mov	r0, r4
 8009558:	f000 f9d6 	bl	8009908 <__multadd>
 800955c:	45b8      	cmp	r8, r7
 800955e:	4682      	mov	sl, r0
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	f04f 020a 	mov.w	r2, #10
 8009568:	4641      	mov	r1, r8
 800956a:	4620      	mov	r0, r4
 800956c:	d107      	bne.n	800957e <_dtoa_r+0xb1e>
 800956e:	f000 f9cb 	bl	8009908 <__multadd>
 8009572:	4680      	mov	r8, r0
 8009574:	4607      	mov	r7, r0
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	3301      	adds	r3, #1
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	e775      	b.n	800946a <_dtoa_r+0xa0a>
 800957e:	f000 f9c3 	bl	8009908 <__multadd>
 8009582:	4639      	mov	r1, r7
 8009584:	4680      	mov	r8, r0
 8009586:	2300      	movs	r3, #0
 8009588:	220a      	movs	r2, #10
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f9bc 	bl	8009908 <__multadd>
 8009590:	4607      	mov	r7, r0
 8009592:	e7f0      	b.n	8009576 <_dtoa_r+0xb16>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	9d00      	ldr	r5, [sp, #0]
 800959a:	4631      	mov	r1, r6
 800959c:	4650      	mov	r0, sl
 800959e:	f7ff f9d6 	bl	800894e <quorem>
 80095a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	f805 9b01 	strb.w	r9, [r5], #1
 80095ac:	1aea      	subs	r2, r5, r3
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	4293      	cmp	r3, r2
 80095b2:	dd07      	ble.n	80095c4 <_dtoa_r+0xb64>
 80095b4:	4651      	mov	r1, sl
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f9a4 	bl	8009908 <__multadd>
 80095c0:	4682      	mov	sl, r0
 80095c2:	e7ea      	b.n	800959a <_dtoa_r+0xb3a>
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfc8      	it	gt
 80095ca:	461d      	movgt	r5, r3
 80095cc:	9b00      	ldr	r3, [sp, #0]
 80095ce:	bfd8      	it	le
 80095d0:	2501      	movle	r5, #1
 80095d2:	441d      	add	r5, r3
 80095d4:	f04f 0800 	mov.w	r8, #0
 80095d8:	4651      	mov	r1, sl
 80095da:	2201      	movs	r2, #1
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fb41 	bl	8009c64 <__lshift>
 80095e2:	4631      	mov	r1, r6
 80095e4:	4682      	mov	sl, r0
 80095e6:	f000 fba9 	bl	8009d3c <__mcmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	dc96      	bgt.n	800951c <_dtoa_r+0xabc>
 80095ee:	d102      	bne.n	80095f6 <_dtoa_r+0xb96>
 80095f0:	f019 0f01 	tst.w	r9, #1
 80095f4:	d192      	bne.n	800951c <_dtoa_r+0xabc>
 80095f6:	462b      	mov	r3, r5
 80095f8:	461d      	mov	r5, r3
 80095fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095fe:	2a30      	cmp	r2, #48	; 0x30
 8009600:	d0fa      	beq.n	80095f8 <_dtoa_r+0xb98>
 8009602:	e6dd      	b.n	80093c0 <_dtoa_r+0x960>
 8009604:	9a00      	ldr	r2, [sp, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d189      	bne.n	800951e <_dtoa_r+0xabe>
 800960a:	f10b 0b01 	add.w	fp, fp, #1
 800960e:	2331      	movs	r3, #49	; 0x31
 8009610:	e796      	b.n	8009540 <_dtoa_r+0xae0>
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <_dtoa_r+0xbdc>)
 8009614:	f7ff ba99 	b.w	8008b4a <_dtoa_r+0xea>
 8009618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800961a:	2b00      	cmp	r3, #0
 800961c:	f47f aa6d 	bne.w	8008afa <_dtoa_r+0x9a>
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <_dtoa_r+0xbe0>)
 8009622:	f7ff ba92 	b.w	8008b4a <_dtoa_r+0xea>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	dcb5      	bgt.n	8009598 <_dtoa_r+0xb38>
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	2b02      	cmp	r3, #2
 8009630:	f73f aeb1 	bgt.w	8009396 <_dtoa_r+0x936>
 8009634:	e7b0      	b.n	8009598 <_dtoa_r+0xb38>
 8009636:	bf00      	nop
 8009638:	0800a7e4 	.word	0x0800a7e4
 800963c:	0800a744 	.word	0x0800a744
 8009640:	0800a768 	.word	0x0800a768

08009644 <_free_r>:
 8009644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009646:	2900      	cmp	r1, #0
 8009648:	d044      	beq.n	80096d4 <_free_r+0x90>
 800964a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964e:	9001      	str	r0, [sp, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f1a1 0404 	sub.w	r4, r1, #4
 8009656:	bfb8      	it	lt
 8009658:	18e4      	addlt	r4, r4, r3
 800965a:	f000 f8e7 	bl	800982c <__malloc_lock>
 800965e:	4a1e      	ldr	r2, [pc, #120]	; (80096d8 <_free_r+0x94>)
 8009660:	9801      	ldr	r0, [sp, #4]
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	b933      	cbnz	r3, 8009674 <_free_r+0x30>
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	6014      	str	r4, [r2, #0]
 800966a:	b003      	add	sp, #12
 800966c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009670:	f000 b8e2 	b.w	8009838 <__malloc_unlock>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d908      	bls.n	800968a <_free_r+0x46>
 8009678:	6825      	ldr	r5, [r4, #0]
 800967a:	1961      	adds	r1, r4, r5
 800967c:	428b      	cmp	r3, r1
 800967e:	bf01      	itttt	eq
 8009680:	6819      	ldreq	r1, [r3, #0]
 8009682:	685b      	ldreq	r3, [r3, #4]
 8009684:	1949      	addeq	r1, r1, r5
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	e7ed      	b.n	8009666 <_free_r+0x22>
 800968a:	461a      	mov	r2, r3
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b10b      	cbz	r3, 8009694 <_free_r+0x50>
 8009690:	42a3      	cmp	r3, r4
 8009692:	d9fa      	bls.n	800968a <_free_r+0x46>
 8009694:	6811      	ldr	r1, [r2, #0]
 8009696:	1855      	adds	r5, r2, r1
 8009698:	42a5      	cmp	r5, r4
 800969a:	d10b      	bne.n	80096b4 <_free_r+0x70>
 800969c:	6824      	ldr	r4, [r4, #0]
 800969e:	4421      	add	r1, r4
 80096a0:	1854      	adds	r4, r2, r1
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	d1e0      	bne.n	800966a <_free_r+0x26>
 80096a8:	681c      	ldr	r4, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6053      	str	r3, [r2, #4]
 80096ae:	440c      	add	r4, r1
 80096b0:	6014      	str	r4, [r2, #0]
 80096b2:	e7da      	b.n	800966a <_free_r+0x26>
 80096b4:	d902      	bls.n	80096bc <_free_r+0x78>
 80096b6:	230c      	movs	r3, #12
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	e7d6      	b.n	800966a <_free_r+0x26>
 80096bc:	6825      	ldr	r5, [r4, #0]
 80096be:	1961      	adds	r1, r4, r5
 80096c0:	428b      	cmp	r3, r1
 80096c2:	bf04      	itt	eq
 80096c4:	6819      	ldreq	r1, [r3, #0]
 80096c6:	685b      	ldreq	r3, [r3, #4]
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	bf04      	itt	eq
 80096cc:	1949      	addeq	r1, r1, r5
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	6054      	str	r4, [r2, #4]
 80096d2:	e7ca      	b.n	800966a <_free_r+0x26>
 80096d4:	b003      	add	sp, #12
 80096d6:	bd30      	pop	{r4, r5, pc}
 80096d8:	20000a6c 	.word	0x20000a6c

080096dc <malloc>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	; (80096e8 <malloc+0xc>)
 80096de:	4601      	mov	r1, r0
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f000 b823 	b.w	800972c <_malloc_r>
 80096e6:	bf00      	nop
 80096e8:	20000080 	.word	0x20000080

080096ec <sbrk_aligned>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	4e0e      	ldr	r6, [pc, #56]	; (8009728 <sbrk_aligned+0x3c>)
 80096f0:	460c      	mov	r4, r1
 80096f2:	6831      	ldr	r1, [r6, #0]
 80096f4:	4605      	mov	r5, r0
 80096f6:	b911      	cbnz	r1, 80096fe <sbrk_aligned+0x12>
 80096f8:	f000 fcce 	bl	800a098 <_sbrk_r>
 80096fc:	6030      	str	r0, [r6, #0]
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f000 fcc9 	bl	800a098 <_sbrk_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d00a      	beq.n	8009720 <sbrk_aligned+0x34>
 800970a:	1cc4      	adds	r4, r0, #3
 800970c:	f024 0403 	bic.w	r4, r4, #3
 8009710:	42a0      	cmp	r0, r4
 8009712:	d007      	beq.n	8009724 <sbrk_aligned+0x38>
 8009714:	1a21      	subs	r1, r4, r0
 8009716:	4628      	mov	r0, r5
 8009718:	f000 fcbe 	bl	800a098 <_sbrk_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d101      	bne.n	8009724 <sbrk_aligned+0x38>
 8009720:	f04f 34ff 	mov.w	r4, #4294967295
 8009724:	4620      	mov	r0, r4
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	20000a70 	.word	0x20000a70

0800972c <_malloc_r>:
 800972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009730:	1ccd      	adds	r5, r1, #3
 8009732:	f025 0503 	bic.w	r5, r5, #3
 8009736:	3508      	adds	r5, #8
 8009738:	2d0c      	cmp	r5, #12
 800973a:	bf38      	it	cc
 800973c:	250c      	movcc	r5, #12
 800973e:	2d00      	cmp	r5, #0
 8009740:	4607      	mov	r7, r0
 8009742:	db01      	blt.n	8009748 <_malloc_r+0x1c>
 8009744:	42a9      	cmp	r1, r5
 8009746:	d905      	bls.n	8009754 <_malloc_r+0x28>
 8009748:	230c      	movs	r3, #12
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	2600      	movs	r6, #0
 800974e:	4630      	mov	r0, r6
 8009750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009828 <_malloc_r+0xfc>
 8009758:	f000 f868 	bl	800982c <__malloc_lock>
 800975c:	f8d8 3000 	ldr.w	r3, [r8]
 8009760:	461c      	mov	r4, r3
 8009762:	bb5c      	cbnz	r4, 80097bc <_malloc_r+0x90>
 8009764:	4629      	mov	r1, r5
 8009766:	4638      	mov	r0, r7
 8009768:	f7ff ffc0 	bl	80096ec <sbrk_aligned>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	4604      	mov	r4, r0
 8009770:	d155      	bne.n	800981e <_malloc_r+0xf2>
 8009772:	f8d8 4000 	ldr.w	r4, [r8]
 8009776:	4626      	mov	r6, r4
 8009778:	2e00      	cmp	r6, #0
 800977a:	d145      	bne.n	8009808 <_malloc_r+0xdc>
 800977c:	2c00      	cmp	r4, #0
 800977e:	d048      	beq.n	8009812 <_malloc_r+0xe6>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	4631      	mov	r1, r6
 8009784:	4638      	mov	r0, r7
 8009786:	eb04 0903 	add.w	r9, r4, r3
 800978a:	f000 fc85 	bl	800a098 <_sbrk_r>
 800978e:	4581      	cmp	r9, r0
 8009790:	d13f      	bne.n	8009812 <_malloc_r+0xe6>
 8009792:	6821      	ldr	r1, [r4, #0]
 8009794:	1a6d      	subs	r5, r5, r1
 8009796:	4629      	mov	r1, r5
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff ffa7 	bl	80096ec <sbrk_aligned>
 800979e:	3001      	adds	r0, #1
 80097a0:	d037      	beq.n	8009812 <_malloc_r+0xe6>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	442b      	add	r3, r5
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	f8d8 3000 	ldr.w	r3, [r8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d038      	beq.n	8009822 <_malloc_r+0xf6>
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	42a2      	cmp	r2, r4
 80097b4:	d12b      	bne.n	800980e <_malloc_r+0xe2>
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	e00f      	b.n	80097dc <_malloc_r+0xb0>
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	1b52      	subs	r2, r2, r5
 80097c0:	d41f      	bmi.n	8009802 <_malloc_r+0xd6>
 80097c2:	2a0b      	cmp	r2, #11
 80097c4:	d917      	bls.n	80097f6 <_malloc_r+0xca>
 80097c6:	1961      	adds	r1, r4, r5
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	6025      	str	r5, [r4, #0]
 80097cc:	bf18      	it	ne
 80097ce:	6059      	strne	r1, [r3, #4]
 80097d0:	6863      	ldr	r3, [r4, #4]
 80097d2:	bf08      	it	eq
 80097d4:	f8c8 1000 	streq.w	r1, [r8]
 80097d8:	5162      	str	r2, [r4, r5]
 80097da:	604b      	str	r3, [r1, #4]
 80097dc:	4638      	mov	r0, r7
 80097de:	f104 060b 	add.w	r6, r4, #11
 80097e2:	f000 f829 	bl	8009838 <__malloc_unlock>
 80097e6:	f026 0607 	bic.w	r6, r6, #7
 80097ea:	1d23      	adds	r3, r4, #4
 80097ec:	1af2      	subs	r2, r6, r3
 80097ee:	d0ae      	beq.n	800974e <_malloc_r+0x22>
 80097f0:	1b9b      	subs	r3, r3, r6
 80097f2:	50a3      	str	r3, [r4, r2]
 80097f4:	e7ab      	b.n	800974e <_malloc_r+0x22>
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	6862      	ldr	r2, [r4, #4]
 80097fa:	d1dd      	bne.n	80097b8 <_malloc_r+0x8c>
 80097fc:	f8c8 2000 	str.w	r2, [r8]
 8009800:	e7ec      	b.n	80097dc <_malloc_r+0xb0>
 8009802:	4623      	mov	r3, r4
 8009804:	6864      	ldr	r4, [r4, #4]
 8009806:	e7ac      	b.n	8009762 <_malloc_r+0x36>
 8009808:	4634      	mov	r4, r6
 800980a:	6876      	ldr	r6, [r6, #4]
 800980c:	e7b4      	b.n	8009778 <_malloc_r+0x4c>
 800980e:	4613      	mov	r3, r2
 8009810:	e7cc      	b.n	80097ac <_malloc_r+0x80>
 8009812:	230c      	movs	r3, #12
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	4638      	mov	r0, r7
 8009818:	f000 f80e 	bl	8009838 <__malloc_unlock>
 800981c:	e797      	b.n	800974e <_malloc_r+0x22>
 800981e:	6025      	str	r5, [r4, #0]
 8009820:	e7dc      	b.n	80097dc <_malloc_r+0xb0>
 8009822:	605b      	str	r3, [r3, #4]
 8009824:	deff      	udf	#255	; 0xff
 8009826:	bf00      	nop
 8009828:	20000a6c 	.word	0x20000a6c

0800982c <__malloc_lock>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__malloc_lock+0x8>)
 800982e:	f7ff b88c 	b.w	800894a <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	20000a68 	.word	0x20000a68

08009838 <__malloc_unlock>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__malloc_unlock+0x8>)
 800983a:	f7ff b887 	b.w	800894c <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	20000a68 	.word	0x20000a68

08009844 <_Balloc>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	69c6      	ldr	r6, [r0, #28]
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	b976      	cbnz	r6, 800986c <_Balloc+0x28>
 800984e:	2010      	movs	r0, #16
 8009850:	f7ff ff44 	bl	80096dc <malloc>
 8009854:	4602      	mov	r2, r0
 8009856:	61e0      	str	r0, [r4, #28]
 8009858:	b920      	cbnz	r0, 8009864 <_Balloc+0x20>
 800985a:	4b18      	ldr	r3, [pc, #96]	; (80098bc <_Balloc+0x78>)
 800985c:	4818      	ldr	r0, [pc, #96]	; (80098c0 <_Balloc+0x7c>)
 800985e:	216b      	movs	r1, #107	; 0x6b
 8009860:	f000 fc38 	bl	800a0d4 <__assert_func>
 8009864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009868:	6006      	str	r6, [r0, #0]
 800986a:	60c6      	str	r6, [r0, #12]
 800986c:	69e6      	ldr	r6, [r4, #28]
 800986e:	68f3      	ldr	r3, [r6, #12]
 8009870:	b183      	cbz	r3, 8009894 <_Balloc+0x50>
 8009872:	69e3      	ldr	r3, [r4, #28]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800987a:	b9b8      	cbnz	r0, 80098ac <_Balloc+0x68>
 800987c:	2101      	movs	r1, #1
 800987e:	fa01 f605 	lsl.w	r6, r1, r5
 8009882:	1d72      	adds	r2, r6, #5
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fc42 	bl	800a110 <_calloc_r>
 800988c:	b160      	cbz	r0, 80098a8 <_Balloc+0x64>
 800988e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009892:	e00e      	b.n	80098b2 <_Balloc+0x6e>
 8009894:	2221      	movs	r2, #33	; 0x21
 8009896:	2104      	movs	r1, #4
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fc39 	bl	800a110 <_calloc_r>
 800989e:	69e3      	ldr	r3, [r4, #28]
 80098a0:	60f0      	str	r0, [r6, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e4      	bne.n	8009872 <_Balloc+0x2e>
 80098a8:	2000      	movs	r0, #0
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	6802      	ldr	r2, [r0, #0]
 80098ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098b2:	2300      	movs	r3, #0
 80098b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098b8:	e7f7      	b.n	80098aa <_Balloc+0x66>
 80098ba:	bf00      	nop
 80098bc:	0800a775 	.word	0x0800a775
 80098c0:	0800a7f5 	.word	0x0800a7f5

080098c4 <_Bfree>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	69c6      	ldr	r6, [r0, #28]
 80098c8:	4605      	mov	r5, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	b976      	cbnz	r6, 80098ec <_Bfree+0x28>
 80098ce:	2010      	movs	r0, #16
 80098d0:	f7ff ff04 	bl	80096dc <malloc>
 80098d4:	4602      	mov	r2, r0
 80098d6:	61e8      	str	r0, [r5, #28]
 80098d8:	b920      	cbnz	r0, 80098e4 <_Bfree+0x20>
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <_Bfree+0x3c>)
 80098dc:	4809      	ldr	r0, [pc, #36]	; (8009904 <_Bfree+0x40>)
 80098de:	218f      	movs	r1, #143	; 0x8f
 80098e0:	f000 fbf8 	bl	800a0d4 <__assert_func>
 80098e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e8:	6006      	str	r6, [r0, #0]
 80098ea:	60c6      	str	r6, [r0, #12]
 80098ec:	b13c      	cbz	r4, 80098fe <_Bfree+0x3a>
 80098ee:	69eb      	ldr	r3, [r5, #28]
 80098f0:	6862      	ldr	r2, [r4, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098f8:	6021      	str	r1, [r4, #0]
 80098fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	0800a775 	.word	0x0800a775
 8009904:	0800a7f5 	.word	0x0800a7f5

08009908 <__multadd>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	690d      	ldr	r5, [r1, #16]
 800990e:	4607      	mov	r7, r0
 8009910:	460c      	mov	r4, r1
 8009912:	461e      	mov	r6, r3
 8009914:	f101 0c14 	add.w	ip, r1, #20
 8009918:	2000      	movs	r0, #0
 800991a:	f8dc 3000 	ldr.w	r3, [ip]
 800991e:	b299      	uxth	r1, r3
 8009920:	fb02 6101 	mla	r1, r2, r1, r6
 8009924:	0c1e      	lsrs	r6, r3, #16
 8009926:	0c0b      	lsrs	r3, r1, #16
 8009928:	fb02 3306 	mla	r3, r2, r6, r3
 800992c:	b289      	uxth	r1, r1
 800992e:	3001      	adds	r0, #1
 8009930:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009934:	4285      	cmp	r5, r0
 8009936:	f84c 1b04 	str.w	r1, [ip], #4
 800993a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800993e:	dcec      	bgt.n	800991a <__multadd+0x12>
 8009940:	b30e      	cbz	r6, 8009986 <__multadd+0x7e>
 8009942:	68a3      	ldr	r3, [r4, #8]
 8009944:	42ab      	cmp	r3, r5
 8009946:	dc19      	bgt.n	800997c <__multadd+0x74>
 8009948:	6861      	ldr	r1, [r4, #4]
 800994a:	4638      	mov	r0, r7
 800994c:	3101      	adds	r1, #1
 800994e:	f7ff ff79 	bl	8009844 <_Balloc>
 8009952:	4680      	mov	r8, r0
 8009954:	b928      	cbnz	r0, 8009962 <__multadd+0x5a>
 8009956:	4602      	mov	r2, r0
 8009958:	4b0c      	ldr	r3, [pc, #48]	; (800998c <__multadd+0x84>)
 800995a:	480d      	ldr	r0, [pc, #52]	; (8009990 <__multadd+0x88>)
 800995c:	21ba      	movs	r1, #186	; 0xba
 800995e:	f000 fbb9 	bl	800a0d4 <__assert_func>
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	3202      	adds	r2, #2
 8009966:	f104 010c 	add.w	r1, r4, #12
 800996a:	0092      	lsls	r2, r2, #2
 800996c:	300c      	adds	r0, #12
 800996e:	f000 fba3 	bl	800a0b8 <memcpy>
 8009972:	4621      	mov	r1, r4
 8009974:	4638      	mov	r0, r7
 8009976:	f7ff ffa5 	bl	80098c4 <_Bfree>
 800997a:	4644      	mov	r4, r8
 800997c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009980:	3501      	adds	r5, #1
 8009982:	615e      	str	r6, [r3, #20]
 8009984:	6125      	str	r5, [r4, #16]
 8009986:	4620      	mov	r0, r4
 8009988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800998c:	0800a7e4 	.word	0x0800a7e4
 8009990:	0800a7f5 	.word	0x0800a7f5

08009994 <__hi0bits>:
 8009994:	0c03      	lsrs	r3, r0, #16
 8009996:	041b      	lsls	r3, r3, #16
 8009998:	b9d3      	cbnz	r3, 80099d0 <__hi0bits+0x3c>
 800999a:	0400      	lsls	r0, r0, #16
 800999c:	2310      	movs	r3, #16
 800999e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099a2:	bf04      	itt	eq
 80099a4:	0200      	lsleq	r0, r0, #8
 80099a6:	3308      	addeq	r3, #8
 80099a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099ac:	bf04      	itt	eq
 80099ae:	0100      	lsleq	r0, r0, #4
 80099b0:	3304      	addeq	r3, #4
 80099b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099b6:	bf04      	itt	eq
 80099b8:	0080      	lsleq	r0, r0, #2
 80099ba:	3302      	addeq	r3, #2
 80099bc:	2800      	cmp	r0, #0
 80099be:	db05      	blt.n	80099cc <__hi0bits+0x38>
 80099c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099c4:	f103 0301 	add.w	r3, r3, #1
 80099c8:	bf08      	it	eq
 80099ca:	2320      	moveq	r3, #32
 80099cc:	4618      	mov	r0, r3
 80099ce:	4770      	bx	lr
 80099d0:	2300      	movs	r3, #0
 80099d2:	e7e4      	b.n	800999e <__hi0bits+0xa>

080099d4 <__lo0bits>:
 80099d4:	6803      	ldr	r3, [r0, #0]
 80099d6:	f013 0207 	ands.w	r2, r3, #7
 80099da:	d00c      	beq.n	80099f6 <__lo0bits+0x22>
 80099dc:	07d9      	lsls	r1, r3, #31
 80099de:	d422      	bmi.n	8009a26 <__lo0bits+0x52>
 80099e0:	079a      	lsls	r2, r3, #30
 80099e2:	bf49      	itett	mi
 80099e4:	085b      	lsrmi	r3, r3, #1
 80099e6:	089b      	lsrpl	r3, r3, #2
 80099e8:	6003      	strmi	r3, [r0, #0]
 80099ea:	2201      	movmi	r2, #1
 80099ec:	bf5c      	itt	pl
 80099ee:	6003      	strpl	r3, [r0, #0]
 80099f0:	2202      	movpl	r2, #2
 80099f2:	4610      	mov	r0, r2
 80099f4:	4770      	bx	lr
 80099f6:	b299      	uxth	r1, r3
 80099f8:	b909      	cbnz	r1, 80099fe <__lo0bits+0x2a>
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	2210      	movs	r2, #16
 80099fe:	b2d9      	uxtb	r1, r3
 8009a00:	b909      	cbnz	r1, 8009a06 <__lo0bits+0x32>
 8009a02:	3208      	adds	r2, #8
 8009a04:	0a1b      	lsrs	r3, r3, #8
 8009a06:	0719      	lsls	r1, r3, #28
 8009a08:	bf04      	itt	eq
 8009a0a:	091b      	lsreq	r3, r3, #4
 8009a0c:	3204      	addeq	r2, #4
 8009a0e:	0799      	lsls	r1, r3, #30
 8009a10:	bf04      	itt	eq
 8009a12:	089b      	lsreq	r3, r3, #2
 8009a14:	3202      	addeq	r2, #2
 8009a16:	07d9      	lsls	r1, r3, #31
 8009a18:	d403      	bmi.n	8009a22 <__lo0bits+0x4e>
 8009a1a:	085b      	lsrs	r3, r3, #1
 8009a1c:	f102 0201 	add.w	r2, r2, #1
 8009a20:	d003      	beq.n	8009a2a <__lo0bits+0x56>
 8009a22:	6003      	str	r3, [r0, #0]
 8009a24:	e7e5      	b.n	80099f2 <__lo0bits+0x1e>
 8009a26:	2200      	movs	r2, #0
 8009a28:	e7e3      	b.n	80099f2 <__lo0bits+0x1e>
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	e7e1      	b.n	80099f2 <__lo0bits+0x1e>
	...

08009a30 <__i2b>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	2101      	movs	r1, #1
 8009a36:	f7ff ff05 	bl	8009844 <_Balloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	b928      	cbnz	r0, 8009a4a <__i2b+0x1a>
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <__i2b+0x24>)
 8009a40:	4805      	ldr	r0, [pc, #20]	; (8009a58 <__i2b+0x28>)
 8009a42:	f240 1145 	movw	r1, #325	; 0x145
 8009a46:	f000 fb45 	bl	800a0d4 <__assert_func>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	6144      	str	r4, [r0, #20]
 8009a4e:	6103      	str	r3, [r0, #16]
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	bf00      	nop
 8009a54:	0800a7e4 	.word	0x0800a7e4
 8009a58:	0800a7f5 	.word	0x0800a7f5

08009a5c <__multiply>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	4691      	mov	r9, r2
 8009a62:	690a      	ldr	r2, [r1, #16]
 8009a64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	bfb8      	it	lt
 8009a6c:	460b      	movlt	r3, r1
 8009a6e:	460c      	mov	r4, r1
 8009a70:	bfbc      	itt	lt
 8009a72:	464c      	movlt	r4, r9
 8009a74:	4699      	movlt	r9, r3
 8009a76:	6927      	ldr	r7, [r4, #16]
 8009a78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a7c:	68a3      	ldr	r3, [r4, #8]
 8009a7e:	6861      	ldr	r1, [r4, #4]
 8009a80:	eb07 060a 	add.w	r6, r7, sl
 8009a84:	42b3      	cmp	r3, r6
 8009a86:	b085      	sub	sp, #20
 8009a88:	bfb8      	it	lt
 8009a8a:	3101      	addlt	r1, #1
 8009a8c:	f7ff feda 	bl	8009844 <_Balloc>
 8009a90:	b930      	cbnz	r0, 8009aa0 <__multiply+0x44>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b44      	ldr	r3, [pc, #272]	; (8009ba8 <__multiply+0x14c>)
 8009a96:	4845      	ldr	r0, [pc, #276]	; (8009bac <__multiply+0x150>)
 8009a98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a9c:	f000 fb1a 	bl	800a0d4 <__assert_func>
 8009aa0:	f100 0514 	add.w	r5, r0, #20
 8009aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	2200      	movs	r2, #0
 8009aac:	4543      	cmp	r3, r8
 8009aae:	d321      	bcc.n	8009af4 <__multiply+0x98>
 8009ab0:	f104 0314 	add.w	r3, r4, #20
 8009ab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ab8:	f109 0314 	add.w	r3, r9, #20
 8009abc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ac0:	9202      	str	r2, [sp, #8]
 8009ac2:	1b3a      	subs	r2, r7, r4
 8009ac4:	3a15      	subs	r2, #21
 8009ac6:	f022 0203 	bic.w	r2, r2, #3
 8009aca:	3204      	adds	r2, #4
 8009acc:	f104 0115 	add.w	r1, r4, #21
 8009ad0:	428f      	cmp	r7, r1
 8009ad2:	bf38      	it	cc
 8009ad4:	2204      	movcc	r2, #4
 8009ad6:	9201      	str	r2, [sp, #4]
 8009ad8:	9a02      	ldr	r2, [sp, #8]
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d80c      	bhi.n	8009afa <__multiply+0x9e>
 8009ae0:	2e00      	cmp	r6, #0
 8009ae2:	dd03      	ble.n	8009aec <__multiply+0x90>
 8009ae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d05b      	beq.n	8009ba4 <__multiply+0x148>
 8009aec:	6106      	str	r6, [r0, #16]
 8009aee:	b005      	add	sp, #20
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	f843 2b04 	str.w	r2, [r3], #4
 8009af8:	e7d8      	b.n	8009aac <__multiply+0x50>
 8009afa:	f8b3 a000 	ldrh.w	sl, [r3]
 8009afe:	f1ba 0f00 	cmp.w	sl, #0
 8009b02:	d024      	beq.n	8009b4e <__multiply+0xf2>
 8009b04:	f104 0e14 	add.w	lr, r4, #20
 8009b08:	46a9      	mov	r9, r5
 8009b0a:	f04f 0c00 	mov.w	ip, #0
 8009b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b12:	f8d9 1000 	ldr.w	r1, [r9]
 8009b16:	fa1f fb82 	uxth.w	fp, r2
 8009b1a:	b289      	uxth	r1, r1
 8009b1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b24:	f8d9 2000 	ldr.w	r2, [r9]
 8009b28:	4461      	add	r1, ip
 8009b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b36:	b289      	uxth	r1, r1
 8009b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b3c:	4577      	cmp	r7, lr
 8009b3e:	f849 1b04 	str.w	r1, [r9], #4
 8009b42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b46:	d8e2      	bhi.n	8009b0e <__multiply+0xb2>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	f845 c002 	str.w	ip, [r5, r2]
 8009b4e:	9a03      	ldr	r2, [sp, #12]
 8009b50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b54:	3304      	adds	r3, #4
 8009b56:	f1b9 0f00 	cmp.w	r9, #0
 8009b5a:	d021      	beq.n	8009ba0 <__multiply+0x144>
 8009b5c:	6829      	ldr	r1, [r5, #0]
 8009b5e:	f104 0c14 	add.w	ip, r4, #20
 8009b62:	46ae      	mov	lr, r5
 8009b64:	f04f 0a00 	mov.w	sl, #0
 8009b68:	f8bc b000 	ldrh.w	fp, [ip]
 8009b6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b70:	fb09 220b 	mla	r2, r9, fp, r2
 8009b74:	4452      	add	r2, sl
 8009b76:	b289      	uxth	r1, r1
 8009b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b7c:	f84e 1b04 	str.w	r1, [lr], #4
 8009b80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b88:	f8be 1000 	ldrh.w	r1, [lr]
 8009b8c:	fb09 110a 	mla	r1, r9, sl, r1
 8009b90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b94:	4567      	cmp	r7, ip
 8009b96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b9a:	d8e5      	bhi.n	8009b68 <__multiply+0x10c>
 8009b9c:	9a01      	ldr	r2, [sp, #4]
 8009b9e:	50a9      	str	r1, [r5, r2]
 8009ba0:	3504      	adds	r5, #4
 8009ba2:	e799      	b.n	8009ad8 <__multiply+0x7c>
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	e79b      	b.n	8009ae0 <__multiply+0x84>
 8009ba8:	0800a7e4 	.word	0x0800a7e4
 8009bac:	0800a7f5 	.word	0x0800a7f5

08009bb0 <__pow5mult>:
 8009bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb4:	4615      	mov	r5, r2
 8009bb6:	f012 0203 	ands.w	r2, r2, #3
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	d007      	beq.n	8009bd0 <__pow5mult+0x20>
 8009bc0:	4c25      	ldr	r4, [pc, #148]	; (8009c58 <__pow5mult+0xa8>)
 8009bc2:	3a01      	subs	r2, #1
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bca:	f7ff fe9d 	bl	8009908 <__multadd>
 8009bce:	4607      	mov	r7, r0
 8009bd0:	10ad      	asrs	r5, r5, #2
 8009bd2:	d03d      	beq.n	8009c50 <__pow5mult+0xa0>
 8009bd4:	69f4      	ldr	r4, [r6, #28]
 8009bd6:	b97c      	cbnz	r4, 8009bf8 <__pow5mult+0x48>
 8009bd8:	2010      	movs	r0, #16
 8009bda:	f7ff fd7f 	bl	80096dc <malloc>
 8009bde:	4602      	mov	r2, r0
 8009be0:	61f0      	str	r0, [r6, #28]
 8009be2:	b928      	cbnz	r0, 8009bf0 <__pow5mult+0x40>
 8009be4:	4b1d      	ldr	r3, [pc, #116]	; (8009c5c <__pow5mult+0xac>)
 8009be6:	481e      	ldr	r0, [pc, #120]	; (8009c60 <__pow5mult+0xb0>)
 8009be8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009bec:	f000 fa72 	bl	800a0d4 <__assert_func>
 8009bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bf4:	6004      	str	r4, [r0, #0]
 8009bf6:	60c4      	str	r4, [r0, #12]
 8009bf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c00:	b94c      	cbnz	r4, 8009c16 <__pow5mult+0x66>
 8009c02:	f240 2171 	movw	r1, #625	; 0x271
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7ff ff12 	bl	8009a30 <__i2b>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c12:	4604      	mov	r4, r0
 8009c14:	6003      	str	r3, [r0, #0]
 8009c16:	f04f 0900 	mov.w	r9, #0
 8009c1a:	07eb      	lsls	r3, r5, #31
 8009c1c:	d50a      	bpl.n	8009c34 <__pow5mult+0x84>
 8009c1e:	4639      	mov	r1, r7
 8009c20:	4622      	mov	r2, r4
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7ff ff1a 	bl	8009a5c <__multiply>
 8009c28:	4639      	mov	r1, r7
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff fe49 	bl	80098c4 <_Bfree>
 8009c32:	4647      	mov	r7, r8
 8009c34:	106d      	asrs	r5, r5, #1
 8009c36:	d00b      	beq.n	8009c50 <__pow5mult+0xa0>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	b938      	cbnz	r0, 8009c4c <__pow5mult+0x9c>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff ff0b 	bl	8009a5c <__multiply>
 8009c46:	6020      	str	r0, [r4, #0]
 8009c48:	f8c0 9000 	str.w	r9, [r0]
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	e7e4      	b.n	8009c1a <__pow5mult+0x6a>
 8009c50:	4638      	mov	r0, r7
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	bf00      	nop
 8009c58:	0800a940 	.word	0x0800a940
 8009c5c:	0800a775 	.word	0x0800a775
 8009c60:	0800a7f5 	.word	0x0800a7f5

08009c64 <__lshift>:
 8009c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	460c      	mov	r4, r1
 8009c6a:	6849      	ldr	r1, [r1, #4]
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	4607      	mov	r7, r0
 8009c76:	4691      	mov	r9, r2
 8009c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c7c:	f108 0601 	add.w	r6, r8, #1
 8009c80:	42b3      	cmp	r3, r6
 8009c82:	db0b      	blt.n	8009c9c <__lshift+0x38>
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff fddd 	bl	8009844 <_Balloc>
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	b948      	cbnz	r0, 8009ca2 <__lshift+0x3e>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4b28      	ldr	r3, [pc, #160]	; (8009d34 <__lshift+0xd0>)
 8009c92:	4829      	ldr	r0, [pc, #164]	; (8009d38 <__lshift+0xd4>)
 8009c94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c98:	f000 fa1c 	bl	800a0d4 <__assert_func>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	005b      	lsls	r3, r3, #1
 8009ca0:	e7ee      	b.n	8009c80 <__lshift+0x1c>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f100 0114 	add.w	r1, r0, #20
 8009ca8:	f100 0210 	add.w	r2, r0, #16
 8009cac:	4618      	mov	r0, r3
 8009cae:	4553      	cmp	r3, sl
 8009cb0:	db33      	blt.n	8009d1a <__lshift+0xb6>
 8009cb2:	6920      	ldr	r0, [r4, #16]
 8009cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cb8:	f104 0314 	add.w	r3, r4, #20
 8009cbc:	f019 091f 	ands.w	r9, r9, #31
 8009cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cc8:	d02b      	beq.n	8009d22 <__lshift+0xbe>
 8009cca:	f1c9 0e20 	rsb	lr, r9, #32
 8009cce:	468a      	mov	sl, r1
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	fa00 f009 	lsl.w	r0, r0, r9
 8009cd8:	4310      	orrs	r0, r2
 8009cda:	f84a 0b04 	str.w	r0, [sl], #4
 8009cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce2:	459c      	cmp	ip, r3
 8009ce4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ce8:	d8f3      	bhi.n	8009cd2 <__lshift+0x6e>
 8009cea:	ebac 0304 	sub.w	r3, ip, r4
 8009cee:	3b15      	subs	r3, #21
 8009cf0:	f023 0303 	bic.w	r3, r3, #3
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	f104 0015 	add.w	r0, r4, #21
 8009cfa:	4584      	cmp	ip, r0
 8009cfc:	bf38      	it	cc
 8009cfe:	2304      	movcc	r3, #4
 8009d00:	50ca      	str	r2, [r1, r3]
 8009d02:	b10a      	cbz	r2, 8009d08 <__lshift+0xa4>
 8009d04:	f108 0602 	add.w	r6, r8, #2
 8009d08:	3e01      	subs	r6, #1
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	612e      	str	r6, [r5, #16]
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f7ff fdd8 	bl	80098c4 <_Bfree>
 8009d14:	4628      	mov	r0, r5
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d1e:	3301      	adds	r3, #1
 8009d20:	e7c5      	b.n	8009cae <__lshift+0x4a>
 8009d22:	3904      	subs	r1, #4
 8009d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d2c:	459c      	cmp	ip, r3
 8009d2e:	d8f9      	bhi.n	8009d24 <__lshift+0xc0>
 8009d30:	e7ea      	b.n	8009d08 <__lshift+0xa4>
 8009d32:	bf00      	nop
 8009d34:	0800a7e4 	.word	0x0800a7e4
 8009d38:	0800a7f5 	.word	0x0800a7f5

08009d3c <__mcmp>:
 8009d3c:	b530      	push	{r4, r5, lr}
 8009d3e:	6902      	ldr	r2, [r0, #16]
 8009d40:	690c      	ldr	r4, [r1, #16]
 8009d42:	1b12      	subs	r2, r2, r4
 8009d44:	d10e      	bne.n	8009d64 <__mcmp+0x28>
 8009d46:	f100 0314 	add.w	r3, r0, #20
 8009d4a:	3114      	adds	r1, #20
 8009d4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d5c:	42a5      	cmp	r5, r4
 8009d5e:	d003      	beq.n	8009d68 <__mcmp+0x2c>
 8009d60:	d305      	bcc.n	8009d6e <__mcmp+0x32>
 8009d62:	2201      	movs	r2, #1
 8009d64:	4610      	mov	r0, r2
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	4283      	cmp	r3, r0
 8009d6a:	d3f3      	bcc.n	8009d54 <__mcmp+0x18>
 8009d6c:	e7fa      	b.n	8009d64 <__mcmp+0x28>
 8009d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d72:	e7f7      	b.n	8009d64 <__mcmp+0x28>

08009d74 <__mdiff>:
 8009d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4690      	mov	r8, r2
 8009d82:	f7ff ffdb 	bl	8009d3c <__mcmp>
 8009d86:	1e05      	subs	r5, r0, #0
 8009d88:	d110      	bne.n	8009dac <__mdiff+0x38>
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff fd59 	bl	8009844 <_Balloc>
 8009d92:	b930      	cbnz	r0, 8009da2 <__mdiff+0x2e>
 8009d94:	4b3a      	ldr	r3, [pc, #232]	; (8009e80 <__mdiff+0x10c>)
 8009d96:	4602      	mov	r2, r0
 8009d98:	f240 2137 	movw	r1, #567	; 0x237
 8009d9c:	4839      	ldr	r0, [pc, #228]	; (8009e84 <__mdiff+0x110>)
 8009d9e:	f000 f999 	bl	800a0d4 <__assert_func>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	bfa4      	itt	ge
 8009dae:	4643      	movge	r3, r8
 8009db0:	46a0      	movge	r8, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009db8:	bfa6      	itte	ge
 8009dba:	461c      	movge	r4, r3
 8009dbc:	2500      	movge	r5, #0
 8009dbe:	2501      	movlt	r5, #1
 8009dc0:	f7ff fd40 	bl	8009844 <_Balloc>
 8009dc4:	b920      	cbnz	r0, 8009dd0 <__mdiff+0x5c>
 8009dc6:	4b2e      	ldr	r3, [pc, #184]	; (8009e80 <__mdiff+0x10c>)
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f240 2145 	movw	r1, #581	; 0x245
 8009dce:	e7e5      	b.n	8009d9c <__mdiff+0x28>
 8009dd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009dd4:	6926      	ldr	r6, [r4, #16]
 8009dd6:	60c5      	str	r5, [r0, #12]
 8009dd8:	f104 0914 	add.w	r9, r4, #20
 8009ddc:	f108 0514 	add.w	r5, r8, #20
 8009de0:	f100 0e14 	add.w	lr, r0, #20
 8009de4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009de8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dec:	f108 0210 	add.w	r2, r8, #16
 8009df0:	46f2      	mov	sl, lr
 8009df2:	2100      	movs	r1, #0
 8009df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dfc:	fa11 f88b 	uxtah	r8, r1, fp
 8009e00:	b299      	uxth	r1, r3
 8009e02:	0c1b      	lsrs	r3, r3, #16
 8009e04:	eba8 0801 	sub.w	r8, r8, r1
 8009e08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e10:	fa1f f888 	uxth.w	r8, r8
 8009e14:	1419      	asrs	r1, r3, #16
 8009e16:	454e      	cmp	r6, r9
 8009e18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e1c:	f84a 3b04 	str.w	r3, [sl], #4
 8009e20:	d8e8      	bhi.n	8009df4 <__mdiff+0x80>
 8009e22:	1b33      	subs	r3, r6, r4
 8009e24:	3b15      	subs	r3, #21
 8009e26:	f023 0303 	bic.w	r3, r3, #3
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	3415      	adds	r4, #21
 8009e2e:	42a6      	cmp	r6, r4
 8009e30:	bf38      	it	cc
 8009e32:	2304      	movcc	r3, #4
 8009e34:	441d      	add	r5, r3
 8009e36:	4473      	add	r3, lr
 8009e38:	469e      	mov	lr, r3
 8009e3a:	462e      	mov	r6, r5
 8009e3c:	4566      	cmp	r6, ip
 8009e3e:	d30e      	bcc.n	8009e5e <__mdiff+0xea>
 8009e40:	f10c 0203 	add.w	r2, ip, #3
 8009e44:	1b52      	subs	r2, r2, r5
 8009e46:	f022 0203 	bic.w	r2, r2, #3
 8009e4a:	3d03      	subs	r5, #3
 8009e4c:	45ac      	cmp	ip, r5
 8009e4e:	bf38      	it	cc
 8009e50:	2200      	movcc	r2, #0
 8009e52:	4413      	add	r3, r2
 8009e54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e58:	b17a      	cbz	r2, 8009e7a <__mdiff+0x106>
 8009e5a:	6107      	str	r7, [r0, #16]
 8009e5c:	e7a4      	b.n	8009da8 <__mdiff+0x34>
 8009e5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e62:	fa11 f288 	uxtah	r2, r1, r8
 8009e66:	1414      	asrs	r4, r2, #16
 8009e68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e72:	f84e 2b04 	str.w	r2, [lr], #4
 8009e76:	1421      	asrs	r1, r4, #16
 8009e78:	e7e0      	b.n	8009e3c <__mdiff+0xc8>
 8009e7a:	3f01      	subs	r7, #1
 8009e7c:	e7ea      	b.n	8009e54 <__mdiff+0xe0>
 8009e7e:	bf00      	nop
 8009e80:	0800a7e4 	.word	0x0800a7e4
 8009e84:	0800a7f5 	.word	0x0800a7f5

08009e88 <__d2b>:
 8009e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	2101      	movs	r1, #1
 8009e90:	ec59 8b10 	vmov	r8, r9, d0
 8009e94:	4616      	mov	r6, r2
 8009e96:	f7ff fcd5 	bl	8009844 <_Balloc>
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	b930      	cbnz	r0, 8009eac <__d2b+0x24>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b24      	ldr	r3, [pc, #144]	; (8009f34 <__d2b+0xac>)
 8009ea2:	4825      	ldr	r0, [pc, #148]	; (8009f38 <__d2b+0xb0>)
 8009ea4:	f240 310f 	movw	r1, #783	; 0x30f
 8009ea8:	f000 f914 	bl	800a0d4 <__assert_func>
 8009eac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb4:	bb2d      	cbnz	r5, 8009f02 <__d2b+0x7a>
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	f1b8 0300 	subs.w	r3, r8, #0
 8009ebc:	d026      	beq.n	8009f0c <__d2b+0x84>
 8009ebe:	4668      	mov	r0, sp
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	f7ff fd87 	bl	80099d4 <__lo0bits>
 8009ec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009eca:	b1e8      	cbz	r0, 8009f08 <__d2b+0x80>
 8009ecc:	f1c0 0320 	rsb	r3, r0, #32
 8009ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	40c2      	lsrs	r2, r0
 8009ed8:	6163      	str	r3, [r4, #20]
 8009eda:	9201      	str	r2, [sp, #4]
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	61a3      	str	r3, [r4, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bf14      	ite	ne
 8009ee4:	2202      	movne	r2, #2
 8009ee6:	2201      	moveq	r2, #1
 8009ee8:	6122      	str	r2, [r4, #16]
 8009eea:	b1bd      	cbz	r5, 8009f1c <__d2b+0x94>
 8009eec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ef0:	4405      	add	r5, r0
 8009ef2:	603d      	str	r5, [r7, #0]
 8009ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ef8:	6030      	str	r0, [r6, #0]
 8009efa:	4620      	mov	r0, r4
 8009efc:	b003      	add	sp, #12
 8009efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f06:	e7d6      	b.n	8009eb6 <__d2b+0x2e>
 8009f08:	6161      	str	r1, [r4, #20]
 8009f0a:	e7e7      	b.n	8009edc <__d2b+0x54>
 8009f0c:	a801      	add	r0, sp, #4
 8009f0e:	f7ff fd61 	bl	80099d4 <__lo0bits>
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	6163      	str	r3, [r4, #20]
 8009f16:	3020      	adds	r0, #32
 8009f18:	2201      	movs	r2, #1
 8009f1a:	e7e5      	b.n	8009ee8 <__d2b+0x60>
 8009f1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f24:	6038      	str	r0, [r7, #0]
 8009f26:	6918      	ldr	r0, [r3, #16]
 8009f28:	f7ff fd34 	bl	8009994 <__hi0bits>
 8009f2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f30:	e7e2      	b.n	8009ef8 <__d2b+0x70>
 8009f32:	bf00      	nop
 8009f34:	0800a7e4 	.word	0x0800a7e4
 8009f38:	0800a7f5 	.word	0x0800a7f5

08009f3c <__sflush_r>:
 8009f3c:	898a      	ldrh	r2, [r1, #12]
 8009f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	0710      	lsls	r0, r2, #28
 8009f46:	460c      	mov	r4, r1
 8009f48:	d458      	bmi.n	8009ffc <__sflush_r+0xc0>
 8009f4a:	684b      	ldr	r3, [r1, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dc05      	bgt.n	8009f5c <__sflush_r+0x20>
 8009f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	dc02      	bgt.n	8009f5c <__sflush_r+0x20>
 8009f56:	2000      	movs	r0, #0
 8009f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d0f9      	beq.n	8009f56 <__sflush_r+0x1a>
 8009f62:	2300      	movs	r3, #0
 8009f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f68:	682f      	ldr	r7, [r5, #0]
 8009f6a:	6a21      	ldr	r1, [r4, #32]
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	d032      	beq.n	8009fd6 <__sflush_r+0x9a>
 8009f70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	075a      	lsls	r2, r3, #29
 8009f76:	d505      	bpl.n	8009f84 <__sflush_r+0x48>
 8009f78:	6863      	ldr	r3, [r4, #4]
 8009f7a:	1ac0      	subs	r0, r0, r3
 8009f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f7e:	b10b      	cbz	r3, 8009f84 <__sflush_r+0x48>
 8009f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f82:	1ac0      	subs	r0, r0, r3
 8009f84:	2300      	movs	r3, #0
 8009f86:	4602      	mov	r2, r0
 8009f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f8a:	6a21      	ldr	r1, [r4, #32]
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	d106      	bne.n	8009fa4 <__sflush_r+0x68>
 8009f96:	6829      	ldr	r1, [r5, #0]
 8009f98:	291d      	cmp	r1, #29
 8009f9a:	d82b      	bhi.n	8009ff4 <__sflush_r+0xb8>
 8009f9c:	4a29      	ldr	r2, [pc, #164]	; (800a044 <__sflush_r+0x108>)
 8009f9e:	410a      	asrs	r2, r1
 8009fa0:	07d6      	lsls	r6, r2, #31
 8009fa2:	d427      	bmi.n	8009ff4 <__sflush_r+0xb8>
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	6062      	str	r2, [r4, #4]
 8009fa8:	04d9      	lsls	r1, r3, #19
 8009faa:	6922      	ldr	r2, [r4, #16]
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	d504      	bpl.n	8009fba <__sflush_r+0x7e>
 8009fb0:	1c42      	adds	r2, r0, #1
 8009fb2:	d101      	bne.n	8009fb8 <__sflush_r+0x7c>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b903      	cbnz	r3, 8009fba <__sflush_r+0x7e>
 8009fb8:	6560      	str	r0, [r4, #84]	; 0x54
 8009fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbc:	602f      	str	r7, [r5, #0]
 8009fbe:	2900      	cmp	r1, #0
 8009fc0:	d0c9      	beq.n	8009f56 <__sflush_r+0x1a>
 8009fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	d002      	beq.n	8009fd0 <__sflush_r+0x94>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f7ff fb3a 	bl	8009644 <_free_r>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	6360      	str	r0, [r4, #52]	; 0x34
 8009fd4:	e7c0      	b.n	8009f58 <__sflush_r+0x1c>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	1c41      	adds	r1, r0, #1
 8009fde:	d1c8      	bne.n	8009f72 <__sflush_r+0x36>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0c5      	beq.n	8009f72 <__sflush_r+0x36>
 8009fe6:	2b1d      	cmp	r3, #29
 8009fe8:	d001      	beq.n	8009fee <__sflush_r+0xb2>
 8009fea:	2b16      	cmp	r3, #22
 8009fec:	d101      	bne.n	8009ff2 <__sflush_r+0xb6>
 8009fee:	602f      	str	r7, [r5, #0]
 8009ff0:	e7b1      	b.n	8009f56 <__sflush_r+0x1a>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff8:	81a3      	strh	r3, [r4, #12]
 8009ffa:	e7ad      	b.n	8009f58 <__sflush_r+0x1c>
 8009ffc:	690f      	ldr	r7, [r1, #16]
 8009ffe:	2f00      	cmp	r7, #0
 800a000:	d0a9      	beq.n	8009f56 <__sflush_r+0x1a>
 800a002:	0793      	lsls	r3, r2, #30
 800a004:	680e      	ldr	r6, [r1, #0]
 800a006:	bf08      	it	eq
 800a008:	694b      	ldreq	r3, [r1, #20]
 800a00a:	600f      	str	r7, [r1, #0]
 800a00c:	bf18      	it	ne
 800a00e:	2300      	movne	r3, #0
 800a010:	eba6 0807 	sub.w	r8, r6, r7
 800a014:	608b      	str	r3, [r1, #8]
 800a016:	f1b8 0f00 	cmp.w	r8, #0
 800a01a:	dd9c      	ble.n	8009f56 <__sflush_r+0x1a>
 800a01c:	6a21      	ldr	r1, [r4, #32]
 800a01e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a020:	4643      	mov	r3, r8
 800a022:	463a      	mov	r2, r7
 800a024:	4628      	mov	r0, r5
 800a026:	47b0      	blx	r6
 800a028:	2800      	cmp	r0, #0
 800a02a:	dc06      	bgt.n	800a03a <__sflush_r+0xfe>
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	e78e      	b.n	8009f58 <__sflush_r+0x1c>
 800a03a:	4407      	add	r7, r0
 800a03c:	eba8 0800 	sub.w	r8, r8, r0
 800a040:	e7e9      	b.n	800a016 <__sflush_r+0xda>
 800a042:	bf00      	nop
 800a044:	dfbffffe 	.word	0xdfbffffe

0800a048 <_fflush_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	690b      	ldr	r3, [r1, #16]
 800a04c:	4605      	mov	r5, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	b913      	cbnz	r3, 800a058 <_fflush_r+0x10>
 800a052:	2500      	movs	r5, #0
 800a054:	4628      	mov	r0, r5
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	b118      	cbz	r0, 800a062 <_fflush_r+0x1a>
 800a05a:	6a03      	ldr	r3, [r0, #32]
 800a05c:	b90b      	cbnz	r3, 800a062 <_fflush_r+0x1a>
 800a05e:	f7fe fb7d 	bl	800875c <__sinit>
 800a062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f3      	beq.n	800a052 <_fflush_r+0xa>
 800a06a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a06c:	07d0      	lsls	r0, r2, #31
 800a06e:	d404      	bmi.n	800a07a <_fflush_r+0x32>
 800a070:	0599      	lsls	r1, r3, #22
 800a072:	d402      	bmi.n	800a07a <_fflush_r+0x32>
 800a074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a076:	f7fe fc68 	bl	800894a <__retarget_lock_acquire_recursive>
 800a07a:	4628      	mov	r0, r5
 800a07c:	4621      	mov	r1, r4
 800a07e:	f7ff ff5d 	bl	8009f3c <__sflush_r>
 800a082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a084:	07da      	lsls	r2, r3, #31
 800a086:	4605      	mov	r5, r0
 800a088:	d4e4      	bmi.n	800a054 <_fflush_r+0xc>
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	059b      	lsls	r3, r3, #22
 800a08e:	d4e1      	bmi.n	800a054 <_fflush_r+0xc>
 800a090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a092:	f7fe fc5b 	bl	800894c <__retarget_lock_release_recursive>
 800a096:	e7dd      	b.n	800a054 <_fflush_r+0xc>

0800a098 <_sbrk_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d06      	ldr	r5, [pc, #24]	; (800a0b4 <_sbrk_r+0x1c>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f8 f816 	bl	80020d4 <_sbrk>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_sbrk_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_sbrk_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20000a64 	.word	0x20000a64

0800a0b8 <memcpy>:
 800a0b8:	440a      	add	r2, r1
 800a0ba:	4291      	cmp	r1, r2
 800a0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0c0:	d100      	bne.n	800a0c4 <memcpy+0xc>
 800a0c2:	4770      	bx	lr
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	d1f9      	bne.n	800a0c6 <memcpy+0xe>
 800a0d2:	bd10      	pop	{r4, pc}

0800a0d4 <__assert_func>:
 800a0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b09      	ldr	r3, [pc, #36]	; (800a100 <__assert_func+0x2c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	68d8      	ldr	r0, [r3, #12]
 800a0e2:	b14c      	cbz	r4, 800a0f8 <__assert_func+0x24>
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <__assert_func+0x30>)
 800a0e6:	9100      	str	r1, [sp, #0]
 800a0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0ec:	4906      	ldr	r1, [pc, #24]	; (800a108 <__assert_func+0x34>)
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	f000 f844 	bl	800a17c <fiprintf>
 800a0f4:	f000 f854 	bl	800a1a0 <abort>
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <__assert_func+0x38>)
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	e7f3      	b.n	800a0e6 <__assert_func+0x12>
 800a0fe:	bf00      	nop
 800a100:	20000080 	.word	0x20000080
 800a104:	0800a956 	.word	0x0800a956
 800a108:	0800a963 	.word	0x0800a963
 800a10c:	0800a991 	.word	0x0800a991

0800a110 <_calloc_r>:
 800a110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a112:	fba1 2402 	umull	r2, r4, r1, r2
 800a116:	b94c      	cbnz	r4, 800a12c <_calloc_r+0x1c>
 800a118:	4611      	mov	r1, r2
 800a11a:	9201      	str	r2, [sp, #4]
 800a11c:	f7ff fb06 	bl	800972c <_malloc_r>
 800a120:	9a01      	ldr	r2, [sp, #4]
 800a122:	4605      	mov	r5, r0
 800a124:	b930      	cbnz	r0, 800a134 <_calloc_r+0x24>
 800a126:	4628      	mov	r0, r5
 800a128:	b003      	add	sp, #12
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	220c      	movs	r2, #12
 800a12e:	6002      	str	r2, [r0, #0]
 800a130:	2500      	movs	r5, #0
 800a132:	e7f8      	b.n	800a126 <_calloc_r+0x16>
 800a134:	4621      	mov	r1, r4
 800a136:	f7fe fb8a 	bl	800884e <memset>
 800a13a:	e7f4      	b.n	800a126 <_calloc_r+0x16>

0800a13c <__ascii_mbtowc>:
 800a13c:	b082      	sub	sp, #8
 800a13e:	b901      	cbnz	r1, 800a142 <__ascii_mbtowc+0x6>
 800a140:	a901      	add	r1, sp, #4
 800a142:	b142      	cbz	r2, 800a156 <__ascii_mbtowc+0x1a>
 800a144:	b14b      	cbz	r3, 800a15a <__ascii_mbtowc+0x1e>
 800a146:	7813      	ldrb	r3, [r2, #0]
 800a148:	600b      	str	r3, [r1, #0]
 800a14a:	7812      	ldrb	r2, [r2, #0]
 800a14c:	1e10      	subs	r0, r2, #0
 800a14e:	bf18      	it	ne
 800a150:	2001      	movne	r0, #1
 800a152:	b002      	add	sp, #8
 800a154:	4770      	bx	lr
 800a156:	4610      	mov	r0, r2
 800a158:	e7fb      	b.n	800a152 <__ascii_mbtowc+0x16>
 800a15a:	f06f 0001 	mvn.w	r0, #1
 800a15e:	e7f8      	b.n	800a152 <__ascii_mbtowc+0x16>

0800a160 <__ascii_wctomb>:
 800a160:	b149      	cbz	r1, 800a176 <__ascii_wctomb+0x16>
 800a162:	2aff      	cmp	r2, #255	; 0xff
 800a164:	bf85      	ittet	hi
 800a166:	238a      	movhi	r3, #138	; 0x8a
 800a168:	6003      	strhi	r3, [r0, #0]
 800a16a:	700a      	strbls	r2, [r1, #0]
 800a16c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a170:	bf98      	it	ls
 800a172:	2001      	movls	r0, #1
 800a174:	4770      	bx	lr
 800a176:	4608      	mov	r0, r1
 800a178:	4770      	bx	lr
	...

0800a17c <fiprintf>:
 800a17c:	b40e      	push	{r1, r2, r3}
 800a17e:	b503      	push	{r0, r1, lr}
 800a180:	4601      	mov	r1, r0
 800a182:	ab03      	add	r3, sp, #12
 800a184:	4805      	ldr	r0, [pc, #20]	; (800a19c <fiprintf+0x20>)
 800a186:	f853 2b04 	ldr.w	r2, [r3], #4
 800a18a:	6800      	ldr	r0, [r0, #0]
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	f000 f837 	bl	800a200 <_vfiprintf_r>
 800a192:	b002      	add	sp, #8
 800a194:	f85d eb04 	ldr.w	lr, [sp], #4
 800a198:	b003      	add	sp, #12
 800a19a:	4770      	bx	lr
 800a19c:	20000080 	.word	0x20000080

0800a1a0 <abort>:
 800a1a0:	b508      	push	{r3, lr}
 800a1a2:	2006      	movs	r0, #6
 800a1a4:	f000 fa04 	bl	800a5b0 <raise>
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	f7f7 ff1b 	bl	8001fe4 <_exit>

0800a1ae <__sfputc_r>:
 800a1ae:	6893      	ldr	r3, [r2, #8]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	b410      	push	{r4}
 800a1b6:	6093      	str	r3, [r2, #8]
 800a1b8:	da08      	bge.n	800a1cc <__sfputc_r+0x1e>
 800a1ba:	6994      	ldr	r4, [r2, #24]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	db01      	blt.n	800a1c4 <__sfputc_r+0x16>
 800a1c0:	290a      	cmp	r1, #10
 800a1c2:	d103      	bne.n	800a1cc <__sfputc_r+0x1e>
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	f000 b934 	b.w	800a434 <__swbuf_r>
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	1c58      	adds	r0, r3, #1
 800a1d0:	6010      	str	r0, [r2, #0]
 800a1d2:	7019      	strb	r1, [r3, #0]
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <__sfputs_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	18d5      	adds	r5, r2, r3
 800a1e6:	42ac      	cmp	r4, r5
 800a1e8:	d101      	bne.n	800a1ee <__sfputs_r+0x12>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e007      	b.n	800a1fe <__sfputs_r+0x22>
 800a1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff ffda 	bl	800a1ae <__sfputc_r>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d1f3      	bne.n	800a1e6 <__sfputs_r+0xa>
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a200 <_vfiprintf_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460d      	mov	r5, r1
 800a206:	b09d      	sub	sp, #116	; 0x74
 800a208:	4614      	mov	r4, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	4606      	mov	r6, r0
 800a20e:	b118      	cbz	r0, 800a218 <_vfiprintf_r+0x18>
 800a210:	6a03      	ldr	r3, [r0, #32]
 800a212:	b90b      	cbnz	r3, 800a218 <_vfiprintf_r+0x18>
 800a214:	f7fe faa2 	bl	800875c <__sinit>
 800a218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a21a:	07d9      	lsls	r1, r3, #31
 800a21c:	d405      	bmi.n	800a22a <_vfiprintf_r+0x2a>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	059a      	lsls	r2, r3, #22
 800a222:	d402      	bmi.n	800a22a <_vfiprintf_r+0x2a>
 800a224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a226:	f7fe fb90 	bl	800894a <__retarget_lock_acquire_recursive>
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	071b      	lsls	r3, r3, #28
 800a22e:	d501      	bpl.n	800a234 <_vfiprintf_r+0x34>
 800a230:	692b      	ldr	r3, [r5, #16]
 800a232:	b99b      	cbnz	r3, 800a25c <_vfiprintf_r+0x5c>
 800a234:	4629      	mov	r1, r5
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f93a 	bl	800a4b0 <__swsetup_r>
 800a23c:	b170      	cbz	r0, 800a25c <_vfiprintf_r+0x5c>
 800a23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a240:	07dc      	lsls	r4, r3, #31
 800a242:	d504      	bpl.n	800a24e <_vfiprintf_r+0x4e>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	b01d      	add	sp, #116	; 0x74
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	0598      	lsls	r0, r3, #22
 800a252:	d4f7      	bmi.n	800a244 <_vfiprintf_r+0x44>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f7fe fb79 	bl	800894c <__retarget_lock_release_recursive>
 800a25a:	e7f3      	b.n	800a244 <_vfiprintf_r+0x44>
 800a25c:	2300      	movs	r3, #0
 800a25e:	9309      	str	r3, [sp, #36]	; 0x24
 800a260:	2320      	movs	r3, #32
 800a262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a266:	f8cd 800c 	str.w	r8, [sp, #12]
 800a26a:	2330      	movs	r3, #48	; 0x30
 800a26c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a420 <_vfiprintf_r+0x220>
 800a270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a274:	f04f 0901 	mov.w	r9, #1
 800a278:	4623      	mov	r3, r4
 800a27a:	469a      	mov	sl, r3
 800a27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a280:	b10a      	cbz	r2, 800a286 <_vfiprintf_r+0x86>
 800a282:	2a25      	cmp	r2, #37	; 0x25
 800a284:	d1f9      	bne.n	800a27a <_vfiprintf_r+0x7a>
 800a286:	ebba 0b04 	subs.w	fp, sl, r4
 800a28a:	d00b      	beq.n	800a2a4 <_vfiprintf_r+0xa4>
 800a28c:	465b      	mov	r3, fp
 800a28e:	4622      	mov	r2, r4
 800a290:	4629      	mov	r1, r5
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ffa2 	bl	800a1dc <__sfputs_r>
 800a298:	3001      	adds	r0, #1
 800a29a:	f000 80a9 	beq.w	800a3f0 <_vfiprintf_r+0x1f0>
 800a29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a0:	445a      	add	r2, fp
 800a2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 80a1 	beq.w	800a3f0 <_vfiprintf_r+0x1f0>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b8:	f10a 0a01 	add.w	sl, sl, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2c6:	4654      	mov	r4, sl
 800a2c8:	2205      	movs	r2, #5
 800a2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ce:	4854      	ldr	r0, [pc, #336]	; (800a420 <_vfiprintf_r+0x220>)
 800a2d0:	f7f5 ff9e 	bl	8000210 <memchr>
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	b9d8      	cbnz	r0, 800a310 <_vfiprintf_r+0x110>
 800a2d8:	06d1      	lsls	r1, r2, #27
 800a2da:	bf44      	itt	mi
 800a2dc:	2320      	movmi	r3, #32
 800a2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e2:	0713      	lsls	r3, r2, #28
 800a2e4:	bf44      	itt	mi
 800a2e6:	232b      	movmi	r3, #43	; 0x2b
 800a2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f2:	d015      	beq.n	800a320 <_vfiprintf_r+0x120>
 800a2f4:	9a07      	ldr	r2, [sp, #28]
 800a2f6:	4654      	mov	r4, sl
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	f04f 0c0a 	mov.w	ip, #10
 800a2fe:	4621      	mov	r1, r4
 800a300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a304:	3b30      	subs	r3, #48	; 0x30
 800a306:	2b09      	cmp	r3, #9
 800a308:	d94d      	bls.n	800a3a6 <_vfiprintf_r+0x1a6>
 800a30a:	b1b0      	cbz	r0, 800a33a <_vfiprintf_r+0x13a>
 800a30c:	9207      	str	r2, [sp, #28]
 800a30e:	e014      	b.n	800a33a <_vfiprintf_r+0x13a>
 800a310:	eba0 0308 	sub.w	r3, r0, r8
 800a314:	fa09 f303 	lsl.w	r3, r9, r3
 800a318:	4313      	orrs	r3, r2
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	46a2      	mov	sl, r4
 800a31e:	e7d2      	b.n	800a2c6 <_vfiprintf_r+0xc6>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	1d19      	adds	r1, r3, #4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	9103      	str	r1, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfbb      	ittet	lt
 800a32c:	425b      	neglt	r3, r3
 800a32e:	f042 0202 	orrlt.w	r2, r2, #2
 800a332:	9307      	strge	r3, [sp, #28]
 800a334:	9307      	strlt	r3, [sp, #28]
 800a336:	bfb8      	it	lt
 800a338:	9204      	strlt	r2, [sp, #16]
 800a33a:	7823      	ldrb	r3, [r4, #0]
 800a33c:	2b2e      	cmp	r3, #46	; 0x2e
 800a33e:	d10c      	bne.n	800a35a <_vfiprintf_r+0x15a>
 800a340:	7863      	ldrb	r3, [r4, #1]
 800a342:	2b2a      	cmp	r3, #42	; 0x2a
 800a344:	d134      	bne.n	800a3b0 <_vfiprintf_r+0x1b0>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	1d1a      	adds	r2, r3, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	9203      	str	r2, [sp, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfb8      	it	lt
 800a352:	f04f 33ff 	movlt.w	r3, #4294967295
 800a356:	3402      	adds	r4, #2
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a430 <_vfiprintf_r+0x230>
 800a35e:	7821      	ldrb	r1, [r4, #0]
 800a360:	2203      	movs	r2, #3
 800a362:	4650      	mov	r0, sl
 800a364:	f7f5 ff54 	bl	8000210 <memchr>
 800a368:	b138      	cbz	r0, 800a37a <_vfiprintf_r+0x17a>
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	eba0 000a 	sub.w	r0, r0, sl
 800a370:	2240      	movs	r2, #64	; 0x40
 800a372:	4082      	lsls	r2, r0
 800a374:	4313      	orrs	r3, r2
 800a376:	3401      	adds	r4, #1
 800a378:	9304      	str	r3, [sp, #16]
 800a37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37e:	4829      	ldr	r0, [pc, #164]	; (800a424 <_vfiprintf_r+0x224>)
 800a380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a384:	2206      	movs	r2, #6
 800a386:	f7f5 ff43 	bl	8000210 <memchr>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d03f      	beq.n	800a40e <_vfiprintf_r+0x20e>
 800a38e:	4b26      	ldr	r3, [pc, #152]	; (800a428 <_vfiprintf_r+0x228>)
 800a390:	bb1b      	cbnz	r3, 800a3da <_vfiprintf_r+0x1da>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	3307      	adds	r3, #7
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	3308      	adds	r3, #8
 800a39c:	9303      	str	r3, [sp, #12]
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	443b      	add	r3, r7
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	e768      	b.n	800a278 <_vfiprintf_r+0x78>
 800a3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	e7a6      	b.n	800a2fe <_vfiprintf_r+0xfe>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	f04f 0c0a 	mov.w	ip, #10
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3c2:	3a30      	subs	r2, #48	; 0x30
 800a3c4:	2a09      	cmp	r2, #9
 800a3c6:	d903      	bls.n	800a3d0 <_vfiprintf_r+0x1d0>
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0c6      	beq.n	800a35a <_vfiprintf_r+0x15a>
 800a3cc:	9105      	str	r1, [sp, #20]
 800a3ce:	e7c4      	b.n	800a35a <_vfiprintf_r+0x15a>
 800a3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e7f0      	b.n	800a3bc <_vfiprintf_r+0x1bc>
 800a3da:	ab03      	add	r3, sp, #12
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4b12      	ldr	r3, [pc, #72]	; (800a42c <_vfiprintf_r+0x22c>)
 800a3e2:	a904      	add	r1, sp, #16
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7fd fd67 	bl	8007eb8 <_printf_float>
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	1c78      	adds	r0, r7, #1
 800a3ee:	d1d6      	bne.n	800a39e <_vfiprintf_r+0x19e>
 800a3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3f2:	07d9      	lsls	r1, r3, #31
 800a3f4:	d405      	bmi.n	800a402 <_vfiprintf_r+0x202>
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	059a      	lsls	r2, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_vfiprintf_r+0x202>
 800a3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3fe:	f7fe faa5 	bl	800894c <__retarget_lock_release_recursive>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	065b      	lsls	r3, r3, #25
 800a406:	f53f af1d 	bmi.w	800a244 <_vfiprintf_r+0x44>
 800a40a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a40c:	e71c      	b.n	800a248 <_vfiprintf_r+0x48>
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	462a      	mov	r2, r5
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <_vfiprintf_r+0x22c>)
 800a416:	a904      	add	r1, sp, #16
 800a418:	4630      	mov	r0, r6
 800a41a:	f7fd fff1 	bl	8008400 <_printf_i>
 800a41e:	e7e4      	b.n	800a3ea <_vfiprintf_r+0x1ea>
 800a420:	0800aa93 	.word	0x0800aa93
 800a424:	0800aa9d 	.word	0x0800aa9d
 800a428:	08007eb9 	.word	0x08007eb9
 800a42c:	0800a1dd 	.word	0x0800a1dd
 800a430:	0800aa99 	.word	0x0800aa99

0800a434 <__swbuf_r>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	460e      	mov	r6, r1
 800a438:	4614      	mov	r4, r2
 800a43a:	4605      	mov	r5, r0
 800a43c:	b118      	cbz	r0, 800a446 <__swbuf_r+0x12>
 800a43e:	6a03      	ldr	r3, [r0, #32]
 800a440:	b90b      	cbnz	r3, 800a446 <__swbuf_r+0x12>
 800a442:	f7fe f98b 	bl	800875c <__sinit>
 800a446:	69a3      	ldr	r3, [r4, #24]
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	071a      	lsls	r2, r3, #28
 800a44e:	d525      	bpl.n	800a49c <__swbuf_r+0x68>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	b31b      	cbz	r3, 800a49c <__swbuf_r+0x68>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	6922      	ldr	r2, [r4, #16]
 800a458:	1a98      	subs	r0, r3, r2
 800a45a:	6963      	ldr	r3, [r4, #20]
 800a45c:	b2f6      	uxtb	r6, r6
 800a45e:	4283      	cmp	r3, r0
 800a460:	4637      	mov	r7, r6
 800a462:	dc04      	bgt.n	800a46e <__swbuf_r+0x3a>
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f7ff fdee 	bl	800a048 <_fflush_r>
 800a46c:	b9e0      	cbnz	r0, 800a4a8 <__swbuf_r+0x74>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	3b01      	subs	r3, #1
 800a472:	60a3      	str	r3, [r4, #8]
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	701e      	strb	r6, [r3, #0]
 800a47c:	6962      	ldr	r2, [r4, #20]
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	429a      	cmp	r2, r3
 800a482:	d004      	beq.n	800a48e <__swbuf_r+0x5a>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	07db      	lsls	r3, r3, #31
 800a488:	d506      	bpl.n	800a498 <__swbuf_r+0x64>
 800a48a:	2e0a      	cmp	r6, #10
 800a48c:	d104      	bne.n	800a498 <__swbuf_r+0x64>
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fdd9 	bl	800a048 <_fflush_r>
 800a496:	b938      	cbnz	r0, 800a4a8 <__swbuf_r+0x74>
 800a498:	4638      	mov	r0, r7
 800a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49c:	4621      	mov	r1, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f806 	bl	800a4b0 <__swsetup_r>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d0d5      	beq.n	800a454 <__swbuf_r+0x20>
 800a4a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4ac:	e7f4      	b.n	800a498 <__swbuf_r+0x64>
	...

0800a4b0 <__swsetup_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4b2a      	ldr	r3, [pc, #168]	; (800a55c <__swsetup_r+0xac>)
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	6818      	ldr	r0, [r3, #0]
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	b118      	cbz	r0, 800a4c4 <__swsetup_r+0x14>
 800a4bc:	6a03      	ldr	r3, [r0, #32]
 800a4be:	b90b      	cbnz	r3, 800a4c4 <__swsetup_r+0x14>
 800a4c0:	f7fe f94c 	bl	800875c <__sinit>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4ca:	0718      	lsls	r0, r3, #28
 800a4cc:	d422      	bmi.n	800a514 <__swsetup_r+0x64>
 800a4ce:	06d9      	lsls	r1, r3, #27
 800a4d0:	d407      	bmi.n	800a4e2 <__swsetup_r+0x32>
 800a4d2:	2309      	movs	r3, #9
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	e034      	b.n	800a54c <__swsetup_r+0x9c>
 800a4e2:	0758      	lsls	r0, r3, #29
 800a4e4:	d512      	bpl.n	800a50c <__swsetup_r+0x5c>
 800a4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e8:	b141      	cbz	r1, 800a4fc <__swsetup_r+0x4c>
 800a4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ee:	4299      	cmp	r1, r3
 800a4f0:	d002      	beq.n	800a4f8 <__swsetup_r+0x48>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f7ff f8a6 	bl	8009644 <_free_r>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	6363      	str	r3, [r4, #52]	; 0x34
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	2300      	movs	r3, #0
 800a506:	6063      	str	r3, [r4, #4]
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f043 0308 	orr.w	r3, r3, #8
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	b94b      	cbnz	r3, 800a52c <__swsetup_r+0x7c>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a522:	d003      	beq.n	800a52c <__swsetup_r+0x7c>
 800a524:	4621      	mov	r1, r4
 800a526:	4628      	mov	r0, r5
 800a528:	f000 f884 	bl	800a634 <__smakebuf_r>
 800a52c:	89a0      	ldrh	r0, [r4, #12]
 800a52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a532:	f010 0301 	ands.w	r3, r0, #1
 800a536:	d00a      	beq.n	800a54e <__swsetup_r+0x9e>
 800a538:	2300      	movs	r3, #0
 800a53a:	60a3      	str	r3, [r4, #8]
 800a53c:	6963      	ldr	r3, [r4, #20]
 800a53e:	425b      	negs	r3, r3
 800a540:	61a3      	str	r3, [r4, #24]
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	b943      	cbnz	r3, 800a558 <__swsetup_r+0xa8>
 800a546:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a54a:	d1c4      	bne.n	800a4d6 <__swsetup_r+0x26>
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	0781      	lsls	r1, r0, #30
 800a550:	bf58      	it	pl
 800a552:	6963      	ldrpl	r3, [r4, #20]
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	e7f4      	b.n	800a542 <__swsetup_r+0x92>
 800a558:	2000      	movs	r0, #0
 800a55a:	e7f7      	b.n	800a54c <__swsetup_r+0x9c>
 800a55c:	20000080 	.word	0x20000080

0800a560 <_raise_r>:
 800a560:	291f      	cmp	r1, #31
 800a562:	b538      	push	{r3, r4, r5, lr}
 800a564:	4604      	mov	r4, r0
 800a566:	460d      	mov	r5, r1
 800a568:	d904      	bls.n	800a574 <_raise_r+0x14>
 800a56a:	2316      	movs	r3, #22
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 30ff 	mov.w	r0, #4294967295
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a576:	b112      	cbz	r2, 800a57e <_raise_r+0x1e>
 800a578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a57c:	b94b      	cbnz	r3, 800a592 <_raise_r+0x32>
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 f830 	bl	800a5e4 <_getpid_r>
 800a584:	462a      	mov	r2, r5
 800a586:	4601      	mov	r1, r0
 800a588:	4620      	mov	r0, r4
 800a58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a58e:	f000 b817 	b.w	800a5c0 <_kill_r>
 800a592:	2b01      	cmp	r3, #1
 800a594:	d00a      	beq.n	800a5ac <_raise_r+0x4c>
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	d103      	bne.n	800a5a2 <_raise_r+0x42>
 800a59a:	2316      	movs	r3, #22
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e7e7      	b.n	800a572 <_raise_r+0x12>
 800a5a2:	2400      	movs	r4, #0
 800a5a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	4798      	blx	r3
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7e0      	b.n	800a572 <_raise_r+0x12>

0800a5b0 <raise>:
 800a5b0:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <raise+0xc>)
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	f7ff bfd3 	b.w	800a560 <_raise_r>
 800a5ba:	bf00      	nop
 800a5bc:	20000080 	.word	0x20000080

0800a5c0 <_kill_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d07      	ldr	r5, [pc, #28]	; (800a5e0 <_kill_r+0x20>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	f7f7 fcf9 	bl	8001fc4 <_kill>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	d102      	bne.n	800a5dc <_kill_r+0x1c>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	b103      	cbz	r3, 800a5dc <_kill_r+0x1c>
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000a64 	.word	0x20000a64

0800a5e4 <_getpid_r>:
 800a5e4:	f7f7 bce6 	b.w	8001fb4 <_getpid>

0800a5e8 <__swhatbuf_r>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	b096      	sub	sp, #88	; 0x58
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	461e      	mov	r6, r3
 800a5f8:	da0d      	bge.n	800a616 <__swhatbuf_r+0x2e>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a600:	f04f 0100 	mov.w	r1, #0
 800a604:	bf0c      	ite	eq
 800a606:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a60a:	2340      	movne	r3, #64	; 0x40
 800a60c:	2000      	movs	r0, #0
 800a60e:	6031      	str	r1, [r6, #0]
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	b016      	add	sp, #88	; 0x58
 800a614:	bd70      	pop	{r4, r5, r6, pc}
 800a616:	466a      	mov	r2, sp
 800a618:	f000 f848 	bl	800a6ac <_fstat_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	dbec      	blt.n	800a5fa <__swhatbuf_r+0x12>
 800a620:	9901      	ldr	r1, [sp, #4]
 800a622:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a626:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a62a:	4259      	negs	r1, r3
 800a62c:	4159      	adcs	r1, r3
 800a62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a632:	e7eb      	b.n	800a60c <__swhatbuf_r+0x24>

0800a634 <__smakebuf_r>:
 800a634:	898b      	ldrh	r3, [r1, #12]
 800a636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a638:	079d      	lsls	r5, r3, #30
 800a63a:	4606      	mov	r6, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	d507      	bpl.n	800a650 <__smakebuf_r+0x1c>
 800a640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	6123      	str	r3, [r4, #16]
 800a648:	2301      	movs	r3, #1
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	b002      	add	sp, #8
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	ab01      	add	r3, sp, #4
 800a652:	466a      	mov	r2, sp
 800a654:	f7ff ffc8 	bl	800a5e8 <__swhatbuf_r>
 800a658:	9900      	ldr	r1, [sp, #0]
 800a65a:	4605      	mov	r5, r0
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff f865 	bl	800972c <_malloc_r>
 800a662:	b948      	cbnz	r0, 800a678 <__smakebuf_r+0x44>
 800a664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d4ef      	bmi.n	800a64c <__smakebuf_r+0x18>
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	f043 0302 	orr.w	r3, r3, #2
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	e7e3      	b.n	800a640 <__smakebuf_r+0xc>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	6020      	str	r0, [r4, #0]
 800a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	9b00      	ldr	r3, [sp, #0]
 800a684:	6163      	str	r3, [r4, #20]
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	6120      	str	r0, [r4, #16]
 800a68a:	b15b      	cbz	r3, 800a6a4 <__smakebuf_r+0x70>
 800a68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a690:	4630      	mov	r0, r6
 800a692:	f000 f81d 	bl	800a6d0 <_isatty_r>
 800a696:	b128      	cbz	r0, 800a6a4 <__smakebuf_r+0x70>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	431d      	orrs	r5, r3
 800a6a8:	81a5      	strh	r5, [r4, #12]
 800a6aa:	e7cf      	b.n	800a64c <__smakebuf_r+0x18>

0800a6ac <_fstat_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_fstat_r+0x20>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f7f7 fce2 	bl	8002082 <_fstat>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	d102      	bne.n	800a6c8 <_fstat_r+0x1c>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	b103      	cbz	r3, 800a6c8 <_fstat_r+0x1c>
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20000a64 	.word	0x20000a64

0800a6d0 <_isatty_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d06      	ldr	r5, [pc, #24]	; (800a6ec <_isatty_r+0x1c>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f7 fce1 	bl	80020a2 <_isatty>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_isatty_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_isatty_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	20000a64 	.word	0x20000a64

0800a6f0 <_init>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr

0800a6fc <_fini>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr
